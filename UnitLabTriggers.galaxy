//==================================================================================================
// 
// Generated Map Script
// 
// Name:   StarBox - Unit Test [Professional]
// 
//==================================================================================================
include "TriggerLibs/NativeLib"

//--------------------------------------------------------------------------------------------------
// Library Initialization
//--------------------------------------------------------------------------------------------------
void InitLibs () {
    libNtve_InitLib();
}

//--------------------------------------------------------------------------------------------------
// Global Structures
//--------------------------------------------------------------------------------------------------
struct gs_tools_spawnStartingUnit {
    string lv_unitType;
    point lv_unitPosition;
    fixed lv_unitFacing;
};

//--------------------------------------------------------------------------------------------------
// Global Preset Declarations
//--------------------------------------------------------------------------------------------------
const int ge_RemoveUnitRequestOptions_ResourcesCurrent = 0x00000001;
const int ge_RemoveUnitRequestOptions_Count = 0x00000002;
const int ge_RemoveUnitRequestOptions_CancelMorph = 0x00000004;
const int ge_ResourceTableType_Units = 0;
const int ge_ResourceTableType_Buildings = 1;
const int ge_ResourceTableType_Tech = 2;
const int ge_ResourceTableType_Gathered = 3;
const int ge_MatrixOptions_HideButtonDialog = 0x00000001;
const int ge_MatrixOptions_HideImage = 0x00000002;
const int ge_MatrixOptions_Desaturated = 0x00000004;
const int ge_MatrixOptions_OnlyforP1 = 0x00000008;
const int ge_MatrixOptions_Locked = 0x00000010;
const int ge_MatrixOptions_Toggled = 0x00000020;
const int ge_MatrixOptions_Doesnotacceptmouse = 0x00000040;
const int ge_MatrixOptions_Centered = 0x00000080;
const int ge_MatrixOptions_Unused1 = 0x00000100;
const int ge_MatrixOptions_Unused2 = 0x00000200;
const int ge_MatrixBackground_Normal = 0;
const int ge_MatrixBackground_None = 1;
const int ge_MatrixBackground_LeafFrame = 2;
const int ge_MatrixBackground_Unused = 3;
const int ge_CompleteRemoved_Complete = 0;
const int ge_CompleteRemoved_Removed = 1;
const int ge_Alphanumeric_Zero = 0;
const int ge_Alphanumeric_Alpha = 1;
const int ge_Alphanumeric_Beta = 2;
const int ge_Alphanumeric_Gamma = 3;
const int ge_Alphanumeric_Delta = 4;
const int ge_Alphanumeric_Epsilon = 5;
const int ge_Alphanumeric_Zeta = 6;
const int ge_Alphanumeric_Eta = 7;
const int ge_Alphanumeric_Theta = 8;
const int ge_Alphanumeric_Iota = 9;
const int ge_Alphanumeric_Kappa = 10;
const int ge_Alphanumeric_Lambda = 11;
const int ge_Alphanumeric_Mu = 12;
const int ge_Alphanumeric_Nu = 13;
const int ge_Alphanumeric_Xi = 14;
const int ge_IncrementationType_Increase = 0;
const int ge_IncrementationType_Decrease = 1;
const int ge_IncrementationType_Other = 2;
const int ge_ResourceState_Current = 0;
const int ge_ResourceState_Lost = 1;
const int ge_ResourceState_Total = 2;
const int ge_ResourceState_Gathered = 3;
const int ge_TechType_Resource = 0;
const int ge_TechType_Upgrade = 1;
const int ge_TechType_Other = 2;

//--------------------------------------------------------------------------------------------------
// Global Variables
//--------------------------------------------------------------------------------------------------
bool gv_debug;
string[32] gv_tech_unused;
string[100][5][5] gv_uPGLevelRace;
string[100][5][5] gv_upgIMGLevelRace;
int[100][5][5] gv_upgMNRLLevelRace;
int[100][5][5] gv_upgVSPNLevelRace;
int[100][5][5] gv_upgTIMELevelRace;
string[100][5] gv_rESRace;
string[100][5] gv_resIMGRace;
int[100][5] gv_resMNRLRace;
int[100][5] gv_resVSPNRace;
int[100][5] gv_resTIMERace;
text[100][5] gv_resTIPRace;
string[151] gv_unitBTNFACE;
string[151][11] gv_unitNAME;
string[151][11] gv_unitTYPE;
int[151] gv_unitTIME;
string[151] gv_data_unitCMD;
bool gv_controlDOWN;
unitgroup gv_unitsUnderConstruction;
unitgroup gv_unitsDoingConstruction;
int gv_flagsRemoveUnitRequestOptions;
int[101][16] gv_unitCounterUnitOwner;
bool gv_unitCounter_activated;
int[11][21][17] gv_unitCounter_countSpawnerBtnOwner;
int[11][21] gv_unitCounter_databaseNumberSpawnerBtn;
unit[11] gv_unitCounter_spawner;
string[31] gv_unitCounter_excludedFaces;
bool gv_stageBATTLE;
unitgroup gv_tools_spawnStartingGroup;
gs_tools_spawnStartingUnit[11][81] gv_tools_spawnStartingUnit_Neutral;
int gv_tools_spawnSelected;
int[16][10][10] gv_playerMNRLPlayerTypeState;
int[16][10][10] gv_playerVSPNPlayerTypeState;
fixed[16][10][10] gv_playerSUPP_MADEPlayerTypeState;
fixed[16][10][10] gv_playerSUPP_USEDPlayerTypeState;
int[16][10][10] gv_playerTIMEPlayerTypeState;
int gv_playerCURRENT;
timer gv_timer_battle;
bool[11] gv_storageDialog_empty;
int[101][41] gv_mATRIXState;
int[100][101][41] gv_matrixITEMDialogState;
int[100][101][41] gv_matrixITEMimageDialogState;
point[11][16] gv_spawn_pointAdjusted;
point[11][16] gv_spawn_pointDefault;
region[11] gv_spawn_region;
string[11] gv_spawn_name;
region gv_spawn_regionCurrent;
int gv_spawn_numberCurrent;
unit gv_wrench;
unitgroup gv_unitgroupMASTERS;
unitgroup gv_unitgroupSPAWNERS;
unitgroup gv_unitgroupSpawned;
point[16] gv_playerSPAWN;
unit[16] gv_unit_pointSPAWN;
int gv_pointingSPAWN;
playergroup gv_mASTERS;
bool gv_nUKING;
bool gv_cREEPING;
sound gv_creepSOUND;
playergroup gv_playerGroupAGGRESSOR;
int gv_gameZOOM;
bool gv_creepREMOVE;
bool gv_creepGENERATE;
fixed gv_creepSIZE;
point[17] gv_mousePosition;
int gv_dialogRACE;
revealer gv_locationRevealer;
unit gv_cursorUnit;
bool gv_airCreator;
unit gv_unitVariableInstant;
playergroup gv_aIs;

void InitGlobals () {
    int init_i;
    int init_j;
    int init_k;

    for (init_i = 0; init_i <= 150; init_i += 1) {
        gv_unitBTNFACE[init_i] = "";
    }
    for (init_i = 0; init_i <= 150; init_i += 1) {
        for (init_j = 0; init_j <= 10; init_j += 1) {
            gv_unitNAME[init_i][init_j] = "";
        }
    }
    for (init_i = 0; init_i <= 150; init_i += 1) {
        gv_data_unitCMD[init_i] = "";
    }
    gv_unitsUnderConstruction = UnitGroupEmpty();
    gv_unitsDoingConstruction = UnitGroupEmpty();
    gv_flagsRemoveUnitRequestOptions = 3;
    for (init_i = 0; init_i <= 10; init_i += 1) {
        for (init_j = 0; init_j <= 20; init_j += 1) {
            gv_unitCounter_databaseNumberSpawnerBtn[init_i][init_j] = -1;
        }
    }
    for (init_i = 0; init_i <= 30; init_i += 1) {
        gv_unitCounter_excludedFaces[init_i] = "";
    }
    gv_tools_spawnStartingGroup = UnitGroupEmpty();
    gv_playerCURRENT = 13;
    gv_timer_battle = TimerCreate();
    for (init_i = 0; init_i <= 100; init_i += 1) {
        for (init_j = 0; init_j <= 40; init_j += 1) {
            gv_mATRIXState[init_i][init_j] = c_invalidDialogId;
        }
    }
    for (init_i = 0; init_i <= 99; init_i += 1) {
        for (init_j = 0; init_j <= 100; init_j += 1) {
            for (init_k = 0; init_k <= 40; init_k += 1) {
                gv_matrixITEMDialogState[init_i][init_j][init_k] = c_invalidDialogControlId;
            }
        }
    }
    for (init_i = 0; init_i <= 99; init_i += 1) {
        for (init_j = 0; init_j <= 100; init_j += 1) {
            for (init_k = 0; init_k <= 40; init_k += 1) {
                gv_matrixITEMimageDialogState[init_i][init_j][init_k] = c_invalidDialogControlId;
            }
        }
    }
    for (init_i = 0; init_i <= 10; init_i += 1) {
        gv_spawn_name[init_i] = "";
    }
    gv_unitgroupMASTERS = UnitGroupEmpty();
    gv_unitgroupSPAWNERS = UnitGroupEmpty();
    gv_unitgroupSpawned = UnitGroupEmpty();
    gv_pointingSPAWN = -1;
    gv_mASTERS = PlayerGroupEmpty();
    gv_playerGroupAGGRESSOR = PlayerGroupEmpty();
    gv_gameZOOM = 2;
    gv_creepSIZE = 0.1;
    gv_aIs = PlayerGroupEmpty();
}

//--------------------------------------------------------------------------------------------------
// Global Function Declarations
//--------------------------------------------------------------------------------------------------
void gf_TechBuildDatabase ();
void gf_UnitsBuildDatabase ();
void gf_PreloadUnits ();
void gf_UICustomizations ();
void gf_PresetSpawnPoints ();
void gf_TechRegisterALLfromAbility (string lp_ability, string lp_unit);
void gf_TechRegisterfromAbility (string lp_ability, int lp_techNumber, string lp_unit);
void gf_TechAddUnused (string lp_tech);
bool gf_TechIsUnused (string lp_tech, bool lp_logic);
int gf_CountofTechforRace (string lp_race, int lp_techType);
void gf_UnitsRegisterALLfromAbility (string lp_ability);
void gf_UnitsRegisterfromAbility (int lp_commandNumber, string lp_ability);
int gf_UnitDatabaseGetDatabaseNumberbyUnitType (string lp_unitType);
int gf_UnitDatabaseGetDatabaseNumberbyButtonFace (string lp_unitFace);
int gf_UnitDatabaseGetFreeDuplicatebyDatabaseNumber (int lp_databaseNumber);
string gf_UnitDatabaseGetUnitNamebyDatabaseNumber (int lp_databaseNumber);
string gf_UnitDatabaseGetUnitTypebyDatabaseNumber (int lp_databaseNumber);
int gf_CountofUnitsinDatabase ();
int gf_UnitTypeGetTimeCost (string lp_unitType);
void gf_SetUnitSpecials (unit lp_unit);
void gf_RemoveUnitSpecials (unit lp_unit);
void gf_RemoveUnitsRequest (unitgroup lp_unitGroup, int lp_options);
void gf_RemoveUnitRequest (unit lp_unit, int lp_options);
void gf_AggressorUnitsAttackOppositeDirection ();
void gf_RemovePlayerUnitsandResetResources (int lp_owner);
int gf_OppositePlayer (int lp_player);
void gf_UnitCreationDialogCreate ();
void gf_UnitCreationDialogTrigger ();
void gf_SelectUnitCreator (int lp_player);
void gf_UnitCounterCreate ();
void gf_UnitCounterExcludeFace (string lp_face);
bool gf_UnitCounterFaceIsExcluded (string lp_face, bool lp_bool);
void gf_UnitCounterUpdate (int lp_number, string lp_unitType, int lp_owner);
void gf_UnitCounterRemoveUnit (int lp_number, unit lp_unit);
void gf_UnitCounterClear (int lp_player);
void gf_UnitCounterRefresh (playergroup lp_players);
void gf_GameCreate ();
void gf_GameTrigger ();
void gf_SwitchMode ();
void gf_StoreUnitGroupinLastOpenedBank (int lp_bankNumber, int lp_owner);
void gf_StoreAllUnits (int lp_bankNumber, int lp_playerNumber);
void gf_RestoreUnitGroupfromLastOpenedBank (int lp_bankNumber, int lp_owner);
void gf_RestoreAllUnitGroups (int lp_bankNumber, int lp_playerNumber);
void gf_ToolsDialogCreate ();
void gf_ToolsDialogTrigger ();
int gf_CountofLocations ();
void gf_AddStartingUnitsforCurrentLocation ();
void gf_RemoveStartingUnitsforCurrentLocation ();
void gf_MirrorUnitwithPosition (unit lp_unittoMirror);
void gf_ChangeLocation (int lp_location);
void gf_RefreshCamera ();
void gf_PauseCreeping ();
void gf_StopNuking ();
void gf_StopCreeping ();
void gf_StopSpawnPointing ();
void gf_SetSpawnPoint ();
void gf_ResetSpawnPoints ();
void gf_SetNuke ();
void gf_SetCreep ();
void gf_ResourceDialogCreate ();
void gf_ResourceDialogAddRemoveTable ();
void gf_ResourceDialogAddUnit (unit lp_unit, int lp_times, int lp_action);
void gf_ResourceDialogAddUnitType (string lp_unit, int lp_times, int lp_action, int lp_player);
void gf_ResourceDialogAddContents (int lp_action, int lp_minerals, int lp_vespene, fixed lp_suppliesUsed, fixed lp_suppliesMade, int lp_time, int lp_player, int lp_type, int lp_state, int lp_times);
void gf_ResourceDialogAddTech (int lp_action, int lp_state, int lp_player, string lp_research);
void gf_ResourceDialogResetPlayer (int lp_player);
void gf_ResourceDialogRemoveLosses ();
void gf_ResourceDialogRefresh ();
void gf_TechMenuCreate ();
void gf_TechMenuTrigger ();
void gf_TechMenuResearch (int lp_player, int lp_number, int lp_race);
void gf_TechMenuUpgrade (int lp_player, int lp_number, int lp_race, int lp_incrementation);
void gf_TechMenuRefresh ();
void gf_TechMenuShowHideTechManager (bool lp_showHide, playergroup lp_players);
void gf_SettingsCreate ();
void gf_SettingsTrigger ();
void gf_SettingsPreset ();
bool gf_SettingsOptionEnabled (int lp_number, int lp_master, int lp_slave);
void gf_SettingsMenuApplyOmni ();
void gf_SettingsMenu3SuppressCollision ();
void gf_SettingsMenu4AdjustNeutral ();
void gf_SettingsMenu4SetAggressors ();
void gf_SettingsMenu7AdjustVision ();
void gf_SettingsMenu6AdjustRequirements (int lp_master);
void gf_SettingsMenu8AdjustAttack (int lp_master);
void gf_TimerCreate ();
void gf_StorageDialogCreate ();
void gf_StorageDialogTrigger ();
void gf_StorageDialogPreload ();
void gf_StorageDialogDeleteSlot (string lp_bankName, int lp_bankNumber, int lp_playerNumber);
void gf_DebugMessage (text lp_message);
void gf_MatrixCreate (int lp_dialog, int lp_dialogState, int lp_buttonWidth, int lp_buttonHeight, int lp_columns, int lp_rows, int lp_x, int lp_y, int lp_anchor, int lp_background, int lp_options);
void gf_MatrixCreateButton (int lp_buttonWidth, int lp_buttonHeight, int lp_column, int lp_row, int lp_dialog, int lp_dialogState, int lp_options, string lp_buttonImage, text lp_title, text lp_tooltip);
void gf_MatrixCreateCheckbox (int lp_buttonWidth, int lp_buttonHeight, int lp_column, int lp_row, int lp_dialog, int lp_dialogState, int lp_options, string lp_buttonImage, text lp_title, text lp_tooltip, bool lp_checked);
void gf_MatrixCreateLabel (int lp_buttonWidth, int lp_buttonHeight, int lp_column, int lp_row, int lp_dialog, int lp_dialogState, color lp_color, text lp_text, string lp_buttonImage);
void gf_MatrixCreatePulldown (int lp_pulldownWidth, int lp_pulldownHeight, int lp_column, int lp_row, int lp_dialog, int lp_dialogState, int lp_options, string lp__1, string lp__2, string lp__3, string lp__4, string lp__5, string lp__6, string lp__7, string lp__8, string lp__9, string lp__10);
void gf_MatrixModifyItem (bool lp_action, int lp_number, int lp_type, int lp_state);
int gf_MatrixGetButtonsforRace (int lp_dialog, int lp_dialogState);
bool gf_PresetFlagsCheck (int lp_preset, int lp_totalFlags, int lp_flag);
soundlink gf_SoundRacialCompleteRemove (int lp_race, int lp_status);
string gf_TechGetName (string lp_upgrade);
string gf_TechGetRace (string lp_upgrade);
string gf_TechGetfromAbility (string lp_ability, int lp_upgradeNumber);
int gf_TechGetCostfromAbility (string lp_ability, int lp_upgradeNumber, int lp_resource);
int gf_IntegertoAlphanumeric (int lp_integer);
string gf_ConvertIntegertoRacestr (int lp_race);
string gf_ConvertIntegertoRace (int lp_integer);
int gf_ConvertRaceToInteger (string lp_race);
string gf_ConvertUnitNamePathtoUnitName (string lp_unitNamePath);
string gf_UnitTypeGetRace (string lp_unit);
text gf_UnitTypeGetTooltip (string lp_unitType);
bool gf_UnitTypeIsGround (string lp_unitType);
int gf_UnitTypeGetTimefromAbility (int lp_commandNumber, string lp_ability);
string gf_UnitTypeGetNamefromAbility (int lp_commandNumber, string lp_ability);
fixed gf_PercentofReal (fixed lp_number, fixed lp_percent);
fixed gf_PercentageCompare (fixed lp_x, fixed lp_y);
string gf_ButtonGetFromAbility (string lp_ability, int lp_buttonNumber);
string gf_ButtonGetIcon (string lp_button);
text gf_ButtonTooltip (string lp_button);

//--------------------------------------------------------------------------------------------------
// Trigger Variables
//--------------------------------------------------------------------------------------------------
trigger gt_Initialization;
trigger gt_declarevariables;
trigger gt_AnyKeyDOWN;
trigger gt_AnyKeyUP;
trigger gt_AnyMouseButtonDOWN;
trigger gt_AnyMouseButtonUP;
trigger gt_AnyPlayerMovesMouse;
trigger gt_ChatMessage;
trigger gt_Every3000secondsofRealTime;
trigger gt_Every500secondsofGameTime;
trigger gt_Every005secondsofRealTime;
trigger gt_DetectUnitConstruction;
trigger gt_DetectUnitConstructed;
trigger gt_SetTrainedandConstructedUnitPropertiesAntiInsideSpawn;
trigger gt_RemoveForceFields;
trigger gt_DialogItemTriggers;
trigger gt_DialogItemTriggersDEBUG;
trigger gt_UnitCreation;
trigger gt_DeselectUnitCreator;
trigger gt_SwitchtoAir;
trigger gt_SwitchtoGround;
trigger gt_UnitCounterOnCreatorSelection;
trigger gt_UnitCounterOnUnitRemove;
trigger gt_UnitCounterOnUnitCreation;
trigger gt_UnitCounterOnUnitTrain;
trigger gt_ResourceDialogDetectDeath;
trigger gt_ResourceDialogDetectMorphBuildingMANUAL;
trigger gt_ResourceDialogDetectConstructionMorphMerge;
trigger gt_ResourceDialogDetectInterceptors;
trigger gt_ResourceDialogDetectTech;
trigger gt_ResourceDialogDetectUnit;
trigger gt_ResourceDialogDetectResourceChange;
trigger gt_TechMenuTechDetect;
trigger gt_SettingsMenu2NoLimits;
trigger gt_SettingsMenu3NoCollision;
trigger gt_SettingsMenu4Neutral;
trigger gt_SettingsMenu4Aggressor;
trigger gt_SettingsMenu7Vision;
trigger gt_SettingsMenu5InstantBuild;
trigger gt_SettingsMenu5CompleteReserach;
trigger gt_SettingsMenu5CompleteBuild;
trigger gt_SettingsMenu6NoRequirements;
trigger gt_SettingsMenu8DisableAttack;
trigger gt_ChatCommands;

//--------------------------------------------------------------------------------------------------
// Global Presets
//--------------------------------------------------------------------------------------------------

//--------------------------------------------------------------------------------------------------
// Global Functions
//--------------------------------------------------------------------------------------------------
void gf_TechBuildDatabase () {
    // Automatic Variable Declarations
    // Implementation
    gf_TechRegisterALLfromAbility("evolutionchamberresearch", "EvolutionChamber");
    gf_TechRegisterALLfromAbility("SpireResearch", "Spire");
    gf_TechRegisterALLfromAbility("ForgeResearch", "Forge");
    gf_TechRegisterALLfromAbility("CyberneticsCoreResearch", "CyberneticsCore");
    gf_TechRegisterALLfromAbility("EngineeringBayResearch", "EngineeringBay");
    gf_TechRegisterALLfromAbility("ArmoryResearch", "Armory");
    gf_TechRegisterALLfromAbility("LairResearch", "Hive");
    gf_TechRegisterALLfromAbility("SpawningPoolResearch", "SpawningPool");
    gf_TechRegisterALLfromAbility("RoachWarrenResearch", "RoachWarren");
    gf_TechRegisterALLfromAbility("BanelingNestResearch", "BanelingNest");
    gf_TechRegisterALLfromAbility("HydraliskDenResearch", "HydraliskDen");
    gf_TechRegisterALLfromAbility("InfestationPitResearch", "InfestationPit");
    gf_TechRegisterALLfromAbility("UltraliskCavernResearch", "UltraliskCavern");
    gf_TechRegisterALLfromAbility("BarracksTechLabResearch", "BarracksTechLab");
    gf_TechRegisterALLfromAbility("FactoryTechLabResearch", "FactoryTechLab");
    gf_TechRegisterALLfromAbility("StarportTechLabResearch", "StarportTechLab");
    gf_TechRegisterALLfromAbility("GhostAcademyResearch", "GhostAcademy");
    gf_TechRegisterALLfromAbility("FusionCoreResearch", "FusionCore");
    gf_TechRegisterALLfromAbility("TwilightCouncilResearch", "TwilightCouncil");
    gf_TechRegisterALLfromAbility("RoboticsBayResearch", "RoboticsBay");
    gf_TechRegisterALLfromAbility("TemplarArchivesResearch", "TemplarArchive");
    gf_TechRegisterALLfromAbility("FleetBeaconResearch", "FleetBeacon");
}

void gf_UnitsBuildDatabase () {
    // Automatic Variable Declarations
    // Implementation
    gf_UnitsRegisterALLfromAbility("ZergUnitCreatorMorph");
    gf_UnitsRegisterALLfromAbility("TrainQueen");
    gf_UnitsRegisterALLfromAbility("ZergUnitCreatorMorph22");
    gf_UnitsRegisterALLfromAbility("ZergUnitCreatorMorph2");
    gf_UnitsRegisterALLfromAbility("BarracksTrain");
    gf_UnitsRegisterALLfromAbility("CommandCenterTrain");
    gf_UnitsRegisterALLfromAbility("FactoryTrain");
    gf_UnitsRegisterALLfromAbility("StarportTrain");
    gf_UnitsRegisterALLfromAbility("TerranUnitCreatorTrain");
    gf_UnitsRegisterALLfromAbility("GatewayTrain");
    gf_UnitsRegisterALLfromAbility("NexusTrain");
    gf_UnitsRegisterALLfromAbility("NexusTrainMothershipCore");
    gf_UnitsRegisterALLfromAbility("RoboticsFacilityTrain");
    gf_UnitsRegisterALLfromAbility("StargateTrain");
    gf_UnitsRegisterALLfromAbility("ProtossUnitCreatorTrain");
    gf_UnitsRegisterALLfromAbility(AbilityCommandGetAbility(AbilityCommand("CarrierHangar", 0)));
}

void gf_PreloadUnits () {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_PreloadUnit("Mothership", false);
}

void gf_UICustomizations () {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_DisplayScreenImage(1, "UI-Overlap.tga", c_triggerBlendModeNormal, 780, 240, c_anchorBottom, -90, 0);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeArmyButton, false);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeIdleWorkerButton, false);
    UISetResourceVisible(PlayerGroupAll(), c_resourceTypeCustom, false);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeResourcePanel, false);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeTeamResourceButton, false);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeSupply, false);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeAllianceButton, false);
}

void gf_PresetSpawnPoints () {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "SpawnPointDummy", 0, 13, gv_spawn_pointDefault[gv_spawn_numberCurrent][13]);
    UnitGroupAdd(gv_unitgroupMASTERS, UnitLastCreated());
    UnitGroupAdd(gv_unitgroupSpawned, UnitLastCreated());
    gv_unit_pointSPAWN[13] = UnitLastCreated();
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "SpawnPointDummy", 0, 14, gv_spawn_pointDefault[gv_spawn_numberCurrent][14]);
    UnitGroupAdd(gv_unitgroupMASTERS, UnitLastCreated());
    UnitGroupAdd(gv_unitgroupSpawned, UnitLastCreated());
    gv_unit_pointSPAWN[14] = UnitLastCreated();
}

void gf_TechRegisterALLfromAbility (string lp_ability, string lp_unit) {
    // Variable Declarations
    int lv__intA;

    // Automatic Variable Declarations
    const int autoB372542C_ae = 29;
    const int autoB372542C_ai = 1;

    // Variable Initialization

    // Implementation
    lv__intA = 0;
    for ( ; ( (autoB372542C_ai >= 0 && lv__intA <= autoB372542C_ae) || (autoB372542C_ai < 0 && lv__intA >= autoB372542C_ae) ) ; lv__intA += autoB372542C_ai ) {
        gf_TechRegisterfromAbility(lp_ability, lv__intA, lp_unit);
    }
}

void gf_TechRegisterfromAbility (string lp_ability, int lp_techNumber, string lp_unit) {
    // Variable Declarations
    int lv__intA;
    string lv__TECH;
    string lv__techNAME;
    string lv__syncName;
    string lv__techBTN;
    int lv__techRACE;
    string lv__techICON;
    string lv__techICON_path;
    int lv__techLEVEL;
    int lv__techCOUNT;

    // Automatic Variable Declarations
    int autoE53DD9D0_ae;
    const int autoE53DD9D0_ai = 1;

    // Variable Initialization
    lv__TECH = gf_TechGetfromAbility(lp_ability, lp_techNumber);
    lv__techNAME = (gf_TechGetName(lv__TECH));
    lv__syncName = "";
    lv__techBTN = gf_ButtonGetFromAbility(lp_ability, lp_techNumber);
    lv__techRACE = gf_ConvertRaceToInteger(gf_UnitTypeGetRace(lp_unit));
    lv__techICON = gf_ButtonGetIcon(lv__techBTN);
    lv__techICON_path = CatalogFieldValueGet(c_gameCatalogUpgrade, lv__TECH, "Icon", c_playerAny);
    lv__techLEVEL = StringToInt(StringSub(lv__techNAME, StringLength(lv__techNAME), StringLength(lv__techNAME)));

    // Implementation
    if ((lv__techNAME != "") && (lv__TECH != "") && (lv__TECH != null)) {
        if ((StringContains(lv__techNAME, "Level", c_stringAnywhere, c_stringNoCase) == true)) {
            if (gf_TechIsUnused(lv__TECH, true)) {
                return ;
            }

            lv__techCOUNT = gf_CountofTechforRace(gf_UnitTypeGetRace(lp_unit), ge_TechType_Upgrade);
            gv_uPGLevelRace[lv__techCOUNT][lv__techLEVEL][lv__techRACE] = lv__TECH;
            gv_upgIMGLevelRace[lv__techCOUNT][lv__techLEVEL][lv__techRACE] = lv__techICON;
            gv_upgIMGLevelRace[lv__techCOUNT][0][lv__techRACE] = ((StringSub(lv__techICON_path, 1, (StringLength(lv__techICON_path) - 5)) + "0.dds"));
            gv_upgMNRLLevelRace[lv__techCOUNT][lv__techLEVEL][lv__techRACE] = gf_TechGetCostfromAbility(lp_ability, lp_techNumber, c_resourceTypeMinerals);
            gv_upgVSPNLevelRace[lv__techCOUNT][lv__techLEVEL][lv__techRACE] = gf_TechGetCostfromAbility(lp_ability, lp_techNumber, c_resourceTypeVespene);
            gv_upgTIMELevelRace[lv__techCOUNT][lv__techLEVEL][lv__techRACE] = gf_TechGetCostfromAbility(lp_ability, lp_techNumber, c_resourceTypeTerrazine);
        }
        else {
            autoE53DD9D0_ae = gf_CountofTechforRace(gf_UnitTypeGetRace(lp_unit), ge_TechType_Resource);
            lv__intA = 0;
            for ( ; ( (autoE53DD9D0_ai >= 0 && lv__intA <= autoE53DD9D0_ae) || (autoE53DD9D0_ai < 0 && lv__intA >= autoE53DD9D0_ae) ) ; lv__intA += autoE53DD9D0_ai ) {
                if ((StringCompare(gf_TechGetName(lv__TECH), gf_TechGetName(gv_rESRace[lv__intA][lv__techRACE]), c_stringNoCase) == 0)) {
                    return ;
                }

            }
            if (gf_TechIsUnused(lv__TECH, true)) {
                return ;
            }

            lv__techCOUNT = gf_CountofTechforRace(gf_UnitTypeGetRace(lp_unit), ge_TechType_Resource);
            gv_rESRace[lv__techCOUNT][lv__techRACE] = lv__TECH;
            gv_resTIPRace[lv__techCOUNT][lv__techRACE] = (StringExternal(lv__techNAME) + ((StringExternal("Param/Value/4DF01B81") + gf_ButtonTooltip(lv__techBTN)) + (StringExternal("Param/Value/54AF38F3") + ((StringExternal("Param/Value/7AADD924") + IntToText(gf_TechGetCostfromAbility(lp_ability, lp_techNumber, c_resourceTypeMinerals))) + ((StringExternal("Param/Value/1814A240") + IntToText(gf_TechGetCostfromAbility(lp_ability, lp_techNumber, c_resourceTypeVespene))) + (StringExternal("Param/Value/F6DEF5EE") + IntToText(gf_TechGetCostfromAbility(lp_ability, lp_techNumber, c_resourceTypeTerrazine))))))));
            gv_resIMGRace[lv__techCOUNT][lv__techRACE] = lv__techICON;
            gv_resMNRLRace[lv__techCOUNT][lv__techRACE] = gf_TechGetCostfromAbility(lp_ability, lp_techNumber, c_resourceTypeMinerals);
            gv_resVSPNRace[lv__techCOUNT][lv__techRACE] = gf_TechGetCostfromAbility(lp_ability, lp_techNumber, c_resourceTypeVespene);
            gv_resTIMERace[lv__techCOUNT][lv__techRACE] = gf_TechGetCostfromAbility(lp_ability, lp_techNumber, c_resourceTypeTerrazine);
        }
    }

}

void gf_TechAddUnused (string lp_tech) {
    // Variable Declarations
    int lv__intA;

    // Automatic Variable Declarations
    const int auto7B032CFF_ae = 30;
    const int auto7B032CFF_ai = 1;

    // Variable Initialization

    // Implementation
    lv__intA = 0;
    for ( ; ( (auto7B032CFF_ai >= 0 && lv__intA <= auto7B032CFF_ae) || (auto7B032CFF_ai < 0 && lv__intA >= auto7B032CFF_ae) ) ; lv__intA += auto7B032CFF_ai ) {
        if ((gv_tech_unused[lv__intA] == null)) {
            gv_tech_unused[lv__intA] = lp_tech;
            break;
        }

    }
}

bool gf_TechIsUnused (string lp_tech, bool lp_logic) {
    // Variable Declarations
    int lv__intA;

    // Automatic Variable Declarations
    const int autoFE0045A6_ae = 30;
    const int autoFE0045A6_ai = 1;

    // Variable Initialization

    // Implementation
    lv__intA = 0;
    for ( ; ( (autoFE0045A6_ai >= 0 && lv__intA <= autoFE0045A6_ae) || (autoFE0045A6_ai < 0 && lv__intA >= autoFE0045A6_ae) ) ; lv__intA += autoFE0045A6_ai ) {
        if ((lp_tech == gv_tech_unused[lv__intA])) {
            if ((lp_logic == true)) {
                return true;
            }
            else {
                return false;
            }
        }

    }
    if ((lp_logic == true)) {
        return false;
    }
    else {
        return true;
    }
}

int gf_CountofTechforRace (string lp_race, int lp_techType) {
    // Variable Declarations
    int lv__integerA;

    // Automatic Variable Declarations
    int auto19586E9D_val;
    const int auto78E32F86_ae = 99;
    const int auto78E32F86_ai = 1;
    const int auto9C0AFCAD_ae = 99;
    const int auto9C0AFCAD_ai = 1;

    // Variable Initialization

    // Implementation
    auto19586E9D_val = lp_techType;
    if (auto19586E9D_val == ge_TechType_Upgrade) {
        lv__integerA = 0;
        for ( ; ( (auto78E32F86_ai >= 0 && lv__integerA <= auto78E32F86_ae) || (auto78E32F86_ai < 0 && lv__integerA >= auto78E32F86_ae) ) ; lv__integerA += auto78E32F86_ai ) {
            if ((gv_uPGLevelRace[lv__integerA][3][gf_ConvertRaceToInteger(lp_race)] == null)) {
                return (lv__integerA * 1);
            }

        }
    }
    else if (auto19586E9D_val == ge_TechType_Resource) {
        lv__integerA = 0;
        for ( ; ( (auto9C0AFCAD_ai >= 0 && lv__integerA <= auto9C0AFCAD_ae) || (auto9C0AFCAD_ai < 0 && lv__integerA >= auto9C0AFCAD_ae) ) ; lv__integerA += auto9C0AFCAD_ai ) {
            if ((gv_rESRace[lv__integerA][gf_ConvertRaceToInteger(lp_race)] == null)) {
                return lv__integerA;
            }

        }
    }
    else {
    }
    return lv__integerA;
}

void gf_UnitsRegisterALLfromAbility (string lp_ability) {
    // Variable Declarations
    int lv__intA;

    // Automatic Variable Declarations
    const int auto55C297D7_ae = 29;
    const int auto55C297D7_ai = 1;

    // Variable Initialization

    // Implementation
    lv__intA = 0;
    for ( ; ( (auto55C297D7_ai >= 0 && lv__intA <= auto55C297D7_ae) || (auto55C297D7_ai < 0 && lv__intA >= auto55C297D7_ae) ) ; lv__intA += auto55C297D7_ai ) {
        gf_UnitsRegisterfromAbility(lv__intA, lp_ability);
    }
}

void gf_UnitsRegisterfromAbility (int lp_commandNumber, string lp_ability) {
    // Variable Declarations
    string lv__unitNAME;
    string lv__unitTYPE;
    string lv__unitCMD;
    string lv__unitBTN;
    int lv__count;
    int lv__duplicate;
    int lv__database;

    // Automatic Variable Declarations
    // Variable Initialization
    lv__unitNAME = gf_UnitTypeGetNamefromAbility(lp_commandNumber, lp_ability);
    lv__unitTYPE = UnitTypeFromString(lv__unitNAME);
    lv__unitCMD = CatalogFieldValueGet(c_gameCatalogAbil, lp_ability, "AbilSetId", c_playerAny);
    lv__unitBTN = CatalogFieldValueGet(c_gameCatalogAbil, lp_ability, "InfoArray[" + IntToString(lp_commandNumber) + "].Button.DefaultButtonFace", c_playerAny);

    // Implementation
    if ((lv__unitNAME != "")) {
        lv__database = gf_UnitDatabaseGetDatabaseNumberbyButtonFace(lv__unitBTN);
        if ((lv__database == -1)) {
            lv__count = gf_CountofUnitsinDatabase();
            gv_unitNAME[lv__count][0] = lv__unitNAME;
            gv_unitTYPE[lv__count][0] = lv__unitTYPE;
            gv_unitTIME[lv__count] = gf_UnitTypeGetTimefromAbility(lp_commandNumber, lp_ability);
            gv_unitBTNFACE[lv__count] = lv__unitBTN;
            gv_data_unitCMD[lv__count] = lv__unitCMD;
        }
        else {
            lv__duplicate = gf_UnitDatabaseGetFreeDuplicatebyDatabaseNumber(lv__database);
            if ((lv__duplicate != -1)) {
                gv_unitNAME[lv__database][lv__duplicate] = lv__unitNAME;
                gv_unitTYPE[lv__database][lv__duplicate] = lv__unitTYPE;
            }
            else {
                UIDisplayMessage(PlayerGroupAll(), c_messageAreaError, StringExternal("Param/Value/05E8F998"));
            }
        }
    }

}

int gf_UnitDatabaseGetDatabaseNumberbyUnitType (string lp_unitType) {
    // Variable Declarations
    string lv__unitNAME;
    int lv__unit;
    int lv__duplicate;

    // Automatic Variable Declarations
    int autoF2074D91_ae;
    const int autoF2074D91_ai = 1;
    const int auto401308D6_ae = 9;
    const int auto401308D6_ai = 1;

    // Variable Initialization
    lv__unitNAME = (lp_unitType);

    // Implementation
    autoF2074D91_ae = (gf_CountofUnitsinDatabase() - 1);
    lv__unit = 0;
    for ( ; ( (autoF2074D91_ai >= 0 && lv__unit <= autoF2074D91_ae) || (autoF2074D91_ai < 0 && lv__unit >= autoF2074D91_ae) ) ; lv__unit += autoF2074D91_ai ) {
        lv__duplicate = 0;
        for ( ; ( (auto401308D6_ai >= 0 && lv__duplicate <= auto401308D6_ae) || (auto401308D6_ai < 0 && lv__duplicate >= auto401308D6_ae) ) ; lv__duplicate += auto401308D6_ai ) {
            if ((gv_unitNAME[lv__unit][lv__duplicate] == lv__unitNAME)) {
                return lv__unit;
            }

        }
    }
    return -1;
}

int gf_UnitDatabaseGetDatabaseNumberbyButtonFace (string lp_unitFace) {
    // Variable Declarations
    string lv__unitNAME;
    int lv__unit;

    // Automatic Variable Declarations
    int auto984CB947_ae;
    const int auto984CB947_ai = 1;

    // Variable Initialization
    lv__unitNAME = (lp_unitFace);

    // Implementation
    auto984CB947_ae = (gf_CountofUnitsinDatabase() - 1);
    lv__unit = 0;
    for ( ; ( (auto984CB947_ai >= 0 && lv__unit <= auto984CB947_ae) || (auto984CB947_ai < 0 && lv__unit >= auto984CB947_ae) ) ; lv__unit += auto984CB947_ai ) {
        if ((lp_unitFace == gv_unitBTNFACE[lv__unit])) {
            return lv__unit;
        }

    }
    return -1;
}

int gf_UnitDatabaseGetFreeDuplicatebyDatabaseNumber (int lp_databaseNumber) {
    // Variable Declarations
    int lv__duplicate;

    // Automatic Variable Declarations
    const int auto39380122_ae = 9;
    const int auto39380122_ai = 1;

    // Variable Initialization

    // Implementation
    lv__duplicate = 0;
    for ( ; ( (auto39380122_ai >= 0 && lv__duplicate <= auto39380122_ae) || (auto39380122_ai < 0 && lv__duplicate >= auto39380122_ae) ) ; lv__duplicate += auto39380122_ai ) {
        if ((gv_unitTYPE[lp_databaseNumber][lv__duplicate] == null)) {
            return lv__duplicate;
        }

    }
    return -1;
}

string gf_UnitDatabaseGetUnitNamebyDatabaseNumber (int lp_databaseNumber) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_databaseNumber >= 0) && (lp_databaseNumber <= 150)) {
        return gv_unitNAME[lp_databaseNumber][0];
    }
    else {
        return "";
    }
}

string gf_UnitDatabaseGetUnitTypebyDatabaseNumber (int lp_databaseNumber) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_databaseNumber >= 0) && (lp_databaseNumber <= 150)) {
        return gv_unitTYPE[lp_databaseNumber][0];
    }
    else {
        return null;
    }
}

int gf_CountofUnitsinDatabase () {
    // Variable Declarations
    int lv__integerA;

    // Automatic Variable Declarations
    const int autoA1BDA5D2_ae = 150;
    const int autoA1BDA5D2_ai = 1;

    // Variable Initialization

    // Implementation
    lv__integerA = 0;
    for ( ; ( (autoA1BDA5D2_ai >= 0 && lv__integerA <= autoA1BDA5D2_ae) || (autoA1BDA5D2_ai < 0 && lv__integerA >= autoA1BDA5D2_ae) ) ; lv__integerA += autoA1BDA5D2_ai ) {
        if ((gv_unitTYPE[lv__integerA][0] == null)) {
            return lv__integerA;
        }

    }
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaError, StringExternal("Param/Value/3603482D"));
    return -1;
}

int gf_UnitTypeGetTimeCost (string lp_unitType) {
    // Variable Declarations
    string lv__unitNAME;
    int lv__intA;

    // Automatic Variable Declarations
    int autoFC49C35A_ae;
    const int autoFC49C35A_ai = 1;

    // Variable Initialization
    lv__unitNAME = (lp_unitType);

    // Implementation
    autoFC49C35A_ae = (gf_CountofUnitsinDatabase() - 1);
    lv__intA = 0;
    for ( ; ( (autoFC49C35A_ai >= 0 && lv__intA <= autoFC49C35A_ae) || (autoFC49C35A_ai < 0 && lv__intA >= autoFC49C35A_ae) ) ; lv__intA += autoFC49C35A_ai ) {
        if ((gv_unitNAME[lv__intA][0] == lv__unitNAME)) {
            return gv_unitTIME[lv__intA];
        }

    }
    return 0;
}

void gf_SetUnitSpecials (unit lp_unit) {
    // Automatic Variable Declarations
    // Implementation
    if ((UnitGroupHasUnit(gv_unitgroupMASTERS, lp_unit) == false)) {
        if ((libNtve_gf_UnitInRegion(lp_unit, gv_spawn_regionCurrent) == false)) {
            gf_RemoveUnitRequest(lp_unit, ge_RemoveUnitRequestOptions_CancelMorph);
        }
        else {
            if ((UnitGetType(lp_unit) == "Interceptor")) {
                UnitSetState(lp_unit, c_unitStateTargetable, true);
                UnitSetState(lp_unit, c_unitStateSelectable, true);
            }

            if ((UnitTypeTestAttribute(UnitGetType(lp_unit), c_unitAttributeSummoned) == false)) {
                if ((gv_stageBATTLE == false)) {
                    UnitGroupAdd(gv_unitgroupSpawned, lp_unit);
                    if ((gf_SettingsOptionEnabled(1, 1, UnitGetOwner(lp_unit)) == true)) {
                        UnitSetPropertyFixed(lp_unit, c_unitPropEnergyPercent, 100.0);
                    }

                    if ((gf_SettingsOptionEnabled(3, 1, UnitGetOwner(lp_unit)) == true)) {
                        UnitBehaviorAdd(lp_unit, "SuppressCollision", lp_unit, 1);
                    }

                }
                else {
                    UnitBehaviorRemove(lp_unit, "SuppressCollision", 1);
                }
            }

        }
    }

}

void gf_RemoveUnitSpecials (unit lp_unit) {
    // Automatic Variable Declarations
    // Implementation
    if ((UnitGroupHasUnit(gv_unitgroupMASTERS, lp_unit) == false)) {
        if ((libNtve_gf_UnitInRegion(lp_unit, gv_spawn_regionCurrent) == false)) {
            UnitRemove(lp_unit);
        }
        else {
            if ((UnitTypeTestAttribute(UnitGetType(lp_unit), c_unitAttributeSummoned) == false)) {
                UnitBehaviorRemove(lp_unit, "SuppressCollision", 1);
            }

        }
    }

}

void gf_RemoveUnitsRequest (unitgroup lp_unitGroup, int lp_options) {
    // Variable Declarations
    int lv__stack;
    int lv__breathe;
    unitgroup lv__group;

    // Automatic Variable Declarations
    int auto48A0FDC6_ae;
    int auto48A0FDC6_ai;
    unitgroup autoE8DF1D05_g;
    int autoE8DF1D05_u;
    unit autoE8DF1D05_var;

    // Variable Initialization
    lv__breathe = 20;
    lv__group = lp_unitGroup;

    // Implementation
    auto48A0FDC6_ae = UnitGroupCount(lp_unitGroup, c_unitCountAll);
    auto48A0FDC6_ai = lv__breathe;
    lv__stack = 1;
    for ( ; ( (auto48A0FDC6_ai >= 0 && lv__stack <= auto48A0FDC6_ae) || (auto48A0FDC6_ai < 0 && lv__stack >= auto48A0FDC6_ae) ) ; lv__stack += auto48A0FDC6_ai ) {
        autoE8DF1D05_g = UnitGroupFilter(null, c_playerAny, lp_unitGroup, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), lv__breathe);
        autoE8DF1D05_u = UnitGroupCount(autoE8DF1D05_g, c_unitCountAll);
        for (;; autoE8DF1D05_u -= 1) {
            autoE8DF1D05_var = UnitGroupUnitFromEnd(autoE8DF1D05_g, autoE8DF1D05_u);
            if (autoE8DF1D05_var == null) { break; }
            gf_RemoveUnitRequest(autoE8DF1D05_var, lp_options);
        }
        Wait(0.001, c_timeReal);
    }
}

void gf_RemoveUnitRequest (unit lp_unit, int lp_options) {
    // Variable Declarations
    int lv__owner;
    int lv__presets;

    // Automatic Variable Declarations
    // Variable Initialization
    lv__presets = 3;

    // Implementation
    if ((UnitGroupHasUnit(gv_unitgroupMASTERS, lp_unit) == false) && (UnitGroupHasUnit(gv_unitgroupSPAWNERS, lp_unit) == false)) {
        gf_DebugMessage((StringExternal("Param/Value/05B969AA") + (UnitTypeGetName(UnitGetType(lp_unit)) + (StringExternal("Param/Value/9B2E47BC") + IntToText(UnitGetOwner(lp_unit))))));
        lv__owner = UnitGetOwner(lp_unit);
        UnitSetPosition(lp_unit, PointFromId(6), false);
        UnitSetOwner(lp_unit, 0, false);
        if (gf_PresetFlagsCheck((lp_options), gv_flagsRemoveUnitRequestOptions, 3)) {
            UnitIssueOrder(lp_unit, Order(AbilityCommand("que1", 0)), c_orderQueueReplace);
        }

        if (gf_PresetFlagsCheck((lp_options), gv_flagsRemoveUnitRequestOptions, 2)) {
            gf_UnitCounterUpdate(-1, UnitGetType(lp_unit), lv__owner);
        }

        if (gf_PresetFlagsCheck((lp_options), gv_flagsRemoveUnitRequestOptions, 1)) {
            gf_ResourceDialogAddUnitType(UnitGetType(lp_unit), 1, ge_IncrementationType_Other, lv__owner);
        }

        if ((UnitGetType(lp_unit) == "Carrier")) {
            gf_ResourceDialogAddUnitType("Interceptor", UnitMagazineCount(lp_unit, "CarrierHangar"), ge_IncrementationType_Other, lv__owner);
        }

        UnitRemove(lp_unit);
    }
    else {
        gf_DebugMessage((StringExternal("Param/Value/CFE2A477") + (UnitTypeGetName(UnitGetType(lp_unit)) + (StringExternal("Param/Value/C50E760A") + IntToText(UnitGetOwner(lp_unit))))));
    }
}

void gf_AggressorUnitsAttackOppositeDirection () {
    // Variable Declarations
    int lv__intA;

    // Automatic Variable Declarations
    const int auto36F50CBB_ae = 15;
    const int auto36F50CBB_ai = 1;
    unitgroup auto80C66F30_g;
    int auto80C66F30_u;
    unit auto80C66F30_var;

    // Variable Initialization

    // Implementation
    lv__intA = 0;
    for ( ; ( (auto36F50CBB_ai >= 0 && lv__intA <= auto36F50CBB_ae) || (auto36F50CBB_ai < 0 && lv__intA >= auto36F50CBB_ae) ) ; lv__intA += auto36F50CBB_ai ) {
        if ((PlayerGroupHasPlayer(gv_playerGroupAGGRESSOR, lv__intA) == true) && (gv_stageBATTLE == true)) {
            auto80C66F30_g = UnitGroup(null, lv__intA, gv_spawn_regionCurrent, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
            auto80C66F30_u = UnitGroupCount(auto80C66F30_g, c_unitCountAll);
            for (;; auto80C66F30_u -= 1) {
                auto80C66F30_var = UnitGroupUnitFromEnd(auto80C66F30_g, auto80C66F30_u);
                if (auto80C66F30_var == null) { break; }
                if ((UnitOrder(auto80C66F30_var, 1) == null) && (UnitOrder(auto80C66F30_var, 0) == null)) {
                    UnitIssueOrder(auto80C66F30_var, OrderTargetingPoint(AbilityCommand("attack", 0), gv_playerSPAWN[gf_OppositePlayer(lv__intA)]), c_orderQueueReplace);
                }

            }
        }

    }
}

void gf_RemovePlayerUnitsandResetResources (int lp_owner) {
    // Variable Declarations
    int lv__breathe;
    int lv__units;
    int lv__intA;
    unitgroup lv__group;

    // Automatic Variable Declarations
    // Variable Initialization
    lv__breathe = 30;
    lv__group = UnitGroupEmpty();

    // Implementation
    gf_RemoveUnitsRequest(UnitGroup(null, lp_owner, RegionFromId(1), UnitFilter(0, 0, 0, 0), 0), 0);
    Wait(0.01, c_timeReal);
    gf_UnitCounterClear(lp_owner);
    gf_ResourceDialogResetPlayer(lp_owner);
    gf_UnitCounterRefresh(gv_mASTERS);
}

int gf_OppositePlayer (int lp_player) {
    // Automatic Variable Declarations
    int autoAD6E4F34_val;

    // Implementation
    autoAD6E4F34_val = lp_player;
    if (autoAD6E4F34_val == 13) {
        return 14;
    }
    else if (autoAD6E4F34_val == 14) {
        return 13;
    }
    else {
        return 0;
    }
}

void gf_UnitCreationDialogCreate () {
    // Automatic Variable Declarations
    // Implementation
    gf_MatrixCreate(c_gameCatalogUnit, ge_Alphanumeric_Zero, 170, 50, 1, 1, 180, 250, c_anchorBottomRight, ge_MatrixBackground_None, ge_MatrixOptions_OnlyforP1);
    gf_MatrixCreatePulldown(130, 50, 1, 1, c_gameCatalogUnit, ge_Alphanumeric_Zero, ge_MatrixOptions_OnlyforP1, "x1", "x5", "x25", "x100", "", "", "", "", "", "");
    gf_MatrixCreateButton(40, 40, 4, 1, c_gameCatalogUnit, ge_Alphanumeric_Zero, ge_MatrixOptions_OnlyforP1, "Assets\\Textures\\ui_tip_questionmark.dds", StringToText(""), StringExternal("Param/Value/5ABA0026"));
    gf_MatrixCreate(c_gameCatalogUnit, ge_Alphanumeric_Alpha, 155, 45, 1, 1, 430, 220, c_anchorBottomRight, ge_MatrixBackground_LeafFrame, ge_MatrixOptions_OnlyforP1);
    gf_MatrixCreateButton(110, 45, 1, 1, c_gameCatalogUnit, ge_Alphanumeric_Alpha, ge_MatrixOptions_OnlyforP1, "Assets\\Textures\\075.dds", StringExternal("Param/Value/4C32EDFF"), null);
    gf_MatrixCreateButton(45, 45, 10, 1, c_gameCatalogUnit, ge_Alphanumeric_Alpha, ge_MatrixOptions_HideButtonDialog | ge_MatrixOptions_OnlyforP1, "Assets\\Textures\\ui-editoricon-data_types_units.dds", StringToText(""), null);
}

void gf_UnitCreationDialogTrigger () {
    // Automatic Variable Declarations
    // Implementation
    if ((EventDialogControl() == gv_matrixITEMDialogState[0][c_gameCatalogUnit][ge_Alphanumeric_Alpha])) {
        gf_SelectUnitCreator(EventPlayer());
    }

}

void gf_SelectUnitCreator (int lp_player) {
    // Variable Declarations
    unit lv__spawner;

    // Automatic Variable Declarations
    unitgroup auto7CEE115D_g;
    int auto7CEE115D_u;
    unit auto7CEE115D_var;

    // Variable Initialization
    lv__spawner = UnitGroupUnit(gv_unitgroupMASTERS, (gv_dialogRACE + 0));

    // Implementation
    if ((gv_airCreator == true)) {
        lv__spawner = UnitGroupUnit(gv_unitgroupMASTERS, (gv_dialogRACE + 3));
    }
    else {
        lv__spawner = UnitGroupUnit(gv_unitgroupMASTERS, gv_dialogRACE);
    }
    auto7CEE115D_g = UnitGroupSelected(EventPlayer());
    auto7CEE115D_u = UnitGroupCount(auto7CEE115D_g, c_unitCountAll);
    for (;; auto7CEE115D_u -= 1) {
        auto7CEE115D_var = UnitGroupUnitFromEnd(auto7CEE115D_g, auto7CEE115D_u);
        if (auto7CEE115D_var == null) { break; }
        UnitSelect(auto7CEE115D_var, EventPlayer(), false);
        if ((UnitGroupHasUnit(gv_unitgroupMASTERS, auto7CEE115D_var) == true)) {
            TriggerWaitForTrigger(gt_DeselectUnitCreator, true);
        }

    }
    UnitSelect(lv__spawner, EventPlayer(), true);
}

void gf_UnitCounterCreate () {
    // Variable Declarations
    int lv__posColumn;
    int lv__posRow;
    int lv__spawner;
    int lv__button;
    int lv__column;
    int lv__row;
    int lv__btn;
    int lv__playerMultiplayer;
    int lv__dialogNumber;
    string lv__face;
    int lv__face_unitdatabase;

    // Automatic Variable Declarations
    int autoA5742687_ae;
    const int autoA5742687_ai = 1;
    const int autoB809AFA0_ae = 9;
    const int autoB809AFA0_ai = 3;
    const int auto14DEA692_ae = 5;
    const int auto14DEA692_ai = 1;
    const int auto2488A77E_ae = 20;
    const int auto2488A77E_ai = 1;

    // Variable Initialization
    lv__playerMultiplayer = (gv_playerCURRENT - 13);
    lv__face = "";

    // Implementation
    autoA5742687_ae = UnitGroupCount(gv_unitgroupSPAWNERS, c_unitCountAll);
    lv__spawner = 1;
    for ( ; ( (autoA5742687_ai >= 0 && lv__spawner <= autoA5742687_ae) || (autoA5742687_ai < 0 && lv__spawner >= autoA5742687_ae) ) ; lv__spawner += autoA5742687_ai ) {
        gv_unitCounter_spawner[lv__spawner] = UnitGroupUnit(gv_unitgroupSPAWNERS, lv__spawner);
        gf_MatrixCreate(c_gameCatalogArmyUnit, gf_IntegertoAlphanumeric(lv__spawner), 73, 72, 5, 3, 26, 20, c_anchorBottomRight, ge_MatrixBackground_None, ge_MatrixOptions_HideButtonDialog | ge_MatrixOptions_OnlyforP1);
        lv__posRow = 3;
        for ( ; ( (autoB809AFA0_ai >= 0 && lv__posRow <= autoB809AFA0_ae) || (autoB809AFA0_ai < 0 && lv__posRow >= autoB809AFA0_ae) ) ; lv__posRow += autoB809AFA0_ai ) {
            lv__posColumn = 1;
            for ( ; ( (auto14DEA692_ai >= 0 && lv__posColumn <= auto14DEA692_ae) || (auto14DEA692_ai < 0 && lv__posColumn >= auto14DEA692_ae) ) ; lv__posColumn += auto14DEA692_ai ) {
                gf_MatrixCreateButton(72, 24, lv__posColumn, lv__posRow, c_gameCatalogArmyUnit, gf_IntegertoAlphanumeric(lv__spawner), ge_MatrixOptions_HideButtonDialog | ge_MatrixOptions_HideImage | ge_MatrixOptions_OnlyforP1, "Assets\\Textures\\ui_battlenet_glue_replay_listitemselected.dds", StringToText(""), null);
                gf_MatrixCreateLabel(72, 24, lv__posColumn, lv__posRow, c_gameCatalogArmyUnit, gf_IntegertoAlphanumeric(lv__spawner), Color(100.00, 100.00, 100.00), StringExternal("Param/Value/A097B032"), null);
                DialogControlSetPosition(DialogControlLastCreated(), gv_mASTERS, DialogControlGetAnchor(DialogControlLastCreated(), 1), (DialogControlGetOffsetX(DialogControlLastCreated(), 1) + 6), (DialogControlGetOffsetY(DialogControlLastCreated(), 1) - 3));
                DialogControlSetVisible(DialogControlLastCreated(), gv_mASTERS, false);
            }
        }
        lv__button = 0;
        for ( ; ( (auto2488A77E_ai >= 0 && lv__button <= auto2488A77E_ae) || (auto2488A77E_ai < 0 && lv__button >= auto2488A77E_ae) ) ; lv__button += auto2488A77E_ai ) {
            lv__face = CatalogFieldValueGet(c_gameCatalogUnit, UnitGetType(gv_unitCounter_spawner[lv__spawner]), "CardLayouts[" + IntToString(0) + "].LayoutButtons[" + IntToString(lv__button) + "].Face", c_playerAny);
            lv__face_unitdatabase = gf_UnitDatabaseGetDatabaseNumberbyButtonFace(lv__face);
            if ((lv__face_unitdatabase != -1) && gf_UnitCounterFaceIsExcluded(lv__face, false)) {
                gv_unitCounter_databaseNumberSpawnerBtn[lv__spawner][lv__button] = lv__face_unitdatabase;
                lv__column = CatalogFieldValueGetAsInt(c_gameCatalogUnit, UnitGetType(gv_unitCounter_spawner[lv__spawner]), "CardLayouts[" + IntToString(0) + "].LayoutButtons[" + IntToString(lv__button) + "].Column", c_playerAny);
                lv__row = CatalogFieldValueGetAsInt(c_gameCatalogUnit, UnitGetType(gv_unitCounter_spawner[lv__spawner]), "CardLayouts[" + IntToString(0) + "].LayoutButtons[" + IntToString(lv__button) + "].Row", c_playerAny);
                lv__btn = (lv__column + (lv__row * 5));
                lv__btn *= 2;
                DialogControlSetVisible(gv_matrixITEMimageDialogState[lv__btn][c_gameCatalogArmyUnit][lv__spawner], gv_mASTERS, true);
                DialogControlSetVisible(gv_matrixITEMDialogState[(lv__btn + 1)][c_gameCatalogArmyUnit][lv__spawner], gv_mASTERS, true);
            }

        }
    }
    TriggerEnable(gt_UnitCounterOnCreatorSelection, true);
    TriggerEnable(gt_UnitCounterOnUnitCreation, true);
    TriggerEnable(gt_UnitCounterOnUnitRemove, true);
    TriggerEnable(gt_UnitCounterOnUnitTrain, true);
}

void gf_UnitCounterExcludeFace (string lp_face) {
    // Variable Declarations
    int lv__face;

    // Automatic Variable Declarations
    const int auto453BF886_ae = 29;
    const int auto453BF886_ai = 1;

    // Variable Initialization

    // Implementation
    lv__face = 0;
    for ( ; ( (auto453BF886_ai >= 0 && lv__face <= auto453BF886_ae) || (auto453BF886_ai < 0 && lv__face >= auto453BF886_ae) ) ; lv__face += auto453BF886_ai ) {
        if ((gv_unitCounter_excludedFaces[lv__face] == "")) {
            gv_unitCounter_excludedFaces[lv__face] = lp_face;
            return ;
        }

    }
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaError, StringExternal("Param/Value/A6489E4D"));
}

bool gf_UnitCounterFaceIsExcluded (string lp_face, bool lp_bool) {
    // Variable Declarations
    int lv__face;

    // Automatic Variable Declarations
    const int auto0AAC3D73_ae = 29;
    const int auto0AAC3D73_ai = 1;

    // Variable Initialization

    // Implementation
    lv__face = 0;
    for ( ; ( (auto0AAC3D73_ai >= 0 && lv__face <= auto0AAC3D73_ae) || (auto0AAC3D73_ai < 0 && lv__face >= auto0AAC3D73_ae) ) ; lv__face += auto0AAC3D73_ai ) {
        if ((StringCompare(lp_face, gv_unitCounter_excludedFaces[lv__face], c_stringCase) == 0)) {
            if ((lp_bool == true)) {
                return true;
            }
            else {
                return false;
            }
        }

    }
    if ((lp_bool == false)) {
        return true;
    }
    else {
        return false;
    }
}

void gf_UnitCounterUpdate (int lp_number, string lp_unitType, int lp_owner) {
    // Variable Declarations
    int lv__unitNumber;
    int lv__intA;

    // Automatic Variable Declarations
    // Variable Initialization
    lv__unitNumber = gf_UnitDatabaseGetDatabaseNumberbyUnitType(lp_unitType);

    // Implementation
    if ((lv__unitNumber != -1)) {
        gv_unitCounterUnitOwner[lv__unitNumber][lp_owner] += lp_number;
        gf_UnitCounterRefresh(gv_mASTERS);
    }

}

void gf_UnitCounterRemoveUnit (int lp_number, unit lp_unit) {
    // Variable Declarations
    int lv__intA;

    // Automatic Variable Declarations
    int autoF2BD83F0_ae;
    const int autoF2BD83F0_ai = 1;

    // Variable Initialization

    // Implementation
    autoF2BD83F0_ae = lp_number;
    lv__intA = 1;
    for ( ; ( (autoF2BD83F0_ai >= 0 && lv__intA <= autoF2BD83F0_ae) || (autoF2BD83F0_ai < 0 && lv__intA >= autoF2BD83F0_ae) ) ; lv__intA += autoF2BD83F0_ai ) {
        gv_unitCounterUnitOwner[gf_UnitDatabaseGetDatabaseNumberbyUnitType(UnitGetType(lp_unit))][UnitGetOwner(lp_unit)] -= 1;
    }
    gf_UnitCounterRefresh(gv_mASTERS);
}

void gf_UnitCounterClear (int lp_player) {
    // Variable Declarations
    int lv__intA;

    // Automatic Variable Declarations
    int autoCA380F41_ae;
    const int autoCA380F41_ai = 1;

    // Variable Initialization

    // Implementation
    autoCA380F41_ae = (gf_CountofUnitsinDatabase() - 1);
    lv__intA = 0;
    for ( ; ( (autoCA380F41_ai >= 0 && lv__intA <= autoCA380F41_ae) || (autoCA380F41_ai < 0 && lv__intA >= autoCA380F41_ae) ) ; lv__intA += autoCA380F41_ai ) {
        gv_unitCounterUnitOwner[lv__intA][lp_player] = 0;
    }
    gf_UnitCounterRefresh(gv_mASTERS);
}

void gf_UnitCounterRefresh (playergroup lp_players) {
    // Variable Declarations
    int lv__spawner;
    int lv__button;
    int lv__btn;
    int lv__dialog;
    int lv__column;
    int lv__row;

    // Automatic Variable Declarations
    playergroup autoDC020600_g;
    int autoDC020600_var;
    const int autoD76959DB_ae = 10;
    const int autoD76959DB_ai = 1;
    const int autoC44F387B_ae = 10;
    const int autoC44F387B_ai = 1;
    const int auto4C7B4E57_ae = 20;
    const int auto4C7B4E57_ai = 1;
    const int autoDDFBCB6F_ae = 10;
    const int autoDDFBCB6F_ai = 1;

    // Variable Initialization

    // Implementation
    autoDC020600_g = lp_players;
    autoDC020600_var = -1;
    while (true) {
        autoDC020600_var = PlayerGroupNextPlayer(autoDC020600_g, autoDC020600_var);
        if (autoDC020600_var < 0) { break; }
        lv__spawner = 1;
        for ( ; ( (autoD76959DB_ai >= 0 && lv__spawner <= autoD76959DB_ae) || (autoD76959DB_ai < 0 && lv__spawner >= autoD76959DB_ae) ) ; lv__spawner += autoD76959DB_ai ) {
            if ((gv_unitCounter_spawner[lv__spawner] != null) && (UnitGroupCount(UnitGroupSelected(autoDC020600_var), c_unitCountAlive) == 1) && (UnitIsSelected(gv_unitCounter_spawner[lv__spawner], autoDC020600_var) == true)) {
                if ((DialogIsVisible(gv_mATRIXState[c_gameCatalogArmyUnit][lv__spawner], autoDC020600_var) == false)) {
                    lv__dialog = 0;
                    for ( ; ( (autoC44F387B_ai >= 0 && lv__dialog <= autoC44F387B_ae) || (autoC44F387B_ai < 0 && lv__dialog >= autoC44F387B_ae) ) ; lv__dialog += autoC44F387B_ai ) {
                        DialogSetVisible(gv_mATRIXState[c_gameCatalogArmyUnit][lv__dialog], lp_players, false);
                    }
                    DialogSetVisible(gv_mATRIXState[c_gameCatalogArmyUnit][lv__spawner], lp_players, true);
                }

                lv__button = 0;
                for ( ; ( (auto4C7B4E57_ai >= 0 && lv__button <= auto4C7B4E57_ae) || (auto4C7B4E57_ai < 0 && lv__button >= auto4C7B4E57_ae) ) ; lv__button += auto4C7B4E57_ai ) {
                    if ((gv_unitCounter_databaseNumberSpawnerBtn[lv__spawner][lv__button] != -1)) {
                        lv__column = CatalogFieldValueGetAsInt(c_gameCatalogUnit, UnitGetType(gv_unitCounter_spawner[lv__spawner]), "CardLayouts[" + IntToString(0) + "].LayoutButtons[" + IntToString(lv__button) + "].Column", c_playerAny);
                        lv__row = CatalogFieldValueGetAsInt(c_gameCatalogUnit, UnitGetType(gv_unitCounter_spawner[lv__spawner]), "CardLayouts[" + IntToString(0) + "].LayoutButtons[" + IntToString(lv__button) + "].Row", c_playerAny);
                        lv__btn = (lv__column + (lv__row * 5));
                        lv__btn *= 2;
                        lv__btn += 1;
                        libNtve_gf_SetDialogItemText(gv_matrixITEMDialogState[lv__btn][c_gameCatalogArmyUnit][lv__spawner], (StringExternal("Param/Value/A4BD0BAF") + IntToText(gv_unitCounterUnitOwner[gv_unitCounter_databaseNumberSpawnerBtn[lv__spawner][lv__button]][gv_playerCURRENT])), lp_players);
                    }

                }
                return ;
            }

        }
    }
    lv__dialog = 0;
    for ( ; ( (autoDDFBCB6F_ai >= 0 && lv__dialog <= autoDDFBCB6F_ae) || (autoDDFBCB6F_ai < 0 && lv__dialog >= autoDDFBCB6F_ae) ) ; lv__dialog += autoDDFBCB6F_ai ) {
        DialogSetVisible(gv_mATRIXState[c_gameCatalogArmyUnit][lv__dialog], lp_players, false);
    }
}

void gf_GameCreate () {
    // Automatic Variable Declarations
    // Implementation
    gf_MatrixCreate(c_gameCatalogGame, ge_Alphanumeric_Zero, 60, 90, 4, 2, 405, 15, c_anchorBottomLeft, ge_MatrixBackground_None, ge_MatrixOptions_OnlyforP1);
    gf_MatrixCreateButton(240, 90, 1, 1, c_gameCatalogGame, ge_Alphanumeric_Zero, 0, "Assets\\Textures\\075.dds", StringExternal("Param/Value/CB13A512"), StringToText(""));
    gf_MatrixCreateButton(240, 90, 1, 1, c_gameCatalogGame, ge_Alphanumeric_Zero, ge_MatrixOptions_HideButtonDialog, "Assets\\Textures\\075.dds", StringExternal("Param/Value/FF560370"), StringToText(""));
    gf_MatrixCreateButton(240, 90, 1, 2, c_gameCatalogGame, ge_Alphanumeric_Zero, 0, "Assets\\Textures\\075.dds", StringExternal("Param/Value/BF01BF32"), StringToText(""));
}

void gf_GameTrigger () {
    // Variable Declarations
    unit lv__UNIT;
    int lv__intA;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((EventDialogControl() == gv_matrixITEMDialogState[0][c_gameCatalogGame][ge_Alphanumeric_Zero])) {
        DialogControlSetEnabled(EventDialogControl(), PlayerGroupAll(), false);
        gf_SwitchMode();
        DialogControlSetEnabled(EventDialogControl(), PlayerGroupAll(), true);
        DialogControlSetVisible(EventDialogControl(), PlayerGroupAll(), false);
        DialogControlSetVisible(gv_matrixITEMDialogState[1][c_gameCatalogGame][ge_Alphanumeric_Zero], PlayerGroupAll(), true);
    }
    else if ((EventDialogControl() == gv_matrixITEMDialogState[1][c_gameCatalogGame][ge_Alphanumeric_Zero])) {
        DialogControlSetEnabled(EventDialogControl(), PlayerGroupAll(), false);
        gf_SwitchMode();
        DialogControlSetEnabled(EventDialogControl(), PlayerGroupAll(), true);
        DialogControlSetVisible(EventDialogControl(), PlayerGroupAll(), false);
        DialogControlSetVisible(gv_matrixITEMDialogState[0][c_gameCatalogGame][ge_Alphanumeric_Zero], PlayerGroupAll(), true);
    }
    else if ((EventDialogControl() == gv_matrixITEMDialogState[2][c_gameCatalogGame][ge_Alphanumeric_Zero])) {
        DialogControlSetEnabled(EventDialogControl(), PlayerGroupAll(), false);
        gf_RemovePlayerUnitsandResetResources(0);
        gf_RemovePlayerUnitsandResetResources(13);
        gf_RemovePlayerUnitsandResetResources(14);
        CreepModify(RegionGetCenter(gv_spawn_regionCurrent), 50.0, false, false);
        gf_AddStartingUnitsforCurrentLocation();
        DialogControlSetEnabled(EventDialogControl(), PlayerGroupAll(), true);
    }
}

void gf_SwitchMode () {
    // Variable Declarations
    int lv__intA;

    // Automatic Variable Declarations
    bool autoA4CB9558_val;
    unitgroup autoC80F89DD_g;
    int autoC80F89DD_u;
    unit autoC80F89DD_var;
    unitgroup autoCE91CD32_g;
    int autoCE91CD32_u;
    unit autoCE91CD32_var;
    const int auto7E48CF91_ae = 20;
    const int auto7E48CF91_ai = 1;
    unitgroup autoDE7495F9_g;
    int autoDE7495F9_u;
    unit autoDE7495F9_var;

    // Variable Initialization

    // Implementation
    autoA4CB9558_val = gv_stageBATTLE;
    if (autoA4CB9558_val == true) {
        gv_stageBATTLE = false;
        gf_SettingsMenu4AdjustNeutral();
        gf_SettingsMenu6AdjustRequirements(1);
        gf_SettingsMenu8AdjustAttack(1);
        DialogSetVisible(gv_mATRIXState[c_gameCatalogValidator][ge_Alphanumeric_Zero], PlayerGroupSingle(EventPlayer()), false);
        DialogSetVisible(gv_mATRIXState[c_gameCatalogValidator][ge_Alphanumeric_Alpha], PlayerGroupSingle(EventPlayer()), false);
        DialogControlSetVisible(gv_matrixITEMDialogState[1][c_gameCatalogValidator][ge_Alphanumeric_Delta], PlayerGroupSingle(EventPlayer()), true);
        DialogControlSetVisible(gv_matrixITEMimageDialogState[1][c_gameCatalogValidator][ge_Alphanumeric_Delta], PlayerGroupSingle(EventPlayer()), true);
        DialogControlSetVisible(gv_matrixITEMDialogState[0][c_gameCatalogTerrainTex][ge_Alphanumeric_Delta], PlayerGroupAll(), true);
        DialogControlSetVisible(gv_matrixITEMimageDialogState[0][c_gameCatalogTerrainTex][ge_Alphanumeric_Delta], PlayerGroupAll(), true);
        DialogControlSetVisible(gv_matrixITEMDialogState[1][c_gameCatalogTerrainTex][ge_Alphanumeric_Delta], PlayerGroupAll(), false);
        DialogControlSetVisible(gv_matrixITEMimageDialogState[1][c_gameCatalogTerrainTex][ge_Alphanumeric_Delta], PlayerGroupAll(), false);
        DialogSetVisible(gv_mATRIXState[c_gameCatalogTerrainTex][ge_Alphanumeric_Epsilon], gv_mASTERS, false);
        DialogSetVisible(gv_mATRIXState[c_gameCatalogTerrainTex][ge_Alphanumeric_Gamma], gv_mASTERS, true);
        DialogSetVisible(gv_mATRIXState[c_gameCatalogTerrainTex][ge_Alphanumeric_Beta], gv_mASTERS, true);
        UnitPauseAll(true);
        if ((libNtve_gf_DialogItemIsChecked(gv_matrixITEMDialogState[23][c_gameCatalogValidator][ge_Alphanumeric_Alpha], EventPlayer()) == true)) {
            gf_RemovePlayerUnitsandResetResources(13);
            UnitRemove(gv_unit_pointSPAWN[13]);
        }

        if ((libNtve_gf_DialogItemIsChecked(gv_matrixITEMDialogState[24][c_gameCatalogValidator][ge_Alphanumeric_Alpha], EventPlayer()) == true)) {
            gf_RemovePlayerUnitsandResetResources(14);
            UnitRemove(gv_unit_pointSPAWN[14]);
        }

        if ((libNtve_gf_DialogItemIsChecked(gv_matrixITEMDialogState[23][c_gameCatalogValidator][ge_Alphanumeric_Alpha], EventPlayer()) == true) && (libNtve_gf_DialogItemIsChecked(gv_matrixITEMDialogState[24][c_gameCatalogValidator][ge_Alphanumeric_Alpha], EventPlayer()) == true)) {
            gf_RemovePlayerUnitsandResetResources(0);
        }

        UnitPauseAll(false);
        Wait(0.01, c_timeReal);
        gf_RestoreAllUnitGroups(0, EventPlayer());
        Wait(0.01, c_timeReal);
        autoC80F89DD_g = UnitGroup(null, c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        autoC80F89DD_u = UnitGroupCount(autoC80F89DD_g, c_unitCountAll);
        for (;; autoC80F89DD_u -= 1) {
            autoC80F89DD_var = UnitGroupUnitFromEnd(autoC80F89DD_g, autoC80F89DD_u);
            if (autoC80F89DD_var == null) { break; }
            gf_SetUnitSpecials(autoC80F89DD_var);
        }
        TimerPause(gv_timer_battle, true);
        VisEnable(c_visTypeMask, false);
        VisEnable(c_visTypeFog, false);
        SoundPlay(SoundLink("Sentry_ForceFieldDeath", -1), PlayerGroupAll(), 100.0, 0.0);
    }
    else if (autoA4CB9558_val == false) {
        autoCE91CD32_g = UnitGroup(null, c_playerAny, gv_spawn_regionCurrent, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        autoCE91CD32_u = UnitGroupCount(autoCE91CD32_g, c_unitCountAll);
        for (;; autoCE91CD32_u -= 1) {
            autoCE91CD32_var = UnitGroupUnitFromEnd(autoCE91CD32_g, autoCE91CD32_u);
            if (autoCE91CD32_var == null) { break; }
            if (((UnitGetType(autoCE91CD32_var) == "BanelingCocoon") || (UnitGetType(autoCE91CD32_var) == "BroodLordCocoon") || (UnitGetType(autoCE91CD32_var) == "Egg") || (UnitGetType(autoCE91CD32_var) == "LurkerMPEgg") || (UnitGetType(autoCE91CD32_var) == "OverlordCocoon"))) {
                UnitSetProgressComplete(autoCE91CD32_var, 1, 100);
            }
            else {
                lv__intA = 1;
                for ( ; ( (auto7E48CF91_ai >= 0 && lv__intA <= auto7E48CF91_ae) || (auto7E48CF91_ai < 0 && lv__intA >= auto7E48CF91_ae) ) ; lv__intA += auto7E48CF91_ai ) {
                    UnitSetProgressStage(autoCE91CD32_var, lv__intA, c_unitProgressStageCancel);
                }
            }
        }
        Wait(0.01, c_timeReal);
        gv_stageBATTLE = true;
        gf_SettingsMenu6AdjustRequirements(1);
        gf_SettingsMenu7AdjustVision();
        gf_SettingsMenu4SetAggressors();
        gf_SettingsMenu8AdjustAttack(1);
        DialogSetVisible(gv_mATRIXState[c_gameCatalogValidator][ge_Alphanumeric_Zero], PlayerGroupSingle(EventPlayer()), false);
        DialogSetVisible(gv_mATRIXState[c_gameCatalogValidator][ge_Alphanumeric_Alpha], PlayerGroupSingle(EventPlayer()), false);
        DialogControlSetVisible(gv_matrixITEMDialogState[1][c_gameCatalogValidator][ge_Alphanumeric_Delta], PlayerGroupSingle(EventPlayer()), true);
        DialogControlSetVisible(gv_matrixITEMimageDialogState[1][c_gameCatalogValidator][ge_Alphanumeric_Delta], PlayerGroupSingle(EventPlayer()), true);
        DialogControlSetVisible(gv_matrixITEMDialogState[0][c_gameCatalogTerrainTex][ge_Alphanumeric_Delta], PlayerGroupAll(), false);
        DialogControlSetVisible(gv_matrixITEMimageDialogState[0][c_gameCatalogTerrainTex][ge_Alphanumeric_Delta], PlayerGroupAll(), false);
        DialogControlSetVisible(gv_matrixITEMDialogState[1][c_gameCatalogTerrainTex][ge_Alphanumeric_Delta], PlayerGroupAll(), true);
        DialogControlSetVisible(gv_matrixITEMimageDialogState[1][c_gameCatalogTerrainTex][ge_Alphanumeric_Delta], PlayerGroupAll(), true);
        DialogSetVisible(gv_mATRIXState[c_gameCatalogTerrainTex][ge_Alphanumeric_Epsilon], gv_mASTERS, true);
        DialogSetVisible(gv_mATRIXState[c_gameCatalogTerrainTex][ge_Alphanumeric_Gamma], gv_mASTERS, false);
        DialogSetVisible(gv_mATRIXState[c_gameCatalogTerrainTex][ge_Alphanumeric_Beta], gv_mASTERS, false);
        gf_StoreAllUnits(0, EventPlayer());
        Wait(0.01, c_timeReal);
        autoDE7495F9_g = UnitGroup(null, c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        autoDE7495F9_u = UnitGroupCount(autoDE7495F9_g, c_unitCountAll);
        for (;; autoDE7495F9_u -= 1) {
            autoDE7495F9_var = UnitGroupUnitFromEnd(autoDE7495F9_g, autoDE7495F9_u);
            if (autoDE7495F9_var == null) { break; }
            gf_RemoveUnitSpecials(autoDE7495F9_var);
        }
        gf_ResourceDialogRemoveLosses();
        libNtve_gf_SetAlliance(13, 14, libNtve_ge_AllianceSetting_Enemy);
        gf_AggressorUnitsAttackOppositeDirection();
        TimerStart(gv_timer_battle, 7200.0, false, c_timeGame);
        VisEnable(c_visTypeMask, true);
        VisEnable(c_visTypeFog, true);
        SoundPlay(SoundLink("Marauder_AttackLaunch", -1), PlayerGroupAll(), 100.0, 0.0);
        SoundPlay(SoundLink("Marauder_Attack", -1), PlayerGroupAll(), 100.0, 0.0);
    }
    else {
    }
}

void gf_StoreUnitGroupinLastOpenedBank (int lp_bankNumber, int lp_owner) {
    // Variable Declarations
    int lv__unit;
    int lv__cargo;
    int lv__totalUnits;
    int lv__OWNER;
    string lv__SECTION_OWNER;
    string lv__TOTALUNITS;
    string lv__UNIT;
    string lv__POSITION;
    string lv__FACING;
    string lv__SPAWNER;
    string lv__INTERCEPTORS;
    string lv__CARGO;

    // Automatic Variable Declarations
    unitgroup auto9E92CE64_g;
    int auto9E92CE64_u;
    unit auto9E92CE64_var;
    const int autoB42C0593_ae = 9;
    const int autoB42C0593_ai = 1;

    // Variable Initialization
    lv__totalUnits = -1;
    lv__OWNER = lp_owner;
    lv__SECTION_OWNER = (("Bank" + IntToString(lp_bankNumber)) + ("Owner" + IntToString(lv__OWNER)));
    lv__TOTALUNITS = "TotalUnits";
    lv__UNIT = "Unit";
    lv__POSITION = "Position";
    lv__FACING = "Facing";
    lv__SPAWNER = "Spawner";
    lv__INTERCEPTORS = "Interceptors";
    lv__CARGO = "Cargo";

    // Implementation
    BankValueSetFromInt(BankLastCreated(), lv__SECTION_OWNER, lv__TOTALUNITS, lv__totalUnits);
    auto9E92CE64_g = UnitGroup(null, lp_owner, gv_spawn_regionCurrent, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto9E92CE64_u = UnitGroupCount(auto9E92CE64_g, c_unitCountAll);
    for (;; auto9E92CE64_u -= 1) {
        auto9E92CE64_var = UnitGroupUnitFromEnd(auto9E92CE64_g, auto9E92CE64_u);
        if (auto9E92CE64_var == null) { break; }
        if (((UnitGroupHasUnit(gv_unitgroupSpawned, auto9E92CE64_var) == true) || (UnitGetOwner(auto9E92CE64_var) == 0)) && ((UnitGetType(auto9E92CE64_var) != null) && (UnitGetType(auto9E92CE64_var) != "") && (auto9E92CE64_var != null) && (UnitIsValid(auto9E92CE64_var) == true)) && ((UnitGetType(auto9E92CE64_var) != "BroodlingEscort") && (UnitGetType(auto9E92CE64_var) != "Wrench")) && (libNtve_gf_UnitIsInsideTransport(auto9E92CE64_var) == false)) {
            lv__totalUnits += 1;
            lv__UNIT = (lv__UNIT + IntToString(lv__totalUnits));
            lv__POSITION = (lv__POSITION + IntToString(lv__totalUnits));
            lv__FACING = (lv__FACING + IntToString(lv__totalUnits));
            lv__SPAWNER = (lv__SPAWNER + IntToString(lv__totalUnits));
            lv__INTERCEPTORS = (lv__INTERCEPTORS + IntToString(lv__totalUnits));

            gf_DebugMessage(((StringExternal("Param/Value/E97D34C8") + ((UnitGetName(auto9E92CE64_var) + StringExternal("Param/Value/1CCF55A4")) + ((StringExternal("Param/Value/95A50D8A") + IntToText(lv__totalUnits)) + (StringExternal("Param/Value/60993281") + IntToText(lv__OWNER))))) + (StringExternal("Param/Value/4EDDF2E1") + StringToText(lv__SECTION_OWNER))));
            BankValueSetFromInt(BankLastCreated(), lv__SECTION_OWNER, lv__TOTALUNITS, lv__totalUnits);
            BankValueSetFromUnit(BankLastCreated(), lv__SECTION_OWNER, lv__UNIT, auto9E92CE64_var);
            BankValueSetFromPoint(BankLastCreated(), lv__SECTION_OWNER, lv__POSITION, UnitGetPosition(auto9E92CE64_var));
            BankValueSetFromFixed(BankLastCreated(), lv__SECTION_OWNER, lv__FACING, UnitGetFacing(auto9E92CE64_var));
            if ((UnitAbilityExists(auto9E92CE64_var, "CarrierHangar") == true)) {
                BankValueSetFromInt(BankLastCreated(), lv__SECTION_OWNER, lv__INTERCEPTORS, UnitMagazineCount(auto9E92CE64_var, "CarrierHangar"));
            }

            lv__cargo = 1;
            for ( ; ( (autoB42C0593_ai >= 0 && lv__cargo <= autoB42C0593_ae) || (autoB42C0593_ai < 0 && lv__cargo >= autoB42C0593_ae) ) ; lv__cargo += autoB42C0593_ai ) {
                lv__CARGO = (("Cargo" + IntToString(lv__totalUnits)) + ("Slot" + IntToString(lv__cargo)));
                if ((UnitCargo(auto9E92CE64_var, lv__cargo) != null)) {
                    gf_DebugMessage((StringExternal("Param/Value/4339C61E") + ((UnitGetName(auto9E92CE64_var) + StringExternal("Param/Value/CA41E33E")) + (StringExternal("Param/Value/0C666D69") + IntToText(lv__cargo)))));
                    BankValueSetFromInt(BankLastCreated(), lv__SECTION_OWNER, lv__CARGO, gf_UnitDatabaseGetDatabaseNumberbyUnitType(UnitGetType(UnitCargo(auto9E92CE64_var, lv__cargo))));
                }
                else {
                    BankValueSetFromInt(BankLastCreated(), lv__SECTION_OWNER, lv__CARGO, -1);
                }
            }
            if ((UnitGroupHasUnit(gv_unitgroupMASTERS, auto9E92CE64_var) == true)) {
                BankValueSetFromFlag(BankLastCreated(), lv__SECTION_OWNER, lv__SPAWNER, true);
            }
            else {
                BankValueSetFromFlag(BankLastCreated(), lv__SECTION_OWNER, lv__SPAWNER, false);
            }
        }
        else {
            gf_DebugMessage((StringExternal("Param/Value/044522B1") + (UnitTypeGetName(UnitGetType(auto9E92CE64_var)) + (StringExternal("Param/Value/79ED9D9B") + IntToText(UnitGetOwner(auto9E92CE64_var))))));
        }
    }
}

void gf_StoreAllUnits (int lp_bankNumber, int lp_playerNumber) {
    // Variable Declarations
    int lv__unit;
    string lv__SECTION;

    // Automatic Variable Declarations
    // Variable Initialization
    lv__SECTION = ("Bank" + IntToString(lp_bankNumber));

    // Implementation
    BankLoad("StarBox", lp_playerNumber);
    BankValueSetFromInt(BankLastCreated(), lv__SECTION, "Location", gv_spawn_numberCurrent);
    if ((libNtve_gf_DialogItemIsChecked(gv_matrixITEMDialogState[23][c_gameCatalogValidator][ge_Alphanumeric_Alpha], EventPlayer()) == true)) {
        gf_StoreUnitGroupinLastOpenedBank(lp_bankNumber, 13);
    }

    if ((libNtve_gf_DialogItemIsChecked(gv_matrixITEMDialogState[24][c_gameCatalogValidator][ge_Alphanumeric_Alpha], EventPlayer()) == true)) {
        gf_StoreUnitGroupinLastOpenedBank(lp_bankNumber, 14);
    }

    gf_StoreUnitGroupinLastOpenedBank(lp_bankNumber, 0);

    BankSave(BankLastCreated());
}

void gf_RestoreUnitGroupfromLastOpenedBank (int lp_bankNumber, int lp_owner) {
    // Variable Declarations
    int lv__breathe;
    int lv__intA;
    int lv__cargo;
    int lv__totalUnits;
    string lv__TOTALUNITS;
    string lv__SECTION;
    string lv__SECTION_OWNER;
    string lv__UNIT;
    string lv__POSITION;
    string lv__FACING;
    string lv__SPAWNER;
    string lv__INTERCEPTORS;
    string lv__CARGO;
    int lv__CARGODATABASE;
    string lv__CARGOUNITTYPE;

    // Automatic Variable Declarations
    unitgroup auto770D0649_g;
    int auto770D0649_u;
    unit auto770D0649_var;
    int auto0554CC43_ae;
    const int auto0554CC43_ai = 1;
    const int auto45A32634_ae = 9;
    const int auto45A32634_ai = 1;
    unitgroup auto8D6BD505_g;
    int auto8D6BD505_u;
    unit auto8D6BD505_var;

    // Variable Initialization
    lv__TOTALUNITS = "TotalUnits";
    lv__SECTION = ("Bank" + IntToString(lp_bankNumber));
    lv__SECTION_OWNER = (lv__SECTION + ("Owner" + IntToString(lp_owner)));
    lv__UNIT = "Unit";
    lv__POSITION = "Position";
    lv__FACING = "Facing";
    lv__SPAWNER = "Spawner";
    lv__INTERCEPTORS = "Interceptors";
    lv__CARGO = "Cargo";

    // Implementation
    gf_ChangeLocation(BankValueGetAsInt(BankLastCreated(), lv__SECTION, "Location"));
    gf_RemovePlayerUnitsandResetResources(lp_owner);
    auto770D0649_g = UnitGroup(null, lp_owner, gv_spawn_regionCurrent, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto770D0649_u = UnitGroupCount(auto770D0649_g, c_unitCountAll);
    for (;; auto770D0649_u -= 1) {
        auto770D0649_var = UnitGroupUnitFromEnd(auto770D0649_g, auto770D0649_u);
        if (auto770D0649_var == null) { break; }
        gf_RemoveUnitSpecials(auto770D0649_var);
    }
    lv__totalUnits = BankValueGetAsInt(BankLastCreated(), lv__SECTION_OWNER, lv__TOTALUNITS);
    auto0554CC43_ae = lv__totalUnits;
    lv__intA = 0;
    for ( ; ( (auto0554CC43_ai >= 0 && lv__intA <= auto0554CC43_ae) || (auto0554CC43_ai < 0 && lv__intA >= auto0554CC43_ae) ) ; lv__intA += auto0554CC43_ai ) {
        gf_DebugMessage(((StringExternal("Param/Value/2EFEDEBF") + (IntToText(lv__intA) + (StringExternal("Param/Value/0900D031") + IntToText(lv__totalUnits)))) + (StringExternal("Param/Value/DF8F24BB") + StringToText(lv__SECTION_OWNER))));
        lv__UNIT = (lv__UNIT + IntToString(lv__intA));
        lv__POSITION = (lv__POSITION + IntToString(lv__intA));
        lv__FACING = (lv__FACING + IntToString(lv__intA));
        lv__SPAWNER = (lv__SPAWNER + IntToString(lv__intA));
        lv__INTERCEPTORS = (lv__INTERCEPTORS + IntToString(lv__intA));

        BankValueGetAsUnit(BankLastCreated(), lv__SECTION_OWNER, lv__UNIT, lp_owner, BankValueGetAsPoint(BankLastCreated(), lv__SECTION_OWNER, lv__POSITION), BankValueGetAsFixed(BankLastCreated(), lv__SECTION_OWNER, lv__FACING));
        if ((UnitGetType(BankLastRestoredUnit()) != null) && (UnitGetType(BankLastRestoredUnit()) != "") && (BankLastRestoredUnit() != null) && (UnitIsValid(BankLastRestoredUnit()) == true)) {
            UnitSetPosition(BankLastRestoredUnit(), BankValueGetAsPoint(BankLastCreated(), lv__SECTION_OWNER, lv__POSITION), true);
            gf_DebugMessage((StringExternal("Param/Value/25B3FC01") + ((UnitTypeGetName(UnitGetType(BankLastRestoredUnit())) + StringExternal("Param/Value/E85B8757")) + ((StringExternal("Param/Value/E9033725") + IntToText(lv__intA)) + (StringExternal("Param/Value/2229F12B") + IntToText(lp_owner))))));
            if ((UnitAbilityExists(BankLastRestoredUnit(), "CarrierHangar") == true)) {
                UnitMagazineArm(BankLastRestoredUnit(), AbilityCommand("CarrierHangar", 0), BankValueGetAsInt(BankLastCreated(), lv__SECTION_OWNER, lv__INTERCEPTORS));
            }

            if ((UnitGetType(BankLastRestoredUnit()) == "Marine") && (TechTreeUpgradeCount(lp_owner, "ShieldWall", c_techCountCompleteOnly) == 1)) {
                UnitSetPropertyFixed(BankLastRestoredUnit(), c_unitPropLifePercent, 100.0);
            }

            lv__cargo = 1;
            for ( ; ( (auto45A32634_ai >= 0 && lv__cargo <= auto45A32634_ae) || (auto45A32634_ai < 0 && lv__cargo >= auto45A32634_ae) ) ; lv__cargo += auto45A32634_ai ) {
                lv__CARGO = (("Cargo" + IntToString(lv__intA)) + ("Slot" + IntToString(lv__cargo)));
                lv__CARGODATABASE = BankValueGetAsInt(BankLastCreated(), lv__SECTION_OWNER, lv__CARGO);
                lv__CARGOUNITTYPE = gf_UnitDatabaseGetUnitTypebyDatabaseNumber(lv__CARGODATABASE);
                gf_DebugMessage((StringExternal("Param/Value/E149F174") + (StringToText(lv__CARGO) + (StringExternal("Param/Value/CB90B4F3") + IntToText(lv__CARGODATABASE)))));
                if ((lv__CARGOUNITTYPE != null) && (lv__CARGODATABASE != -1)) {
                    gf_DebugMessage((StringExternal("Param/Value/4AF08096") + ((UnitGetName(BankLastRestoredUnit()) + StringExternal("Param/Value/A259FC2C")) + (StringExternal("Param/Value/5E171870") + IntToText(lv__CARGODATABASE)))));
                    UnitCargoCreate(BankLastRestoredUnit(), lv__CARGOUNITTYPE, 1);
                }

            }
            UnitGroupAdd(gv_unitgroupSpawned, BankLastRestoredUnit());
            if ((BankValueGetAsFlag(BankLastCreated(), lv__SECTION_OWNER, lv__SPAWNER) == true)) {
                UnitGroupAdd(gv_unitgroupMASTERS, BankLastRestoredUnit());
            }

            if ((UnitGetType(BankLastRestoredUnit()) == "SpawnPointDummy")) {
                if ((gv_unit_pointSPAWN[lp_owner] != null)) {
                    UnitRemove(gv_unit_pointSPAWN[lp_owner]);
                }

                gv_unit_pointSPAWN[lp_owner] = BankLastRestoredUnit();
            }
            else {
                if ((UnitTypeTestAttribute(UnitGetType(BankLastRestoredUnit()), c_unitAttributeStructure) == false)) {
                    gf_UnitCounterUpdate(1, UnitGetType(BankLastRestoredUnit()), UnitGetOwner(BankLastRestoredUnit()));
                }

                if (((UnitGetOwner(BankLastRestoredUnit()) == 13) || (UnitGetOwner(BankLastRestoredUnit()) == 14))) {
                    gf_ResourceDialogAddUnitType(UnitGetType(BankLastRestoredUnit()), 1, ge_IncrementationType_Increase, UnitGetOwner(BankLastRestoredUnit()));
                }

            }
        }

        if ((lv__breathe == 10)) {
            lv__breathe = 0;
            Wait(0.001, c_timeGame);
        }
        else {
            lv__breathe += 1;
        }
    }
    auto8D6BD505_g = UnitGroup(null, lp_owner, gv_spawn_regionCurrent, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto8D6BD505_u = UnitGroupCount(auto8D6BD505_g, c_unitCountAll);
    for (;; auto8D6BD505_u -= 1) {
        auto8D6BD505_var = UnitGroupUnitFromEnd(auto8D6BD505_g, auto8D6BD505_u);
        if (auto8D6BD505_var == null) { break; }
        gf_SetUnitSpecials(auto8D6BD505_var);
    }
}

void gf_RestoreAllUnitGroups (int lp_bankNumber, int lp_playerNumber) {
    // Variable Declarations
    int lv__intA;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaObjective, StringExternal("Param/Value/1037F7A3"));
    BankLoad("StarBox", lp_playerNumber);
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaObjective, StringExternal("Param/Value/CC7142FD"));
    gf_RemovePlayerUnitsandResetResources(13);
    gf_RemovePlayerUnitsandResetResources(14);
    gf_RemovePlayerUnitsandResetResources(0);
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaObjective, StringExternal("Param/Value/4BFA6E8B"));
    if ((libNtve_gf_DialogItemIsChecked(gv_matrixITEMDialogState[23][c_gameCatalogValidator][ge_Alphanumeric_Alpha], EventPlayer()) == true)) {
        gf_RestoreUnitGroupfromLastOpenedBank(lp_bankNumber, 13);
    }

    UIDisplayMessage(PlayerGroupAll(), c_messageAreaObjective, StringExternal("Param/Value/9DF9091C"));
    if ((libNtve_gf_DialogItemIsChecked(gv_matrixITEMDialogState[24][c_gameCatalogValidator][ge_Alphanumeric_Alpha], EventPlayer()) == true)) {
        gf_RestoreUnitGroupfromLastOpenedBank(lp_bankNumber, 14);
    }

    UIDisplayMessage(PlayerGroupAll(), c_messageAreaObjective, StringExternal("Param/Value/5C60D834"));
    gf_RestoreUnitGroupfromLastOpenedBank(lp_bankNumber, 0);
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaObjective, StringExternal("Param/Value/DF4EC3CD"));
    BankSave(BankLastCreated());
    Wait(0.15, c_timeReal);
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaObjective, StringExternal("Param/Value/BD51BE76"));
}

void gf_ToolsDialogCreate () {
    // Automatic Variable Declarations
    // Implementation
    gf_MatrixCreate(c_gameCatalogTerrainTex, ge_Alphanumeric_Gamma, 60, 60, 4, 1, 1256, 145, c_anchorBottomLeft, ge_MatrixBackground_LeafFrame, ge_MatrixOptions_OnlyforP1);
    gf_MatrixCreateButton(60, 60, 1, 1, c_gameCatalogTerrainTex, ge_Alphanumeric_Gamma, 0, "Assets\\Textures\\btn-ability-kerrigan-twindrones.dds", null, StringExternal("Param/Value/75D90B47"));
    gf_MatrixCreateButton(60, 60, 2, 1, c_gameCatalogTerrainTex, ge_Alphanumeric_Gamma, 0, "Assets\\Textures\\ui-editoricon-terraineditor_3dpoint.dds", StringToText(""), StringExternal("Param/Value/54CD687C"));
    gf_MatrixCreateButton(60, 60, 3, 1, c_gameCatalogTerrainTex, ge_Alphanumeric_Gamma, 0, "EditorData\\Images\\TerrainModule\\Toolbar\\PointsLayer.tga", null, StringExternal("Param/Value/E7AB9397"));
    gf_MatrixCreateButton(60, 60, 4, 1, c_gameCatalogTerrainTex, ge_Alphanumeric_Gamma, 0, "Assets\\Textures\\ui-editoricons-layers_points.dds", StringToText(""), StringExternal("Param/Value/A4C8823E"));
    gf_MatrixCreate(c_gameCatalogTerrainTex, ge_Alphanumeric_Epsilon, 60, 60, 4, 1, 1256, 145, c_anchorBottomLeft, ge_MatrixBackground_LeafFrame, ge_MatrixOptions_HideButtonDialog | ge_MatrixOptions_OnlyforP1);
    gf_MatrixCreateButton(60, 60, 1, 1, c_gameCatalogTerrainTex, ge_Alphanumeric_Epsilon, 0, "Assets\\Textures\\pingnukeliberty.dds", null, StringExternal("Param/Value/8CC06E5F"));
    gf_MatrixCreateButton(60, 60, 2, 1, c_gameCatalogTerrainTex, ge_Alphanumeric_Epsilon, 0, "Assets\\Textures\\btn-ability-terran-heal-color.dds", null, StringExternal("Param/Value/CD10F1CA"));
    gf_MatrixCreateButton(60, 60, 3, 1, c_gameCatalogTerrainTex, ge_Alphanumeric_Epsilon, 0, "Assets\\Textures\\ui_aicommand_build_open_rush.dds", StringToText(""), StringExternal("Param/Value/1DA05515"));
    gf_MatrixCreateButton(60, 60, 4, 1, c_gameCatalogTerrainTex, ge_Alphanumeric_Epsilon, 0, "Assets\\Textures\\ui_aicommand_build_open_timingattack.dds", null, StringExternal("Param/Value/39E17D2E"));
    gf_MatrixCreate(c_gameCatalogTerrainTex, ge_Alphanumeric_Delta, 60, 60, 4, 1, 1256, 80, c_anchorBottomLeft, ge_MatrixBackground_LeafFrame, ge_MatrixOptions_OnlyforP1);
    gf_MatrixCreateButton(60, 60, 1, 1, c_gameCatalogTerrainTex, ge_Alphanumeric_Delta, 0, "Assets\\Textures\\btn-ability-protoss-cloakfield-color.dds", null, StringExternal("Param/Value/D2BC8909"));
    gf_MatrixCreateButton(60, 60, 1, 1, c_gameCatalogTerrainTex, ge_Alphanumeric_Delta, ge_MatrixOptions_HideButtonDialog, "Assets\\Textures\\btn-ability-protoss-psistorm-color.dds", null, StringExternal("Param/Value/DA0B893A"));
    gf_MatrixCreateButton(60, 60, 2, 1, c_gameCatalogTerrainTex, ge_Alphanumeric_Delta, 0, "Assets\\Textures\\ui_charbaricons_terran_allies.dds", StringToText(""), StringExternal("Param/Value/4E7B3D57"));
    gf_MatrixCreateButton(60, 60, 3, 1, c_gameCatalogTerrainTex, ge_Alphanumeric_Delta, 0, "Assets\\Textures\\ui_charbaricons_zerg_allies.dds", null, StringExternal("Param/Value/0369A374"));
    gf_MatrixCreateButton(60, 60, 4, 1, c_gameCatalogTerrainTex, ge_Alphanumeric_Delta, 0, "Assets\\Textures\\ui_charbaricons_protoss_allies.dds", StringToText(""), StringExternal("Param/Value/3D137C5C"));
    gf_MatrixCreate(c_gameCatalogTerrainTex, ge_Alphanumeric_Beta, 40, 40, 5, 1, 0, 300, c_anchorBottomLeft, ge_MatrixBackground_LeafFrame, ge_MatrixOptions_OnlyforP1);
    gf_MatrixCreateButton(40, 40, 1, 1, c_gameCatalogTerrainTex, ge_Alphanumeric_Beta, 0, "EditorData\\Images\\BrushTerrainHide.tga", StringToText(""), StringToText(""));
    gf_MatrixCreateButton(123, 40, 1, 1, c_gameCatalogTerrainTex, ge_Alphanumeric_Beta, ge_MatrixOptions_OnlyforP1 | ge_MatrixOptions_Centered, "Assets\\Textures\\075.dds", StringExternal("Param/Value/5A2368C6"), StringExternal("Param/Value/B6503BDF"));
    gf_MatrixCreateButton(40, 40, 5, 1, c_gameCatalogTerrainTex, ge_Alphanumeric_Beta, 0, "EditorData\\Images\\BrushTerrainShow.tga", StringToText(""), StringToText(""));
    gf_MatrixCreate(c_gameCatalogTerrainTex, ge_Alphanumeric_Alpha, 60, 60, 4, 1, 1256, 15, c_anchorBottomLeft, ge_MatrixBackground_LeafFrame, ge_MatrixOptions_OnlyforP1);
    gf_MatrixCreateButton(60, 60, 1, 1, c_gameCatalogTerrainTex, ge_Alphanumeric_Alpha, 0, "EditorData\\Images\\TerrainModule\\Palette\\Creep\\DisallowCreep.tga", null, StringExternal("Param/Value/783F5F83"));
    gf_MatrixCreateButton(60, 60, 2, 1, c_gameCatalogTerrainTex, ge_Alphanumeric_Alpha, 0, "Assets\\Textures\\decalnumber1_diffuse.dds", null, StringExternal("Param/Value/1F3468B1"));
    gf_MatrixCreateButton(60, 60, 3, 1, c_gameCatalogTerrainTex, ge_Alphanumeric_Alpha, 0, "Assets\\Textures\\075.dds", StringExternal("Param/Value/D9B02D94"), StringExternal("Param/Value/CA11AC35"));
    gf_MatrixCreateButton(60, 60, 4, 1, c_gameCatalogTerrainTex, ge_Alphanumeric_Alpha, 0, "Assets\\Textures\\075.dds", StringExternal("Param/Value/3414C0F1"), StringExternal("Param/Value/B3DD3B95"));
}

void gf_ToolsDialogTrigger () {
    // Variable Declarations
    unit lv__UNIT;

    // Automatic Variable Declarations
    unitgroup auto7CDE8EAE_g;
    int auto7CDE8EAE_u;
    unit auto7CDE8EAE_var;
    unitgroup auto25E36746_g;
    int auto25E36746_u;
    unit auto25E36746_var;
    unitgroup autoDF6DFA71_g;
    int autoDF6DFA71_u;
    unit autoDF6DFA71_var;
    unitgroup auto77F18988_g;
    int auto77F18988_u;
    unit auto77F18988_var;
    unitgroup autoD337E9F4_g;
    int autoD337E9F4_u;
    unit autoD337E9F4_var;
    unitgroup autoE7681A86_g;
    int autoE7681A86_u;

    // Variable Initialization

    // Implementation
    if ((EventDialogControl() == gv_matrixITEMDialogState[0][c_gameCatalogTerrainTex][ge_Alphanumeric_Gamma])) {
        auto7CDE8EAE_g = UnitGroupSelected(EventPlayer());
        auto7CDE8EAE_u = UnitGroupCount(auto7CDE8EAE_g, c_unitCountAll);
        for (;; auto7CDE8EAE_u -= 1) {
            auto7CDE8EAE_var = UnitGroupUnitFromEnd(auto7CDE8EAE_g, auto7CDE8EAE_u);
            if (auto7CDE8EAE_var == null) { break; }
            gf_MirrorUnitwithPosition(auto7CDE8EAE_var);
        }
    }
    else if ((EventDialogControl() == gv_matrixITEMDialogState[1][c_gameCatalogTerrainTex][ge_Alphanumeric_Gamma])) {
        gf_ResetSpawnPoints();
    }
    else if ((EventDialogControl() == gv_matrixITEMDialogState[2][c_gameCatalogTerrainTex][ge_Alphanumeric_Gamma])) {
        if ((gv_pointingSPAWN == -1)) {
            gv_pointingSPAWN = 13;
            UISetDragSelectEnabled(PlayerGroupSingle(EventPlayer()), false);
            UISetSelectionTypeEnabled(PlayerGroupSingle(EventPlayer()), c_localSelectionTypeUnknown, false);
        }
        else {
            gv_pointingSPAWN = -1;
            UISetDragSelectEnabled(PlayerGroupSingle(EventPlayer()), true);
            UISetSelectionTypeEnabled(PlayerGroupSingle(EventPlayer()), c_localSelectionTypeUnknown, true);
        }
    }
    else if ((EventDialogControl() == gv_matrixITEMDialogState[3][c_gameCatalogTerrainTex][ge_Alphanumeric_Gamma])) {
        if ((gv_pointingSPAWN == -1)) {
            gv_pointingSPAWN = 14;
            UISetSelectionTypeEnabled(PlayerGroupSingle(EventPlayer()), c_localSelectionTypeUnknown, false);
            UISetDragSelectEnabled(PlayerGroupSingle(EventPlayer()), false);
        }
        else {
            gv_pointingSPAWN = -1;
            UISetDragSelectEnabled(PlayerGroupSingle(EventPlayer()), true);
            UISetSelectionTypeEnabled(PlayerGroupSingle(EventPlayer()), c_localSelectionTypeUnknown, true);
        }
    }
    if ((EventDialogControl() == gv_matrixITEMDialogState[2][c_gameCatalogTerrainTex][ge_Alphanumeric_Beta])) {
        if ((gv_tools_spawnSelected == gf_CountofLocations())) {
            gv_tools_spawnSelected = 0;
            libNtve_gf_SetDialogItemText(gv_matrixITEMDialogState[1][c_gameCatalogTerrainTex][ge_Alphanumeric_Beta], (StringExternal("Param/Value/3783D91A") + StringToText(gv_spawn_name[0])), PlayerGroupAll());
        }
        else {
            gv_tools_spawnSelected = (gv_tools_spawnSelected + 1);
            libNtve_gf_SetDialogItemText(gv_matrixITEMDialogState[1][c_gameCatalogTerrainTex][ge_Alphanumeric_Beta], (StringExternal("Param/Value/C19C86AE") + StringToText(gv_spawn_name[gv_tools_spawnSelected])), PlayerGroupAll());
        }
    }
    else {
        if ((EventDialogControl() == gv_matrixITEMDialogState[0][c_gameCatalogTerrainTex][ge_Alphanumeric_Beta])) {
            if ((gv_tools_spawnSelected == 0)) {
                gv_tools_spawnSelected = gf_CountofLocations();
                libNtve_gf_SetDialogItemText(gv_matrixITEMDialogState[1][c_gameCatalogTerrainTex][ge_Alphanumeric_Beta], (StringExternal("Param/Value/E4791F90") + StringToText(gv_spawn_name[gf_CountofLocations()])), PlayerGroupAll());
            }
            else {
                gv_tools_spawnSelected = (gv_tools_spawnSelected - 1);
                libNtve_gf_SetDialogItemText(gv_matrixITEMDialogState[1][c_gameCatalogTerrainTex][ge_Alphanumeric_Beta], (StringExternal("Param/Value/20F6AD70") + StringToText(gv_spawn_name[gv_tools_spawnSelected])), PlayerGroupAll());
            }
        }
        else {
            if ((EventDialogControl() == gv_matrixITEMDialogState[1][c_gameCatalogTerrainTex][ge_Alphanumeric_Beta])) {
                gf_RemoveStartingUnitsforCurrentLocation();
                gf_ChangeLocation(gv_tools_spawnSelected);
                gf_RemoveStartingUnitsforCurrentLocation();
                UnitSetPosition(gv_unit_pointSPAWN[13], gv_playerSPAWN[13], false);
                UnitSetPosition(gv_unit_pointSPAWN[14], gv_playerSPAWN[14], false);
                gf_AddStartingUnitsforCurrentLocation();
            }

        }
    }
    if ((EventDialogControl() == gv_matrixITEMDialogState[0][c_gameCatalogTerrainTex][ge_Alphanumeric_Delta])) {
        gf_RemoveUnitsRequest(UnitGroupSelected(EventPlayer()), ge_RemoveUnitRequestOptions_ResourcesCurrent | ge_RemoveUnitRequestOptions_Count | ge_RemoveUnitRequestOptions_CancelMorph);
    }
    else if ((EventDialogControl() == gv_matrixITEMDialogState[1][c_gameCatalogTerrainTex][ge_Alphanumeric_Delta])) {
        auto25E36746_g = UnitGroupSelected(EventPlayer());
        auto25E36746_u = UnitGroupCount(auto25E36746_g, c_unitCountAll);
        for (;; auto25E36746_u -= 1) {
            auto25E36746_var = UnitGroupUnitFromEnd(auto25E36746_g, auto25E36746_u);
            if (auto25E36746_var == null) { break; }
            if ((UnitGroupHasUnit(gv_unitgroupMASTERS, auto25E36746_var) == true)) {
                libNtve_gf_UIErrorMessage(PlayerGroupSingle(EventPlayer()), (StringExternal("Param/Value/2E0802B0") + UnitTypeGetName(UnitGetType(auto25E36746_var))), SoundLink("UI_InfoPanelUnitSelect", -1));
            }
            else {
                UnitKill(auto25E36746_var);
            }
        }
    }
    else if ((EventDialogControl() == gv_matrixITEMDialogState[2][c_gameCatalogTerrainTex][ge_Alphanumeric_Delta])) {
        autoDF6DFA71_g = UnitGroupSelected(EventPlayer());
        autoDF6DFA71_u = UnitGroupCount(autoDF6DFA71_g, c_unitCountAll);
        for (;; autoDF6DFA71_u -= 1) {
            autoDF6DFA71_var = UnitGroupUnitFromEnd(autoDF6DFA71_g, autoDF6DFA71_u);
            if (autoDF6DFA71_var == null) { break; }
            UnitSelect(autoDF6DFA71_var, EventPlayer(), false);
        }
        UnitGroupSelect(UnitGroup(null, 13, gv_spawn_regionCurrent, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), EventPlayer(), true);
        UnitGroupSelect(UnitGroup(null, 14, gv_spawn_regionCurrent, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), EventPlayer(), true);
    }
    else if ((EventDialogControl() == gv_matrixITEMDialogState[3][c_gameCatalogTerrainTex][ge_Alphanumeric_Delta])) {
        auto77F18988_g = UnitGroupSelected(EventPlayer());
        auto77F18988_u = UnitGroupCount(auto77F18988_g, c_unitCountAll);
        for (;; auto77F18988_u -= 1) {
            auto77F18988_var = UnitGroupUnitFromEnd(auto77F18988_g, auto77F18988_u);
            if (auto77F18988_var == null) { break; }
            UnitSelect(auto77F18988_var, EventPlayer(), false);
        }
        UnitGroupSelect(UnitGroup(null, 13, gv_spawn_regionCurrent, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), EventPlayer(), true);
    }
    else if ((EventDialogControl() == gv_matrixITEMDialogState[4][c_gameCatalogTerrainTex][ge_Alphanumeric_Delta])) {
        autoD337E9F4_g = UnitGroupSelected(EventPlayer());
        autoD337E9F4_u = UnitGroupCount(autoD337E9F4_g, c_unitCountAll);
        for (;; autoD337E9F4_u -= 1) {
            autoD337E9F4_var = UnitGroupUnitFromEnd(autoD337E9F4_g, autoD337E9F4_u);
            if (autoD337E9F4_var == null) { break; }
            UnitSelect(autoD337E9F4_var, EventPlayer(), false);
        }
        UnitGroupSelect(UnitGroup(null, 14, gv_spawn_regionCurrent, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), EventPlayer(), true);
    }
    if ((EventDialogControl() == gv_matrixITEMDialogState[0][c_gameCatalogTerrainTex][ge_Alphanumeric_Epsilon])) {
        if ((gv_cREEPING == false) && (gv_pointingSPAWN == -1)) {
            if ((gv_nUKING == true)) {
                gf_StopNuking();
            }
            else {
                gv_nUKING = true;
                UISetDragSelectEnabled(PlayerGroupSingle(1), false);
                UISetSelectionTypeEnabled(PlayerGroupSingle(1), c_localSelectionTypeUnknown, false);
                libNtve_gf_CreateUnitsWithDefaultFacing(1, "TacticalStrikeDummy", 0, 0, gv_mousePosition[EventPlayer()]);
                gv_cursorUnit = UnitLastCreated();
            }
        }

    }
    else if ((EventDialogControl() == gv_matrixITEMDialogState[1][c_gameCatalogTerrainTex][ge_Alphanumeric_Epsilon])) {
        autoE7681A86_g = UnitGroupSelected(EventPlayer());
        autoE7681A86_u = UnitGroupCount(autoE7681A86_g, c_unitCountAll);
        for (;; autoE7681A86_u -= 1) {
            lv__UNIT = UnitGroupUnitFromEnd(autoE7681A86_g, autoE7681A86_u);
            if (lv__UNIT == null) { break; }
            if ((UnitGetOwner(lv__UNIT) == 1)) {
            }
            else {
                UnitSetPropertyFixed(lv__UNIT, c_unitPropLifePercent, 100.0);
                UnitSetPropertyFixed(lv__UNIT, c_unitPropShieldsPercent, 100.0);
                UnitSetPropertyFixed(lv__UNIT, c_unitPropEnergyPercent, 100.0);
            }
        }
    }
    else if ((EventDialogControl() == gv_matrixITEMDialogState[2][c_gameCatalogTerrainTex][ge_Alphanumeric_Epsilon])) {
        UnitGroupIssueOrder(UnitGroup(null, 13, gv_spawn_regionCurrent, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), OrderTargetingPoint(AbilityCommand("attack", 0), gv_playerSPAWN[14]), c_orderQueueReplace);
        UnitGroupIssueOrder(UnitGroup(null, 14, gv_spawn_regionCurrent, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), OrderTargetingPoint(AbilityCommand("attack", 0), gv_playerSPAWN[13]), c_orderQueueReplace);
    }
    else if ((EventDialogControl() == gv_matrixITEMDialogState[3][c_gameCatalogTerrainTex][ge_Alphanumeric_Epsilon])) {
        UnitGroupIssueOrder(UnitGroupFilter(null, 13, UnitGroupSelected(EventPlayer()), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), OrderTargetingPoint(AbilityCommand("attack", 0), gv_playerSPAWN[14]), c_orderQueueReplace);
        UnitGroupIssueOrder(UnitGroupFilter(null, 14, UnitGroupSelected(EventPlayer()), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), OrderTargetingPoint(AbilityCommand("attack", 0), gv_playerSPAWN[13]), c_orderQueueReplace);
    }
    if ((EventDialogControl() == gv_matrixITEMDialogState[0][c_gameCatalogTerrainTex][ge_Alphanumeric_Alpha])) {
        if ((gv_nUKING == false) && (gv_pointingSPAWN == -1)) {
            if ((gv_cREEPING == true)) {
                if ((gv_creepREMOVE == false)) {
                    gv_creepREMOVE = true;
                    libNtve_gf_SetDialogItemImage(gv_matrixITEMimageDialogState[0][c_gameCatalogTerrainTex][ge_Alphanumeric_Alpha], "EditorData\\Images\\TerrainModule\\Palette\\Creep\\RemoveCreep.tga", PlayerGroupAll());
                }
                else {
                    gf_StopCreeping();
                }
            }
            else {
                UISetDragSelectEnabled(PlayerGroupSingle(1), false);
                UISetSelectionTypeEnabled(PlayerGroupSingle(1), c_localSelectionTypeUnknown, false);
                gv_cREEPING = true;
                libNtve_gf_SetDialogItemImage(gv_matrixITEMimageDialogState[0][c_gameCatalogTerrainTex][ge_Alphanumeric_Alpha], "EditorData\\Images\\TerrainModule\\Palette\\Creep\\AddCreep.tga", PlayerGroupAll());
                UnitRemove(gv_cursorUnit);
                libNtve_gf_CreateUnitsWithDefaultFacing(1, "CreepPlacementDummy", 0, 0, gv_mousePosition[1]);
                gv_cursorUnit = UnitLastCreated();
                libNtve_gf_SetDialogItemDesaturated(gv_matrixITEMDialogState[1][c_gameCatalogTerrainTex][ge_Alphanumeric_Alpha], false, PlayerGroupAll());
                libNtve_gf_SetDialogItemAcceptMouse(gv_matrixITEMDialogState[1][c_gameCatalogTerrainTex][ge_Alphanumeric_Alpha], true, PlayerGroupAll());
                DialogControlFadeTransparency(gv_matrixITEMDialogState[1][c_gameCatalogTerrainTex][ge_Alphanumeric_Alpha], PlayerGroupAll(), 0.2, 0.0);
                libNtve_gf_SetDialogItemDesaturated(gv_matrixITEMimageDialogState[1][c_gameCatalogTerrainTex][ge_Alphanumeric_Alpha], false, PlayerGroupAll());
                DialogControlFadeTransparency(gv_matrixITEMimageDialogState[1][c_gameCatalogTerrainTex][ge_Alphanumeric_Alpha], PlayerGroupAll(), 0.2, 0.0);
                if (((libNtve_gf_DialogItemImage(gv_matrixITEMimageDialogState[1][c_gameCatalogTerrainTex][ge_Alphanumeric_Alpha], 1)) == "Assets\\Textures\\decalnumber1_diffuse.dds")) {
                    UnitSetScale(gv_cursorUnit, 125.0, 125.0, 125.0);
                }
                else {
                    if (((libNtve_gf_DialogItemImage(gv_matrixITEMimageDialogState[1][c_gameCatalogTerrainTex][ge_Alphanumeric_Alpha], 1)) == "Assets\\Textures\\decalnumber2_diffuse.dds")) {
                        UnitSetScale(gv_cursorUnit, 200.0, 200.0, 200.0);
                    }
                    else {
                        if (((libNtve_gf_DialogItemImage(gv_matrixITEMimageDialogState[1][c_gameCatalogTerrainTex][ge_Alphanumeric_Alpha], 1)) == "Assets\\Textures\\decalnumber3_diffuse.dds")) {
                            UnitSetScale(gv_cursorUnit, 350.0, 350.0, 350.0);
                        }

                    }
                }
            }
        }

    }
    else {
        if ((EventDialogControl() == gv_matrixITEMDialogState[1][c_gameCatalogTerrainTex][ge_Alphanumeric_Alpha])) {
            if (((libNtve_gf_DialogItemImage(gv_matrixITEMimageDialogState[1][c_gameCatalogTerrainTex][ge_Alphanumeric_Alpha], 1)) == "Assets\\Textures\\decalnumber1_diffuse.dds")) {
                libNtve_gf_SetDialogItemImage(gv_matrixITEMimageDialogState[1][c_gameCatalogTerrainTex][ge_Alphanumeric_Alpha], "Assets\\Textures\\decalnumber2_diffuse.dds", PlayerGroupAll());
                UnitSetScale(gv_cursorUnit, 200.0, 200.0, 200.0);
                gv_creepSIZE = 1.0;
            }
            else {
                if (((libNtve_gf_DialogItemImage(gv_matrixITEMimageDialogState[1][c_gameCatalogTerrainTex][ge_Alphanumeric_Alpha], 1)) == "Assets\\Textures\\decalnumber2_diffuse.dds")) {
                    libNtve_gf_SetDialogItemImage(gv_matrixITEMimageDialogState[1][c_gameCatalogTerrainTex][ge_Alphanumeric_Alpha], "Assets\\Textures\\decalnumber3_diffuse.dds", PlayerGroupAll());
                    UnitSetScale(gv_cursorUnit, 350.0, 350.0, 350.0);
                    gv_creepSIZE = 3.0;
                }
                else {
                    if (((libNtve_gf_DialogItemImage(gv_matrixITEMimageDialogState[1][c_gameCatalogTerrainTex][ge_Alphanumeric_Alpha], 1)) == "Assets\\Textures\\decalnumber3_diffuse.dds")) {
                        libNtve_gf_SetDialogItemImage(gv_matrixITEMimageDialogState[1][c_gameCatalogTerrainTex][ge_Alphanumeric_Alpha], "Assets\\Textures\\decalnumber1_diffuse.dds", PlayerGroupAll());
                        UnitSetScale(gv_cursorUnit, 125.0, 125.0, 125.0);
                        gv_creepSIZE = 0.1;
                    }

                }
            }
        }
        else {
            if ((EventDialogControl() == gv_matrixITEMDialogState[2][c_gameCatalogTerrainTex][ge_Alphanumeric_Alpha])) {
                CreepModify(RegionGetCenter(gv_spawn_regionCurrent), 50.0, true, true);
            }
            else {
                if ((EventDialogControl() == gv_matrixITEMDialogState[3][c_gameCatalogTerrainTex][ge_Alphanumeric_Alpha])) {
                    CreepModify(RegionGetCenter(gv_spawn_regionCurrent), 50.0, false, true);
                }

            }
        }
    }
}

int gf_CountofLocations () {
    // Variable Declarations
    int lv__intA;

    // Automatic Variable Declarations
    const int autoDB123305_ae = 10;
    const int autoDB123305_ai = 1;

    // Variable Initialization

    // Implementation
    lv__intA = 0;
    for ( ; ( (autoDB123305_ai >= 0 && lv__intA <= autoDB123305_ae) || (autoDB123305_ai < 0 && lv__intA >= autoDB123305_ae) ) ; lv__intA += autoDB123305_ai ) {
        if ((gv_spawn_name[lv__intA] == "")) {
            return (lv__intA - 1);
        }

    }
    return lv__intA;
}

void gf_AddStartingUnitsforCurrentLocation () {
    // Variable Declarations
    int lv__intA;

    // Automatic Variable Declarations
    const int auto6592E917_ae = 80;
    const int auto6592E917_ai = 1;

    // Variable Initialization

    // Implementation
    lv__intA = 0;
    for ( ; ( (auto6592E917_ai >= 0 && lv__intA <= auto6592E917_ae) || (auto6592E917_ai < 0 && lv__intA >= auto6592E917_ae) ) ; lv__intA += auto6592E917_ai ) {
        if ((gv_tools_spawnStartingUnit_Neutral[gv_spawn_numberCurrent][lv__intA].lv_unitType != null)) {
            UnitCreate(1, gv_tools_spawnStartingUnit_Neutral[gv_spawn_numberCurrent][lv__intA].lv_unitType, 0, 0, gv_tools_spawnStartingUnit_Neutral[gv_spawn_numberCurrent][lv__intA].lv_unitPosition, gv_tools_spawnStartingUnit_Neutral[gv_spawn_numberCurrent][lv__intA].lv_unitFacing);
            UnitGroupAdd(gv_tools_spawnStartingGroup, UnitLastCreated());
        }
        else {
            break;
        }
    }
}

void gf_RemoveStartingUnitsforCurrentLocation () {
    // Variable Declarations
    int lv__intA;

    // Automatic Variable Declarations
    unitgroup autoD4689EA3_g;
    int autoD4689EA3_u;
    unit autoD4689EA3_var;

    // Variable Initialization

    // Implementation
    autoD4689EA3_g = UnitGroupFilterPlayer(gv_tools_spawnStartingGroup, 0, 0);
    autoD4689EA3_u = UnitGroupCount(autoD4689EA3_g, c_unitCountAll);
    for (;; autoD4689EA3_u -= 1) {
        autoD4689EA3_var = UnitGroupUnitFromEnd(autoD4689EA3_g, autoD4689EA3_u);
        if (autoD4689EA3_var == null) { break; }
        gf_RemoveUnitRequest(autoD4689EA3_var, ge_RemoveUnitRequestOptions_CancelMorph);
    }
}

void gf_MirrorUnitwithPosition (unit lp_unittoMirror) {
    // Variable Declarations
    point lv__point;
    int lv__owner;
    int lv__oppositePlayer;
    point lv__position;

    // Automatic Variable Declarations
    // Variable Initialization
    lv__owner = UnitGetOwner(lp_unittoMirror);
    lv__oppositePlayer = gf_OppositePlayer(UnitGetOwner(lp_unittoMirror));
    lv__position = UnitGetPosition(lp_unittoMirror);

    // Implementation
    if (((UnitGetOwner(lp_unittoMirror) == 13) || (UnitGetOwner(lp_unittoMirror) == 14))) {
        lv__point = MidPoint(gv_playerSPAWN[13], gv_playerSPAWN[14]);
        UnitCreate(1, UnitGetType(lp_unittoMirror), c_unitCreateIgnorePlacement, lv__oppositePlayer, PointReflect(lv__position, lv__point, 180.0), (UnitGetFacing(lp_unittoMirror) * -1.0));
        UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLife, UnitGetPropertyFixed(lp_unittoMirror, c_unitPropLife, c_unitPropCurrent));
        UnitSetPropertyFixed(UnitLastCreated(), c_unitPropEnergy, UnitGetPropertyFixed(lp_unittoMirror, c_unitPropEnergy, c_unitPropCurrent));
        UnitSetPropertyFixed(UnitLastCreated(), c_unitPropShields, UnitGetPropertyFixed(lp_unittoMirror, c_unitPropShields, c_unitPropCurrent));
        UnitSetPropertyFixed(UnitLastCreated(), c_unitPropKills, UnitGetPropertyFixed(lp_unittoMirror, c_unitPropKills, c_unitPropCurrent));
        UnitSetPropertyFixed(UnitLastCreated(), c_unitPropMovementSpeed, UnitGetPropertyFixed(lp_unittoMirror, c_unitPropMovementSpeed, c_unitPropNormal));
        UnitSetPropertyFixed(UnitLastCreated(), c_unitPropCarriedMinerals, UnitGetPropertyFixed(lp_unittoMirror, c_unitPropCarriedMinerals, c_unitPropCurrent));
        UnitSetPropertyFixed(UnitLastCreated(), c_unitPropCarriedVespene, UnitGetPropertyFixed(lp_unittoMirror, c_unitPropCarriedVespene, c_unitPropCurrent));
        gf_SetUnitSpecials(UnitLastCreated());
        UnitGroupAdd(gv_unitgroupSpawned, UnitLastCreated());
    }

}

void gf_ChangeLocation (int lp_location) {
    // Automatic Variable Declarations
    unitgroup autoFE5DCC4D_g;
    int autoFE5DCC4D_u;
    unit autoFE5DCC4D_var;
    unitgroup autoF518A1C5_g;
    int autoF518A1C5_u;
    unit autoF518A1C5_var;
    unitgroup autoFFB47B91_g;
    int autoFFB47B91_u;
    unit autoFFB47B91_var;
    unitgroup autoB5C75093_g;
    int autoB5C75093_u;
    unit autoB5C75093_var;

    // Implementation
    if ((gv_spawn_numberCurrent != lp_location)) {
        gv_spawn_numberCurrent = lp_location;
        gv_spawn_regionCurrent = gv_spawn_region[lp_location];
        gv_playerSPAWN[13] = gv_spawn_pointAdjusted[lp_location][13];
        gv_playerSPAWN[14] = gv_spawn_pointAdjusted[lp_location][14];
        autoFE5DCC4D_g = UnitGroup(null, c_playerAny, gv_spawn_regionCurrent, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        autoFE5DCC4D_u = UnitGroupCount(autoFE5DCC4D_g, c_unitCountAll);
        for (;; autoFE5DCC4D_u -= 1) {
            autoFE5DCC4D_var = UnitGroupUnitFromEnd(autoFE5DCC4D_g, autoFE5DCC4D_u);
            if (autoFE5DCC4D_var == null) { break; }
            gf_RemoveUnitSpecials(autoFE5DCC4D_var);
        }
        autoF518A1C5_g = UnitGroup(null, 13, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        autoF518A1C5_u = UnitGroupCount(autoF518A1C5_g, c_unitCountAll);
        for (;; autoF518A1C5_u -= 1) {
            autoF518A1C5_var = UnitGroupUnitFromEnd(autoF518A1C5_g, autoF518A1C5_u);
            if (autoF518A1C5_var == null) { break; }
            UnitSetPosition(autoF518A1C5_var, gv_playerSPAWN[13], false);
        }
        autoFFB47B91_g = UnitGroup(null, 14, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        autoFFB47B91_u = UnitGroupCount(autoFFB47B91_g, c_unitCountAll);
        for (;; autoFFB47B91_u -= 1) {
            autoFFB47B91_var = UnitGroupUnitFromEnd(autoFFB47B91_g, autoFFB47B91_u);
            if (autoFFB47B91_var == null) { break; }
            UnitSetPosition(autoFFB47B91_var, gv_playerSPAWN[14], false);
        }
        UnitSetPosition(gv_wrench, RegionGetCenter(gv_spawn_regionCurrent), false);
        autoB5C75093_g = UnitGroup(null, c_playerAny, gv_spawn_regionCurrent, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        autoB5C75093_u = UnitGroupCount(autoB5C75093_g, c_unitCountAll);
        for (;; autoB5C75093_u -= 1) {
            autoB5C75093_var = UnitGroupUnitFromEnd(autoB5C75093_g, autoB5C75093_u);
            if (autoB5C75093_var == null) { break; }
            gf_SetUnitSpecials(autoB5C75093_var);
        }
        gf_RefreshCamera();
    }

}

void gf_RefreshCamera () {
    // Automatic Variable Declarations
    playergroup autoB1DAD67B_g;
    int autoB1DAD67B_var;

    // Implementation
    autoB1DAD67B_g = PlayerGroupAll();
    autoB1DAD67B_var = -1;
    while (true) {
        autoB1DAD67B_var = PlayerGroupNextPlayer(autoB1DAD67B_g, autoB1DAD67B_var);
        if (autoB1DAD67B_var < 0) { break; }
        VisRevealerDestroy(gv_locationRevealer);
        VisRevealerCreate(autoB1DAD67B_var, gv_spawn_regionCurrent);
        gv_locationRevealer = VisRevealerLastCreated();
        RegionPlayableMapSet(gv_spawn_regionCurrent);
        CameraSetBounds(PlayerGroupSingle(autoB1DAD67B_var), gv_spawn_regionCurrent, true);
        CameraPan(autoB1DAD67B_var, RegionGetCenter(gv_spawn_regionCurrent), 0.0, -1, 10, false);
    }
}

void gf_PauseCreeping () {
    // Automatic Variable Declarations
    // Implementation
    if ((gv_cREEPING == true)) {
        SoundStop(gv_creepSOUND, false);
        gv_creepGENERATE = false;
    }

}

void gf_StopNuking () {
    // Automatic Variable Declarations
    // Implementation
    if ((gv_nUKING == true)) {
        gv_nUKING = false;
        UISetDragSelectEnabled(PlayerGroupSingle(1), true);
        UISetSelectionTypeEnabled(PlayerGroupSingle(1), c_localSelectionTypeUnknown, true);
        UnitRemove(gv_cursorUnit);
    }

}

void gf_StopCreeping () {
    // Automatic Variable Declarations
    // Implementation
    if ((gv_cREEPING == true)) {
        SoundStop(gv_creepSOUND, false);
        gv_creepGENERATE = false;
        gv_cREEPING = false;
        gv_creepREMOVE = false;
        UISetDragSelectEnabled(PlayerGroupSingle(1), true);
        UISetSelectionTypeEnabled(PlayerGroupSingle(1), c_localSelectionTypeUnknown, true);
        libNtve_gf_SetDialogItemImage(gv_matrixITEMimageDialogState[0][c_gameCatalogTerrainTex][ge_Alphanumeric_Alpha], "EditorData\\Images\\TerrainModule\\Palette\\Creep\\DisallowCreep.tga", PlayerGroupAll());
        UnitRemove(gv_cursorUnit);
        libNtve_gf_SetDialogItemDesaturated(gv_matrixITEMDialogState[1][c_gameCatalogTerrainTex][ge_Alphanumeric_Alpha], true, PlayerGroupAll());
        libNtve_gf_SetDialogItemAcceptMouse(gv_matrixITEMDialogState[1][c_gameCatalogTerrainTex][ge_Alphanumeric_Alpha], false, PlayerGroupAll());
        DialogControlFadeTransparency(gv_matrixITEMDialogState[1][c_gameCatalogTerrainTex][ge_Alphanumeric_Alpha], PlayerGroupAll(), 0.2, 60.0);
        libNtve_gf_SetDialogItemDesaturated(gv_matrixITEMimageDialogState[1][c_gameCatalogTerrainTex][ge_Alphanumeric_Alpha], true, PlayerGroupAll());
        DialogControlFadeTransparency(gv_matrixITEMimageDialogState[1][c_gameCatalogTerrainTex][ge_Alphanumeric_Alpha], PlayerGroupAll(), 0.2, 60.0);
    }

}

void gf_StopSpawnPointing () {
    // Automatic Variable Declarations
    // Implementation
    if ((gv_pointingSPAWN > -1)) {
        UnitSetPosition(gv_unit_pointSPAWN[gv_pointingSPAWN], gv_playerSPAWN[gv_pointingSPAWN], false);
        gv_pointingSPAWN = -1;
        UISetDragSelectEnabled(PlayerGroupSingle(EventPlayer()), true);
        UISetSelectionTypeEnabled(PlayerGroupSingle(EventPlayer()), c_localSelectionTypeUnknown, true);
        SoundPlay(SoundLink("Oracle_RevelationCast", -1), PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
        libNtve_gf_CreateActorAtPoint("FeedbackImpact", gv_mousePosition[EventPlayer()]);
        Wait(1.0, c_timeGame);
        libNtve_gf_KillModel(libNtve_gf_ActorLastCreated());
    }

}

void gf_SetSpawnPoint () {
    // Automatic Variable Declarations
    // Implementation
    if ((gv_pointingSPAWN > -1)) {
        UnitSetPosition(gv_unit_pointSPAWN[gv_pointingSPAWN], gv_mousePosition[EventPlayer()], false);
        PointSet(gv_playerSPAWN[gv_pointingSPAWN], gv_mousePosition[EventPlayer()]);
        gv_pointingSPAWN = -1;
        UISetDragSelectEnabled(PlayerGroupSingle(EventPlayer()), true);
        UISetSelectionTypeEnabled(PlayerGroupSingle(EventPlayer()), c_localSelectionTypeUnknown, true);
        SoundPlay(SoundLink("Oracle_RevelationCast", -1), PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
        libNtve_gf_CreateActorAtPoint("FeedbackImpact", gv_mousePosition[EventPlayer()]);
        Wait(1.0, c_timeGame);
        libNtve_gf_KillModel(libNtve_gf_ActorLastCreated());
    }

}

void gf_ResetSpawnPoints () {
    // Automatic Variable Declarations
    // Implementation
    PointSet(gv_playerSPAWN[13], gv_spawn_pointDefault[gv_spawn_numberCurrent][13]);
    PointSet(gv_playerSPAWN[14], gv_spawn_pointDefault[gv_spawn_numberCurrent][14]);
    UnitSetPosition(gv_unit_pointSPAWN[13], gv_spawn_pointDefault[gv_spawn_numberCurrent][13], false);
    UnitSetPosition(gv_unit_pointSPAWN[14], gv_spawn_pointDefault[gv_spawn_numberCurrent][14], false);
    if ((gv_pointingSPAWN > -1)) {
        gv_pointingSPAWN = -1;
        UISetDragSelectEnabled(PlayerGroupSingle(EventPlayer()), true);
        UISetSelectionTypeEnabled(PlayerGroupSingle(EventPlayer()), c_localSelectionTypeUnknown, true);
        SoundPlay(SoundLink("Oracle_RevelationCast", -1), PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
        libNtve_gf_CreateActorAtPoint("FeedbackImpact", gv_mousePosition[EventPlayer()]);
        Wait(1.0, c_timeGame);
        libNtve_gf_KillModel(libNtve_gf_ActorLastCreated());
    }

}

void gf_SetNuke () {
    // Automatic Variable Declarations
    // Implementation
    if ((gv_nUKING == true)) {
        PlayerCreateEffectPoint(15, "NukeDamage", gv_mousePosition[EventPlayer()]);
    }

}

void gf_SetCreep () {
    // Automatic Variable Declarations
    // Implementation
    if ((gv_cREEPING == true)) {
        TriggerEnable(gt_Every005secondsofRealTime, true);
        SoundPlay(SoundLink("Overlord_GenerateCreep", -1), PlayerGroupAll(), 100.0, 0.0);
        gv_creepSOUND = SoundLastPlayed();
        gv_creepGENERATE = true;
    }

}

void gf_ResourceDialogCreate () {
    // Variable Declarations
    int lv__intA;

    // Automatic Variable Declarations
    const int autoFA988896_ae = 8;
    const int autoFA988896_ai = 1;

    // Variable Initialization

    // Implementation
    lv__intA = 0;
    for ( ; ( (autoFA988896_ai >= 0 && lv__intA <= autoFA988896_ae) || (autoFA988896_ai < 0 && lv__intA >= autoFA988896_ae) ) ; lv__intA += autoFA988896_ai ) {
        if ((lv__intA == 0)) {
            gf_MatrixCreate(c_gameCatalogLoot, gf_IntegertoAlphanumeric(lv__intA), 125, 17, 3, 5, 0, (90 * lv__intA), c_anchorTopRight, ge_MatrixBackground_LeafFrame, ge_MatrixOptions_OnlyforP1);
        }
        else {
            gf_MatrixCreate(c_gameCatalogLoot, gf_IntegertoAlphanumeric(lv__intA), 125, 17, 3, 5, 0, (90 * lv__intA), c_anchorTopRight, ge_MatrixBackground_LeafFrame, ge_MatrixOptions_HideButtonDialog | ge_MatrixOptions_OnlyforP1);
        }
        gf_MatrixCreateLabel(125, 17, 1, 1, c_gameCatalogLoot, gf_IntegertoAlphanumeric(lv__intA), Color(100.00, 100.00, 100.00), StringExternal("Param/Value/D2FA47B6"), "Assets\\Textures\\btn-icon-dominion.dds");
        gf_MatrixCreateLabel(125, 17, 2, 1, c_gameCatalogLoot, gf_IntegertoAlphanumeric(lv__intA), Color(100.00, 100.00, 100.00), StringExternal("Param/Value/EE9E8ED5"), "Assets\\Textures\\btn-icon-dominion.dds");
        gf_MatrixCreateLabel(125, 17, 1, 2, c_gameCatalogLoot, gf_IntegertoAlphanumeric(lv__intA), Color(100.00, 100.00, 100.00), StringExternal("Param/Value/BC9ABE32"), "Assets\\Textures\\icon-mineral.dds");
        gf_MatrixCreateLabel(125, 17, 2, 2, c_gameCatalogLoot, gf_IntegertoAlphanumeric(lv__intA), Color(100.00, 100.00, 100.00), StringExternal("Param/Value/11D4526F"), "Assets\\Textures\\icon-mineral.dds");
        gf_MatrixCreateLabel(125, 17, 1, 3, c_gameCatalogLoot, gf_IntegertoAlphanumeric(lv__intA), Color(100.00, 100.00, 100.00), StringExternal("Param/Value/C5BF949F"), "Assets\\Textures\\icon-gas.dds");
        gf_MatrixCreateLabel(125, 17, 2, 3, c_gameCatalogLoot, gf_IntegertoAlphanumeric(lv__intA), Color(100.00, 100.00, 100.00), StringExternal("Param/Value/02AC16A7"), "Assets\\Textures\\icon-gas.dds");
        gf_MatrixCreateLabel(125, 17, 1, 4, c_gameCatalogLoot, gf_IntegertoAlphanumeric(lv__intA), Color(100.00, 100.00, 100.00), StringExternal("Param/Value/16665D3F"), "Assets\\Textures\\icon-supply.dds");
        gf_MatrixCreateLabel(125, 17, 2, 4, c_gameCatalogLoot, gf_IntegertoAlphanumeric(lv__intA), Color(100.00, 100.00, 100.00), StringExternal("Param/Value/EC32DFAE"), "Assets\\Textures\\icon-supply.dds");
        gf_MatrixCreateLabel(125, 17, 1, 5, c_gameCatalogLoot, gf_IntegertoAlphanumeric(lv__intA), Color(100.00, 100.00, 100.00), StringExternal("Param/Value/83F6919C"), "Assets\\Textures\\ui-editoricon-triggercategories_timer.dds");
        gf_MatrixCreateLabel(125, 17, 2, 5, c_gameCatalogLoot, gf_IntegertoAlphanumeric(lv__intA), Color(100.00, 100.00, 100.00), StringExternal("Param/Value/C74552D1"), "Assets\\Textures\\ui-editoricon-triggercategories_timer.dds");
        DialogControlCreate(DialogLastCreated(), c_triggerControlTypePulldown);
        DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 150, 50);
        DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorTopRight, 0, 5);
        DialogControlAddItem(DialogControlLastCreated(), PlayerGroupAll(), StringExternal("Param/Value/E265A636"));
        DialogControlAddItem(DialogControlLastCreated(), PlayerGroupAll(), StringExternal("Param/Value/D3F11FAC"));
        DialogControlAddItem(DialogControlLastCreated(), PlayerGroupAll(), StringExternal("Param/Value/09E680FE"));
        DialogControlAddItem(DialogControlLastCreated(), PlayerGroupAll(), StringExternal("Param/Value/ED75FD41"));
        gv_matrixITEMDialogState[10][c_gameCatalogLoot][gf_IntegertoAlphanumeric(lv__intA)] = DialogControlLastCreated();
        gv_matrixITEMimageDialogState[10][c_gameCatalogLoot][gf_IntegertoAlphanumeric(lv__intA)] = DialogControlLastCreated();
        DialogControlSelectItem(DialogControlLastCreated(), PlayerGroupAll(), 1);
        DialogControlCreate(DialogLastCreated(), c_triggerControlTypePulldown);
        DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 150, 50);
        DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorBottomRight, 0, 5);
        DialogControlAddItem(DialogControlLastCreated(), PlayerGroupAll(), StringExternal("Param/Value/0862EDF6"));
        DialogControlAddItem(DialogControlLastCreated(), PlayerGroupAll(), StringExternal("Param/Value/A000496E"));
        DialogControlAddItem(DialogControlLastCreated(), PlayerGroupAll(), StringExternal("Param/Value/40222D13"));
        DialogControlSelectItem(DialogControlLastCreated(), PlayerGroupAll(), 1);
        gv_matrixITEMDialogState[11][c_gameCatalogLoot][gf_IntegertoAlphanumeric(lv__intA)] = DialogControlLastCreated();
        gv_matrixITEMimageDialogState[11][c_gameCatalogLoot][gf_IntegertoAlphanumeric(lv__intA)] = DialogControlLastCreated();
    }
    gf_MatrixCreate(c_gameCatalogLoot, ge_Alphanumeric_Iota, 26, 26, 2, 1, 0, 90, c_anchorTopRight, ge_MatrixBackground_None, ge_MatrixOptions_OnlyforP1);
    gf_MatrixCreateButton(26, 26, 1, 1, c_gameCatalogLoot, ge_Alphanumeric_Iota, ge_MatrixOptions_OnlyforP1, "EditorData\\Images\\DataAdd.tga", null, null);
    gf_MatrixCreateButton(26, 26, 2, 1, c_gameCatalogLoot, ge_Alphanumeric_Iota, ge_MatrixOptions_OnlyforP1, "EditorData\\Images\\ToolbarDeleteValue.tga", null, null);
    DialogSetVisible(gv_mATRIXState[c_gameCatalogLoot][(DialogGetOffsetY(gv_mATRIXState[c_gameCatalogLoot][ge_Alphanumeric_Iota]) / 90)], PlayerGroupAll(), true);
    DialogControlSelectItem(gv_matrixITEMDialogState[11][c_gameCatalogLoot][(DialogGetOffsetY(gv_mATRIXState[c_gameCatalogLoot][ge_Alphanumeric_Iota]) / 90)], PlayerGroupAll(), 2);
    DialogSetPosition(gv_mATRIXState[c_gameCatalogLoot][ge_Alphanumeric_Iota], c_anchorTopRight, 0, (DialogGetOffsetY(gv_mATRIXState[c_gameCatalogLoot][ge_Alphanumeric_Iota]) + 90));
    DialogSetVisible(gv_mATRIXState[c_gameCatalogLoot][(DialogGetOffsetY(gv_mATRIXState[c_gameCatalogLoot][ge_Alphanumeric_Iota]) / 90)], PlayerGroupAll(), true);
    DialogControlSelectItem(gv_matrixITEMDialogState[10][c_gameCatalogLoot][(DialogGetOffsetY(gv_mATRIXState[c_gameCatalogLoot][ge_Alphanumeric_Iota]) / 90)], PlayerGroupAll(), 2);
    DialogSetPosition(gv_mATRIXState[c_gameCatalogLoot][ge_Alphanumeric_Iota], c_anchorTopRight, 0, (DialogGetOffsetY(gv_mATRIXState[c_gameCatalogLoot][ge_Alphanumeric_Iota]) + 90));
    DialogSetVisible(gv_mATRIXState[c_gameCatalogLoot][(DialogGetOffsetY(gv_mATRIXState[c_gameCatalogLoot][ge_Alphanumeric_Iota]) / 90)], PlayerGroupAll(), true);
    DialogControlSelectItem(gv_matrixITEMDialogState[10][c_gameCatalogLoot][(DialogGetOffsetY(gv_mATRIXState[c_gameCatalogLoot][ge_Alphanumeric_Iota]) / 90)], PlayerGroupAll(), 2);
    DialogControlSelectItem(gv_matrixITEMDialogState[11][c_gameCatalogLoot][(DialogGetOffsetY(gv_mATRIXState[c_gameCatalogLoot][ge_Alphanumeric_Iota]) / 90)], PlayerGroupAll(), 2);
    DialogSetPosition(gv_mATRIXState[c_gameCatalogLoot][ge_Alphanumeric_Iota], c_anchorTopRight, 0, (DialogGetOffsetY(gv_mATRIXState[c_gameCatalogLoot][ge_Alphanumeric_Iota]) + 90));
}

void gf_ResourceDialogAddRemoveTable () {
    // Automatic Variable Declarations
    // Implementation
    if ((EventDialogControl() == gv_matrixITEMDialogState[0][c_gameCatalogLoot][ge_Alphanumeric_Iota]) && (DialogGetOffsetY(gv_mATRIXState[c_gameCatalogLoot][ge_Alphanumeric_Iota]) < 730)) {
        DialogSetVisible(gv_mATRIXState[c_gameCatalogLoot][(DialogGetOffsetY(gv_mATRIXState[c_gameCatalogLoot][ge_Alphanumeric_Iota]) / 90)], PlayerGroupAll(), true);
        DialogSetPosition(gv_mATRIXState[c_gameCatalogLoot][ge_Alphanumeric_Iota], c_anchorTopRight, 0, (DialogGetOffsetY(gv_mATRIXState[c_gameCatalogLoot][ge_Alphanumeric_Iota]) + 90));
    }
    else if ((EventDialogControl() == gv_matrixITEMDialogState[1][c_gameCatalogLoot][ge_Alphanumeric_Iota]) && (DialogGetOffsetY(gv_mATRIXState[c_gameCatalogLoot][ge_Alphanumeric_Iota]) > 0)) {
        DialogSetPosition(gv_mATRIXState[c_gameCatalogLoot][ge_Alphanumeric_Iota], c_anchorTopRight, 0, (DialogGetOffsetY(gv_mATRIXState[c_gameCatalogLoot][ge_Alphanumeric_Iota]) - 90));
        DialogSetVisible(gv_mATRIXState[c_gameCatalogLoot][(DialogGetOffsetY(gv_mATRIXState[c_gameCatalogLoot][ge_Alphanumeric_Iota]) / 90)], PlayerGroupAll(), false);
    }
}

void gf_ResourceDialogAddUnit (unit lp_unit, int lp_times, int lp_action) {
    // Variable Declarations
    int lv__unitORstructure;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    gf_ResourceDialogAddUnitType(UnitGetType(lp_unit), 1, lp_action, UnitGetOwner(lp_unit));
    if ((UnitGetType(lp_unit) == "Carrier")) {
    }

}

void gf_ResourceDialogAddUnitType (string lp_unit, int lp_times, int lp_action, int lp_player) {
    // Variable Declarations
    int lv__unitORstructure;

    // Automatic Variable Declarations
    int autoA05CADB0_val;

    // Variable Initialization

    // Implementation
    if ((UnitTypeTestAttribute(lp_unit, c_unitAttributeStructure) == true)) {
        lv__unitORstructure = ge_ResourceTableType_Buildings;
    }
    else {
        lv__unitORstructure = ge_ResourceTableType_Units;
    }
    autoA05CADB0_val = lp_action;
    if (autoA05CADB0_val == ge_IncrementationType_Increase) {
        gf_ResourceDialogAddContents(lp_action, UnitTypeGetCost(lp_unit, c_unitCostMinerals), UnitTypeGetCost(lp_unit, c_unitCostVespene), UnitTypeGetProperty(lp_unit, c_unitPropSuppliesUsed), UnitTypeGetProperty(lp_unit, c_unitPropSuppliesMade), gf_UnitTypeGetTimeCost(lp_unit), lp_player, lv__unitORstructure, ge_ResourceState_Current, lp_times);
        if ((lp_unit == "Carrier")) {
            gf_ResourceDialogAddContents(ge_IncrementationType_Decrease, 100, 0, 0.0, 0.0, (gf_UnitTypeGetTimeCost("Interceptor") * 4), lp_player, ge_ResourceTableType_Units, ge_ResourceState_Current, 1);
        }

    }
    else if (autoA05CADB0_val == ge_IncrementationType_Decrease) {
        gf_ResourceDialogAddContents(ge_IncrementationType_Decrease, UnitTypeGetCost(lp_unit, c_unitCostMinerals), UnitTypeGetCost(lp_unit, c_unitCostVespene), UnitTypeGetProperty(lp_unit, c_unitPropSuppliesUsed), UnitTypeGetProperty(lp_unit, c_unitPropSuppliesMade), gf_UnitTypeGetTimeCost(lp_unit), lp_player, lv__unitORstructure, ge_ResourceState_Current, lp_times);
        gf_ResourceDialogAddContents(ge_IncrementationType_Increase, UnitTypeGetCost(lp_unit, c_unitCostMinerals), UnitTypeGetCost(lp_unit, c_unitCostVespene), UnitTypeGetProperty(lp_unit, c_unitPropSuppliesUsed), UnitTypeGetProperty(lp_unit, c_unitPropSuppliesMade), gf_UnitTypeGetTimeCost(lp_unit), lp_player, lv__unitORstructure, ge_ResourceState_Lost, lp_times);
        if ((lp_unit == "Carrier")) {
            gf_ResourceDialogAddContents(ge_IncrementationType_Increase, 100, 0, 0.0, 0.0, (gf_UnitTypeGetTimeCost("Interceptor") * 4), lp_player, ge_ResourceTableType_Units, ge_ResourceState_Current, 1);
            gf_ResourceDialogAddContents(ge_IncrementationType_Decrease, 100, 0, 0.0, 0.0, (gf_UnitTypeGetTimeCost("Interceptor") * 4), lp_player, ge_ResourceTableType_Units, ge_ResourceState_Lost, 1);
        }

    }
    else if (autoA05CADB0_val == ge_IncrementationType_Other) {
        gf_ResourceDialogAddContents(ge_IncrementationType_Decrease, UnitTypeGetCost(lp_unit, c_unitCostMinerals), UnitTypeGetCost(lp_unit, c_unitCostVespene), UnitTypeGetProperty(lp_unit, c_unitPropSuppliesUsed), UnitTypeGetProperty(lp_unit, c_unitPropSuppliesMade), gf_UnitTypeGetTimeCost(lp_unit), lp_player, lv__unitORstructure, ge_ResourceState_Current, lp_times);
        if ((lp_unit == "Carrier")) {
            gf_ResourceDialogAddContents(ge_IncrementationType_Increase, 100, 0, 0.0, 0.0, (gf_UnitTypeGetTimeCost("Interceptor") * 4), lp_player, ge_ResourceTableType_Units, ge_ResourceState_Current, 1);
        }

    }
    else {
    }
    gf_ResourceDialogRefresh();
}

void gf_ResourceDialogAddContents (int lp_action, int lp_minerals, int lp_vespene, fixed lp_suppliesUsed, fixed lp_suppliesMade, int lp_time, int lp_player, int lp_type, int lp_state, int lp_times) {
    // Automatic Variable Declarations
    int auto3068BF63_val;

    // Implementation
    if ((lp_times > 0)) {
        auto3068BF63_val = lp_action;
        if (auto3068BF63_val == ge_IncrementationType_Increase) {
            gv_playerMNRLPlayerTypeState[lp_player][(lp_type)][(lp_state)] += (lp_minerals * lp_times);
            gv_playerVSPNPlayerTypeState[lp_player][(lp_type)][(lp_state)] += (lp_vespene * lp_times);
            gv_playerTIMEPlayerTypeState[lp_player][(lp_type)][(lp_state)] += (lp_time * lp_times);
            gv_playerSUPP_MADEPlayerTypeState[lp_player][(lp_type)][(lp_state)] += (lp_suppliesMade * lp_times);
            gv_playerSUPP_USEDPlayerTypeState[lp_player][(lp_type)][(lp_state)] += (lp_suppliesUsed * lp_times);
        }
        else if (auto3068BF63_val == ge_IncrementationType_Decrease) {
            gv_playerMNRLPlayerTypeState[lp_player][(lp_type)][(lp_state)] -= (lp_minerals * lp_times);
            gv_playerVSPNPlayerTypeState[lp_player][(lp_type)][(lp_state)] -= (lp_vespene * lp_times);
            gv_playerTIMEPlayerTypeState[lp_player][(lp_type)][(lp_state)] -= (lp_time * lp_times);
            gv_playerSUPP_MADEPlayerTypeState[lp_player][(lp_type)][(lp_state)] -= (lp_suppliesMade * lp_times);
            gv_playerSUPP_USEDPlayerTypeState[lp_player][(lp_type)][(lp_state)] -= (lp_suppliesUsed * lp_times);
        }
        else {
        }
        gf_ResourceDialogRefresh();
    }

}

void gf_ResourceDialogAddTech (int lp_action, int lp_state, int lp_player, string lp_research) {
    // Variable Declarations
    int lv__number;
    int lv__level;
    int lv__race;

    // Automatic Variable Declarations
    const int autoFA83743E_ae = 3;
    const int autoFA83743E_ai = 1;
    int auto9E824E3B_ae;
    const int auto9E824E3B_ai = 1;
    const int autoB339E3E4_ae = 3;
    const int autoB339E3E4_ai = 1;
    const int autoE5CF7B40_ae = 3;
    const int autoE5CF7B40_ai = 1;
    int autoCDB44564_ae;
    const int autoCDB44564_ai = 1;

    // Variable Initialization

    // Implementation
    lv__race = 1;
    for ( ; ( (autoFA83743E_ai >= 0 && lv__race <= autoFA83743E_ae) || (autoFA83743E_ai < 0 && lv__race >= autoFA83743E_ae) ) ; lv__race += autoFA83743E_ai ) {
        auto9E824E3B_ae = gf_CountofTechforRace(gf_ConvertIntegertoRace(lv__race), ge_TechType_Upgrade);
        lv__number = 0;
        for ( ; ( (auto9E824E3B_ai >= 0 && lv__number <= auto9E824E3B_ae) || (auto9E824E3B_ai < 0 && lv__number >= auto9E824E3B_ae) ) ; lv__number += auto9E824E3B_ai ) {
            lv__level = 1;
            for ( ; ( (autoB339E3E4_ai >= 0 && lv__level <= autoB339E3E4_ae) || (autoB339E3E4_ai < 0 && lv__level >= autoB339E3E4_ae) ) ; lv__level += autoB339E3E4_ai ) {
                if ((gv_uPGLevelRace[lv__number][lv__level][lv__race] == lp_research)) {
                    gf_ResourceDialogAddContents(lp_action, gv_upgMNRLLevelRace[lv__number][lv__level][lv__race], gv_upgVSPNLevelRace[lv__number][lv__level][lv__race], 0.0, 0.0, gv_upgTIMELevelRace[lv__number][lv__level][lv__race], lp_player, ge_ResourceTableType_Tech, lp_state, 1);
                    return ;
                }

            }
        }
    }
    lv__race = 1;
    for ( ; ( (autoE5CF7B40_ai >= 0 && lv__race <= autoE5CF7B40_ae) || (autoE5CF7B40_ai < 0 && lv__race >= autoE5CF7B40_ae) ) ; lv__race += autoE5CF7B40_ai ) {
        autoCDB44564_ae = gf_CountofTechforRace(gf_ConvertIntegertoRace(lv__race), ge_TechType_Resource);
        lv__number = 0;
        for ( ; ( (autoCDB44564_ai >= 0 && lv__number <= autoCDB44564_ae) || (autoCDB44564_ai < 0 && lv__number >= autoCDB44564_ae) ) ; lv__number += autoCDB44564_ai ) {
            if ((gv_rESRace[lv__number][lv__race] == libNtve_gf_TriggeringProgressUpgrade())) {
                gf_ResourceDialogAddContents(lp_action, gv_resMNRLRace[lv__number][lv__race], gv_resVSPNRace[lv__number][lv__race], 0.0, 0.0, gv_resTIMERace[lv__number][lv__race], lp_player, ge_ResourceTableType_Tech, lp_state, 1);
                break;
            }

        }
    }
    gf_ResourceDialogRefresh();
}

void gf_ResourceDialogResetPlayer (int lp_player) {
    // Variable Declarations
    int lv__intA;
    int lv__intB;

    // Automatic Variable Declarations
    const int autoDDC893F2_ae = 3;
    const int autoDDC893F2_ai = 1;
    const int autoB7501D6E_ae = 2;
    const int autoB7501D6E_ai = 1;

    // Variable Initialization

    // Implementation
    lv__intA = 0;
    for ( ; ( (autoDDC893F2_ai >= 0 && lv__intA <= autoDDC893F2_ae) || (autoDDC893F2_ai < 0 && lv__intA >= autoDDC893F2_ae) ) ; lv__intA += autoDDC893F2_ai ) {
        lv__intB = 0;
        for ( ; ( (autoB7501D6E_ai >= 0 && lv__intB <= autoB7501D6E_ae) || (autoB7501D6E_ai < 0 && lv__intB >= autoB7501D6E_ae) ) ; lv__intB += autoB7501D6E_ai ) {
            gv_playerVSPNPlayerTypeState[lp_player][lv__intA][lv__intB] = 0;
            gv_playerTIMEPlayerTypeState[lp_player][lv__intA][lv__intB] = 0;
            gv_playerSUPP_USEDPlayerTypeState[lp_player][lv__intA][lv__intB] = 0;
            gv_playerSUPP_MADEPlayerTypeState[lp_player][lv__intA][lv__intB] = 0;
            gv_playerMNRLPlayerTypeState[lp_player][lv__intA][lv__intB] = 0;
        }
    }
    gf_ResourceDialogRefresh();
}

void gf_ResourceDialogRemoveLosses () {
    // Variable Declarations
    int lv__intA;
    int lv__intB;

    // Automatic Variable Declarations
    const int auto062C0AE5_ae = 3;
    const int auto062C0AE5_ai = 1;
    const int autoF906A0A6_ae = 14;
    const int autoF906A0A6_ai = 1;

    // Variable Initialization

    // Implementation
    lv__intA = 0;
    for ( ; ( (auto062C0AE5_ai >= 0 && lv__intA <= auto062C0AE5_ae) || (auto062C0AE5_ai < 0 && lv__intA >= auto062C0AE5_ae) ) ; lv__intA += auto062C0AE5_ai ) {
        lv__intB = 13;
        for ( ; ( (autoF906A0A6_ai >= 0 && lv__intB <= autoF906A0A6_ae) || (autoF906A0A6_ai < 0 && lv__intB >= autoF906A0A6_ae) ) ; lv__intB += autoF906A0A6_ai ) {
            gv_playerVSPNPlayerTypeState[lv__intB][lv__intA][1] = 0;
            gv_playerTIMEPlayerTypeState[lv__intB][lv__intA][1] = 0;
            gv_playerSUPP_USEDPlayerTypeState[lv__intB][lv__intA][1] = 0;
            gv_playerSUPP_MADEPlayerTypeState[lv__intB][lv__intA][1] = 0;
            gv_playerMNRLPlayerTypeState[lv__intB][lv__intA][1] = 0;
        }
    }
    gf_ResourceDialogRefresh();
}

void gf_ResourceDialogRefresh () {
    // Variable Declarations
    int lv__listTYPE;
    int lv__listSTATE;
    int lv__intA;
    int lv__intB;

    // Automatic Variable Declarations
    const int autoB0F02D84_ae = 8;
    const int autoB0F02D84_ai = 1;
    int auto97D1D9CD_val;
    const int auto8FF58D92_ae = 9;
    const int auto8FF58D92_ai = 1;
    const int auto76E38948_ae = 7;
    const int auto76E38948_ai = 1;
    const int auto6968CC18_ae = 9;
    const int auto6968CC18_ai = 1;
    int auto9FFA50E3_val;
    const int autoC29C75AA_ae = 5;
    const int autoC29C75AA_ai = 1;
    const int autoF69613E9_ae = 5;
    const int autoF69613E9_ai = 1;

    // Variable Initialization

    // Implementation
    lv__intB = 0;
    for ( ; ( (autoB0F02D84_ai >= 0 && lv__intB <= autoB0F02D84_ae) || (autoB0F02D84_ai < 0 && lv__intB >= autoB0F02D84_ae) ) ; lv__intB += autoB0F02D84_ai ) {
        if ((DialogIsVisible(gv_mATRIXState[c_gameCatalogLoot][lv__intB], 1) == true)) {
            lv__listTYPE = DialogControlGetSelectedItem(gv_matrixITEMDialogState[10][c_gameCatalogLoot][lv__intB], 1);
            lv__listTYPE = (lv__listTYPE - 1);
            lv__listSTATE = DialogControlGetSelectedItem(gv_matrixITEMDialogState[11][c_gameCatalogLoot][lv__intB], 1);
            lv__listSTATE = (lv__listSTATE - 1);
            if ((lv__listSTATE == 2)) {
                libNtve_gf_SetDialogItemText(gv_matrixITEMDialogState[2][c_gameCatalogLoot][lv__intB], FixedToText((gv_playerMNRLPlayerTypeState[13][lv__listTYPE][0] + gv_playerMNRLPlayerTypeState[13][lv__listTYPE][1]), 0), PlayerGroupAll());
                libNtve_gf_SetDialogItemText(gv_matrixITEMDialogState[3][c_gameCatalogLoot][lv__intB], FixedToText((gv_playerMNRLPlayerTypeState[14][lv__listTYPE][0] + gv_playerMNRLPlayerTypeState[14][lv__listTYPE][1]), 0), PlayerGroupAll());
                libNtve_gf_SetDialogItemText(gv_matrixITEMDialogState[4][c_gameCatalogLoot][lv__intB], FixedToText((gv_playerVSPNPlayerTypeState[13][lv__listTYPE][0] + gv_playerVSPNPlayerTypeState[13][lv__listTYPE][1]), 0), PlayerGroupAll());
                libNtve_gf_SetDialogItemText(gv_matrixITEMDialogState[5][c_gameCatalogLoot][lv__intB], FixedToText((gv_playerVSPNPlayerTypeState[14][lv__listTYPE][0] + gv_playerVSPNPlayerTypeState[14][lv__listTYPE][1]), 0), PlayerGroupAll());
                libNtve_gf_SetDialogItemText(gv_matrixITEMDialogState[6][c_gameCatalogLoot][lv__intB], (FixedToText((gv_playerSUPP_USEDPlayerTypeState[13][lv__listTYPE][0] + gv_playerSUPP_USEDPlayerTypeState[13][lv__listTYPE][1]), 1) + (StringExternal("Param/Value/4C2CCBDA") + FixedToText((gv_playerSUPP_MADEPlayerTypeState[14][lv__listTYPE][0] + gv_playerSUPP_MADEPlayerTypeState[14][lv__listTYPE][1]), 0))), PlayerGroupAll());
                libNtve_gf_SetDialogItemText(gv_matrixITEMDialogState[7][c_gameCatalogLoot][lv__intB], (FixedToText((gv_playerSUPP_USEDPlayerTypeState[14][lv__listTYPE][0] + gv_playerSUPP_USEDPlayerTypeState[14][lv__listTYPE][1]), 1) + (StringExternal("Param/Value/DD29E967") + FixedToText((gv_playerSUPP_MADEPlayerTypeState[14][lv__listTYPE][0] + gv_playerSUPP_MADEPlayerTypeState[14][lv__listTYPE][1]), 0))), PlayerGroupAll());
                libNtve_gf_SetDialogItemText(gv_matrixITEMDialogState[8][c_gameCatalogLoot][lv__intB], FixedToText(((gv_playerTIMEPlayerTypeState[13][lv__listTYPE][0] + gv_playerTIMEPlayerTypeState[13][lv__listTYPE][1]) * 0.85), 0), PlayerGroupAll());
                libNtve_gf_SetDialogItemText(gv_matrixITEMDialogState[9][c_gameCatalogLoot][lv__intB], FixedToText(((gv_playerTIMEPlayerTypeState[14][lv__listTYPE][0] + gv_playerTIMEPlayerTypeState[14][lv__listTYPE][1]) * 0.85), 0), PlayerGroupAll());
            }
            else {
                libNtve_gf_SetDialogItemText(gv_matrixITEMDialogState[2][c_gameCatalogLoot][lv__intB], FixedToText(gv_playerMNRLPlayerTypeState[13][lv__listTYPE][lv__listSTATE], 0), PlayerGroupAll());
                libNtve_gf_SetDialogItemText(gv_matrixITEMDialogState[3][c_gameCatalogLoot][lv__intB], FixedToText(gv_playerMNRLPlayerTypeState[14][lv__listTYPE][lv__listSTATE], 0), PlayerGroupAll());
                libNtve_gf_SetDialogItemText(gv_matrixITEMDialogState[4][c_gameCatalogLoot][lv__intB], FixedToText(gv_playerVSPNPlayerTypeState[13][lv__listTYPE][lv__listSTATE], 0), PlayerGroupAll());
                libNtve_gf_SetDialogItemText(gv_matrixITEMDialogState[5][c_gameCatalogLoot][lv__intB], FixedToText(gv_playerVSPNPlayerTypeState[14][lv__listTYPE][lv__listSTATE], 0), PlayerGroupAll());
                libNtve_gf_SetDialogItemText(gv_matrixITEMDialogState[6][c_gameCatalogLoot][lv__intB], (FixedToText(gv_playerSUPP_USEDPlayerTypeState[13][lv__listTYPE][lv__listSTATE], 1) + (StringExternal("Param/Value/63390772") + FixedToText(gv_playerSUPP_MADEPlayerTypeState[13][lv__listTYPE][lv__listSTATE], 0))), PlayerGroupAll());
                libNtve_gf_SetDialogItemText(gv_matrixITEMDialogState[7][c_gameCatalogLoot][lv__intB], (FixedToText(gv_playerSUPP_USEDPlayerTypeState[14][lv__listTYPE][lv__listSTATE], 1) + (StringExternal("Param/Value/20C26DD5") + FixedToText(gv_playerSUPP_MADEPlayerTypeState[14][lv__listTYPE][lv__listSTATE], 0))), PlayerGroupAll());
                libNtve_gf_SetDialogItemText(gv_matrixITEMDialogState[8][c_gameCatalogLoot][lv__intB], FixedToText((gv_playerTIMEPlayerTypeState[13][lv__listTYPE][lv__listSTATE] * 0.85), 0), PlayerGroupAll());
                libNtve_gf_SetDialogItemText(gv_matrixITEMDialogState[9][c_gameCatalogLoot][lv__intB], FixedToText((gv_playerTIMEPlayerTypeState[14][lv__listTYPE][lv__listSTATE] * 0.85), 0), PlayerGroupAll());
            }
            auto97D1D9CD_val = lv__listTYPE;
            if (auto97D1D9CD_val == 1) {
                lv__intA = 8;
                for ( ; ( (auto8FF58D92_ai >= 0 && lv__intA <= auto8FF58D92_ae) || (auto8FF58D92_ai < 0 && lv__intA >= auto8FF58D92_ae) ) ; lv__intA += auto8FF58D92_ai ) {
                    libNtve_gf_SetDialogItemText(gv_matrixITEMDialogState[lv__intA][c_gameCatalogLoot][lv__intB], StringExternal("Param/Value/0E5FF256"), PlayerGroupAll());
                }
            }
            else if (auto97D1D9CD_val == 2) {
                lv__intA = 6;
                for ( ; ( (auto76E38948_ai >= 0 && lv__intA <= auto76E38948_ae) || (auto76E38948_ai < 0 && lv__intA >= auto76E38948_ae) ) ; lv__intA += auto76E38948_ai ) {
                    libNtve_gf_SetDialogItemText(gv_matrixITEMDialogState[lv__intA][c_gameCatalogLoot][lv__intB], StringExternal("Param/Value/80EAF0E2"), PlayerGroupAll());
                }
            }
            else if (auto97D1D9CD_val == 3) {
                lv__intA = 6;
                for ( ; ( (auto6968CC18_ai >= 0 && lv__intA <= auto6968CC18_ae) || (auto6968CC18_ai < 0 && lv__intA >= auto6968CC18_ae) ) ; lv__intA += auto6968CC18_ai ) {
                    libNtve_gf_SetDialogItemText(gv_matrixITEMDialogState[lv__intA][c_gameCatalogLoot][lv__intB], StringExternal("Param/Value/55FD75DD"), PlayerGroupAll());
                }
                auto9FFA50E3_val = lv__listSTATE;
                if (auto9FFA50E3_val == 0) {
                    libNtve_gf_SetDialogItemText(gv_matrixITEMDialogState[2][c_gameCatalogLoot][lv__intB], IntToText(PlayerGetPropertyInt(13, c_playerPropMineralsCollected)), PlayerGroupAll());
                    libNtve_gf_SetDialogItemText(gv_matrixITEMDialogState[3][c_gameCatalogLoot][lv__intB], IntToText(PlayerGetPropertyInt(14, c_playerPropMineralsCollected)), PlayerGroupAll());
                    libNtve_gf_SetDialogItemText(gv_matrixITEMDialogState[4][c_gameCatalogLoot][lv__intB], IntToText(PlayerGetPropertyInt(13, c_playerPropVespeneCollected)), PlayerGroupAll());
                    libNtve_gf_SetDialogItemText(gv_matrixITEMDialogState[5][c_gameCatalogLoot][lv__intB], IntToText(PlayerGetPropertyInt(14, c_playerPropVespeneCollected)), PlayerGroupAll());
                }
                else if (auto9FFA50E3_val == 1) {
                    lv__intA = 2;
                    for ( ; ( (autoC29C75AA_ai >= 0 && lv__intA <= autoC29C75AA_ae) || (autoC29C75AA_ai < 0 && lv__intA >= autoC29C75AA_ae) ) ; lv__intA += autoC29C75AA_ai ) {
                        libNtve_gf_SetDialogItemText(gv_matrixITEMDialogState[lv__intA][c_gameCatalogLoot][lv__intB], StringExternal("Param/Value/2F48D0B5"), PlayerGroupAll());
                    }
                }
                else if (auto9FFA50E3_val == 2) {
                    lv__intA = 2;
                    for ( ; ( (autoF69613E9_ai >= 0 && lv__intA <= autoF69613E9_ae) || (autoF69613E9_ai < 0 && lv__intA >= autoF69613E9_ae) ) ; lv__intA += autoF69613E9_ai ) {
                        libNtve_gf_SetDialogItemText(gv_matrixITEMDialogState[lv__intA][c_gameCatalogLoot][lv__intB], StringExternal("Param/Value/F8FB3B9F"), PlayerGroupAll());
                    }
                }
                else {
                }
            }
            else {
            }
        }

    }
}

void gf_TechMenuCreate () {
    // Variable Declarations
    int lv__intA;
    int lv__race;

    // Automatic Variable Declarations
    const int autoEE828FC7_ae = 3;
    const int autoEE828FC7_ai = 1;
    int autoFEE847AB_ae;
    const int autoFEE847AB_ai = 1;
    const int auto1DDFD743_ae = 4;
    const int auto1DDFD743_ai = 1;
    int autoEB6D017B_val;
    int autoC36513B8_ae;
    const int autoC36513B8_ai = 1;
    const int autoF48FEA6B_ae = 4;
    const int autoF48FEA6B_ai = 1;
    int auto15D00248_val;
    const int auto67C83181_ae = 3;
    const int auto67C83181_ai = 1;
    int autoB239D8DA_ae;
    const int autoB239D8DA_ai = 1;
    const int autoAB27C970_ae = 19;
    const int autoAB27C970_ai = 1;
    int auto151FA507_val;

    // Variable Initialization

    // Implementation
    gv_dialogRACE = 1;
    gf_MatrixCreate(c_gameCatalogUpgrade, ge_Alphanumeric_Zeta, 110, 40, 1, 3, 325, 725, c_anchorTopRight, ge_MatrixBackground_LeafFrame, ge_MatrixOptions_OnlyforP1);
    gf_MatrixCreateButton(110, 40, 1, 1, c_gameCatalogUpgrade, ge_Alphanumeric_Zeta, ge_MatrixOptions_Toggled, "Assets\\Textures\\075.dds", StringExternal("Param/Value/9A96447B"), null);
    gf_MatrixCreateButton(110, 40, 1, 2, c_gameCatalogUpgrade, ge_Alphanumeric_Zeta, 0, "Assets\\Textures\\075.dds", StringExternal("Param/Value/B89316C4"), null);
    gf_MatrixCreateButton(110, 40, 1, 3, c_gameCatalogUpgrade, ge_Alphanumeric_Zeta, 0, "Assets\\Textures\\075.dds", StringExternal("Param/Value/432544BA"), null);
    gf_MatrixCreate(c_gameCatalogUpgrade, ge_Alphanumeric_Zero, 110, 42, 1, 3, 325, 570, c_anchorTopRight, ge_MatrixBackground_LeafFrame, ge_MatrixOptions_OnlyforP1);
    gf_MatrixCreateButton(50, 50, 1, 1, c_gameCatalogUpgrade, ge_Alphanumeric_Zero, 0, "Assets\\Textures\\btn-ability-protoss-blackhole-color.dds", StringToText(""), StringExternal("Param/Value/BBB515F9"));
    gf_MatrixCreateButton(50, 50, 2, 1, c_gameCatalogUpgrade, ge_Alphanumeric_Zero, 0, "Assets\\Textures\\btn-ability-kerrigan_revive.dds", StringToText(""), StringExternal("Param/Value/D3B9E0D4"));
    gf_MatrixCreateButton(110, 40, 1, 2, c_gameCatalogUpgrade, ge_Alphanumeric_Zero, ge_MatrixOptions_Toggled, "Assets\\Textures\\075.dds", StringExternal("Param/Value/9C2E89F7"), null);
    gf_MatrixCreateButton(110, 40, 1, 3, c_gameCatalogUpgrade, ge_Alphanumeric_Zero, 0, "Assets\\Textures\\075.dds", StringExternal("Param/Value/6231E50E"), null);
    lv__race = 1;
    for ( ; ( (autoEE828FC7_ai >= 0 && lv__race <= autoEE828FC7_ae) || (autoEE828FC7_ai < 0 && lv__race >= autoEE828FC7_ae) ) ; lv__race += autoEE828FC7_ai ) {
        if ((lv__race == 1)) {
            gf_MatrixCreate(c_gameCatalogWeapon, gf_IntegertoAlphanumeric(lv__race), 60, 30, 5, 3, 0, 500, c_anchorTopRight, ge_MatrixBackground_LeafFrame, ge_MatrixOptions_OnlyforP1);
        }
        else {
            gf_MatrixCreate(c_gameCatalogWeapon, gf_IntegertoAlphanumeric(lv__race), 60, 30, 5, 3, 0, 500, c_anchorTopRight, ge_MatrixBackground_LeafFrame, ge_MatrixOptions_HideButtonDialog | ge_MatrixOptions_OnlyforP1);
        }
        autoFEE847AB_ae = (gf_CountofTechforRace(gf_ConvertIntegertoRace(lv__race), ge_TechType_Upgrade) - 1);
        lv__intA = 0;
        for ( ; ( (autoFEE847AB_ai >= 0 && lv__intA <= autoFEE847AB_ae) || (autoFEE847AB_ai < 0 && lv__intA >= autoFEE847AB_ae) ) ; lv__intA += autoFEE847AB_ai ) {
            gf_MatrixCreateButton(60, 60, ((lv__intA + 1) - (5 * TruncI((lv__intA / 5.0)))), 1, c_gameCatalogWeapon, gf_IntegertoAlphanumeric(lv__race), ge_MatrixOptions_OnlyforP1, gv_upgIMGLevelRace[lv__intA][1][lv__race], StringToText(""), StringExternal("Param/Value/D165CFF0"));
        }
        lv__intA = gf_CountofTechforRace(gf_ConvertIntegertoRace(lv__race), ge_TechType_Upgrade);
        for ( ; ( (auto1DDFD743_ai >= 0 && lv__intA <= auto1DDFD743_ae) || (auto1DDFD743_ai < 0 && lv__intA >= auto1DDFD743_ae) ) ; lv__intA += auto1DDFD743_ai ) {
            autoEB6D017B_val = lv__race;
            if (autoEB6D017B_val == 1) {
                gf_MatrixCreateButton(60, 60, ((lv__intA + 1) - (5 * TruncI((lv__intA / 5.0)))), 1, c_gameCatalogWeapon, gf_IntegertoAlphanumeric(lv__race), ge_MatrixOptions_Desaturated | ge_MatrixOptions_OnlyforP1 | ge_MatrixOptions_Locked, "Assets\\Textures\\ui_battlenet_loading_player_racialicon_zerg_l.dds", StringToText(""), StringToText(""));
            }
            else if (autoEB6D017B_val == 2) {
                gf_MatrixCreateButton(60, 60, ((lv__intA + 1) - (5 * TruncI((lv__intA / 5.0)))), 1, c_gameCatalogWeapon, gf_IntegertoAlphanumeric(lv__race), ge_MatrixOptions_Desaturated | ge_MatrixOptions_OnlyforP1 | ge_MatrixOptions_Locked, "Assets\\Textures\\ui_battlenet_loading_player_racialicon_terran_l.dds", StringToText(""), StringToText(""));
            }
            else if (autoEB6D017B_val == 3) {
                gf_MatrixCreateButton(60, 60, ((lv__intA + 1) - (5 * TruncI((lv__intA / 5.0)))), 1, c_gameCatalogWeapon, gf_IntegertoAlphanumeric(lv__race), ge_MatrixOptions_Desaturated | ge_MatrixOptions_OnlyforP1 | ge_MatrixOptions_Locked, "Assets\\Textures\\ui_battlenet_loading_player_racialicon_protoss_l.dds", StringToText(""), StringToText(""));
            }
            else {
            }
        }
        autoC36513B8_ae = (gf_CountofTechforRace(gf_ConvertIntegertoRace(lv__race), ge_TechType_Upgrade) - 1);
        lv__intA = 0;
        for ( ; ( (autoC36513B8_ai >= 0 && lv__intA <= autoC36513B8_ae) || (autoC36513B8_ai < 0 && lv__intA >= autoC36513B8_ae) ) ; lv__intA += autoC36513B8_ai ) {
            gf_MatrixCreateButton(60, 30, ((lv__intA + 1) - (5 * TruncI((lv__intA / 5.0)))), 3, c_gameCatalogWeapon, gf_IntegertoAlphanumeric(lv__race), ge_MatrixOptions_OnlyforP1 | ge_MatrixOptions_Locked, "Assets\\Textures\\ui_button_sortlistarrow_down.dds", StringToText(""), StringToText(""));
        }
        lv__intA = gf_CountofTechforRace(gf_ConvertIntegertoRace(lv__race), ge_TechType_Upgrade);
        for ( ; ( (autoF48FEA6B_ai >= 0 && lv__intA <= autoF48FEA6B_ae) || (autoF48FEA6B_ai < 0 && lv__intA >= autoF48FEA6B_ae) ) ; lv__intA += autoF48FEA6B_ai ) {
            auto15D00248_val = lv__race;
            if (auto15D00248_val == 1) {
                gf_MatrixCreateButton(60, 30, ((lv__intA + 1) - (5 * TruncI((lv__intA / 5.0)))), 3, c_gameCatalogWeapon, gf_IntegertoAlphanumeric(lv__race), ge_MatrixOptions_Desaturated | ge_MatrixOptions_OnlyforP1 | ge_MatrixOptions_Locked, "Assets\\Textures\\ui_button_sortlistarrow_down.dds", StringToText(""), StringToText(""));
            }
            else if (auto15D00248_val == 2) {
                gf_MatrixCreateButton(60, 30, ((lv__intA + 1) - (5 * TruncI((lv__intA / 5.0)))), 3, c_gameCatalogWeapon, gf_IntegertoAlphanumeric(lv__race), ge_MatrixOptions_Desaturated | ge_MatrixOptions_OnlyforP1 | ge_MatrixOptions_Locked, "Assets\\Textures\\ui_button_sortlistarrow_down.dds", StringToText(""), StringToText(""));
            }
            else if (auto15D00248_val == 3) {
                gf_MatrixCreateButton(60, 30, ((lv__intA + 1) - (5 * TruncI((lv__intA / 5.0)))), 3, c_gameCatalogWeapon, gf_IntegertoAlphanumeric(lv__race), ge_MatrixOptions_Desaturated | ge_MatrixOptions_OnlyforP1 | ge_MatrixOptions_Locked, "Assets\\Textures\\ui_button_sortlistarrow_down.dds", StringToText(""), StringToText(""));
            }
            else {
            }
        }
    }
    lv__race = 1;
    for ( ; ( (auto67C83181_ai >= 0 && lv__race <= auto67C83181_ae) || (auto67C83181_ai < 0 && lv__race >= auto67C83181_ae) ) ; lv__race += auto67C83181_ai ) {
        if ((lv__race == 1)) {
            gf_MatrixCreate(c_gameCatalogUpgrade, gf_IntegertoAlphanumeric(lv__race), 60, 60, 5, 4, 0, 600, c_anchorTopRight, ge_MatrixBackground_LeafFrame, ge_MatrixOptions_OnlyforP1);
        }
        else {
            gf_MatrixCreate(c_gameCatalogUpgrade, gf_IntegertoAlphanumeric(lv__race), 60, 60, 5, 4, 0, 600, c_anchorTopRight, ge_MatrixBackground_LeafFrame, ge_MatrixOptions_HideButtonDialog | ge_MatrixOptions_OnlyforP1);
        }
        autoB239D8DA_ae = (gf_CountofTechforRace(gf_ConvertIntegertoRace(lv__race), ge_TechType_Resource) - 1);
        lv__intA = 0;
        for ( ; ( (autoB239D8DA_ai >= 0 && lv__intA <= autoB239D8DA_ae) || (autoB239D8DA_ai < 0 && lv__intA >= autoB239D8DA_ae) ) ; lv__intA += autoB239D8DA_ai ) {
            gf_MatrixCreateButton(60, 60, ((lv__intA + 1) - (5 * TruncI((lv__intA / 5.0)))), TruncI((1.0 + (lv__intA / 5.0))), c_gameCatalogUpgrade, gf_IntegertoAlphanumeric(lv__race), ge_MatrixOptions_Desaturated | ge_MatrixOptions_OnlyforP1, gv_resIMGRace[lv__intA][lv__race], StringToText(""), gv_resTIPRace[lv__intA][lv__race]);
        }
        lv__intA = gf_CountofTechforRace(gf_ConvertIntegertoRace(lv__race), ge_TechType_Resource);
        for ( ; ( (autoAB27C970_ai >= 0 && lv__intA <= autoAB27C970_ae) || (autoAB27C970_ai < 0 && lv__intA >= autoAB27C970_ae) ) ; lv__intA += autoAB27C970_ai ) {
            auto151FA507_val = lv__race;
            if (auto151FA507_val == 1) {
                gf_MatrixCreateButton(60, 60, ((lv__intA + 1) - (5 * TruncI((lv__intA / 5.0)))), TruncI((1.0 + (lv__intA / 5.0))), c_gameCatalogUpgrade, gf_IntegertoAlphanumeric(lv__race), ge_MatrixOptions_Desaturated | ge_MatrixOptions_OnlyforP1 | ge_MatrixOptions_Locked, "Assets\\Textures\\ui_battlenet_loading_player_racialicon_zerg_l.dds", StringToText(""), StringToText(""));
            }
            else if (auto151FA507_val == 2) {
                gf_MatrixCreateButton(60, 60, ((lv__intA + 1) - (5 * TruncI((lv__intA / 5.0)))), TruncI((1.0 + (lv__intA / 5.0))), c_gameCatalogUpgrade, gf_IntegertoAlphanumeric(lv__race), ge_MatrixOptions_Desaturated | ge_MatrixOptions_OnlyforP1 | ge_MatrixOptions_Locked, "Assets\\Textures\\ui_battlenet_loading_player_racialicon_terran_l.dds", StringToText(""), StringToText(""));
            }
            else if (auto151FA507_val == 3) {
                gf_MatrixCreateButton(60, 60, ((lv__intA + 1) - (5 * TruncI((lv__intA / 5.0)))), TruncI((1.0 + (lv__intA / 5.0))), c_gameCatalogUpgrade, gf_IntegertoAlphanumeric(lv__race), ge_MatrixOptions_Desaturated | ge_MatrixOptions_OnlyforP1 | ge_MatrixOptions_Locked, "Assets\\Textures\\ui_battlenet_loading_player_racialicon_protoss_l.dds", StringToText(""), StringToText(""));
            }
            else {
            }
        }
    }
    gf_MatrixCreate(c_gameCatalogUpgrade, ge_Alphanumeric_Eta, 26, 26, 1, 1, 0, 840, c_anchorTopRight, ge_MatrixBackground_None, ge_MatrixOptions_OnlyforP1);
    gf_MatrixCreateButton(26, 26, 1, 1, c_gameCatalogUpgrade, ge_Alphanumeric_Eta, ge_MatrixOptions_OnlyforP1, "Assets\\Textures\\ui-editoricon-triggercategories_techtree.dds", StringToText(""), StringToText(""));
}

void gf_TechMenuTrigger () {
    // Variable Declarations
    int lv__intA;
    int lv__intB;
    int lv__intC;
    int lv__intD;

    // Automatic Variable Declarations
    const int auto69150560_ae = 3;
    const int auto69150560_ai = 1;
    const int autoF4BCFE41_ae = 19;
    const int autoF4BCFE41_ai = 1;
    const int auto017DB835_ae = 3;
    const int auto017DB835_ai = 1;
    const int auto03CBCB80_ae = 4;
    const int auto03CBCB80_ai = 1;
    const int autoA2EC42BD_ae = 9;
    const int autoA2EC42BD_ai = 1;
    const int auto5FED207B_ae = 3;
    const int auto5FED207B_ai = 1;
    const int autoBEB2BF09_ae = 3;
    const int autoBEB2BF09_ai = 1;
    int autoDD7CFA68_ae;
    const int autoDD7CFA68_ai = 1;
    const int autoFCF99A10_ae = 3;
    const int autoFCF99A10_ai = 1;
    int auto3A94DC07_ae;
    const int auto3A94DC07_ai = 1;
    const int autoC4DF1025_ae = 3;
    const int autoC4DF1025_ai = 1;
    const int autoE56E4334_ae = 14;
    const int autoE56E4334_ai = 1;
    int auto252B018F_ae;
    const int auto252B018F_ai = 1;
    int auto998894A4_ae;
    const int auto998894A4_ai = 1;
    const int auto61CE81FB_ae = 3;
    const int auto61CE81FB_ai = 1;
    int autoD0DE4199_ae;
    const int autoD0DE4199_ai = 1;
    int auto62BD08B5_ae;
    const int auto62BD08B5_ai = 1;
    const int auto082C2286_ae = 3;
    const int auto082C2286_ai = 1;
    const int auto7966E518_ae = 3;
    const int auto7966E518_ai = 1;
    const int auto70A06AFB_ae = 14;
    const int auto70A06AFB_ai = 1;
    int auto5FF8DCD7_ae;
    const int auto5FF8DCD7_ai = 1;
    int autoF918E06A_ae;
    const int autoF918E06A_ai = 1;
    const int auto1E1F5B6C_ae = 1;
    const int auto1E1F5B6C_ai = -1;
    int auto57AD45A2_ae;
    const int auto57AD45A2_ai = 1;
    int autoA2C5DC0F_ae;
    const int autoA2C5DC0F_ai = 1;
    const int autoEC25ABE5_ae = 3;
    const int autoEC25ABE5_ai = 1;
    const int autoF5CC0FCE_ae = 2;
    const int autoF5CC0FCE_ai = 1;

    // Variable Initialization

    // Implementation
    lv__intB = 1;
    for ( ; ( (auto69150560_ai >= 0 && lv__intB <= auto69150560_ae) || (auto69150560_ai < 0 && lv__intB >= auto69150560_ae) ) ; lv__intB += auto69150560_ai ) {
        lv__intA = 0;
        for ( ; ( (autoF4BCFE41_ai >= 0 && lv__intA <= autoF4BCFE41_ae) || (autoF4BCFE41_ai < 0 && lv__intA >= autoF4BCFE41_ae) ) ; lv__intA += autoF4BCFE41_ai ) {
            if ((gv_matrixITEMDialogState[lv__intA][c_gameCatalogUpgrade][lv__intB] == EventDialogControl())) {
                gf_TechMenuResearch(gv_playerCURRENT, lv__intA, lv__intB);
            }

        }
    }
    lv__intB = 1;
    for ( ; ( (auto017DB835_ai >= 0 && lv__intB <= auto017DB835_ae) || (auto017DB835_ai < 0 && lv__intB >= auto017DB835_ae) ) ; lv__intB += auto017DB835_ai ) {
        lv__intA = 0;
        for ( ; ( (auto03CBCB80_ai >= 0 && lv__intA <= auto03CBCB80_ae) || (auto03CBCB80_ai < 0 && lv__intA >= auto03CBCB80_ae) ) ; lv__intA += auto03CBCB80_ai ) {
            if ((gv_matrixITEMDialogState[lv__intA][c_gameCatalogWeapon][lv__intB] == EventDialogControl())) {
                gf_TechMenuUpgrade(gv_playerCURRENT, lv__intA, lv__intB, ge_IncrementationType_Increase);
            }

        }
        lv__intA = 5;
        for ( ; ( (autoA2EC42BD_ai >= 0 && lv__intA <= autoA2EC42BD_ae) || (autoA2EC42BD_ai < 0 && lv__intA >= autoA2EC42BD_ae) ) ; lv__intA += autoA2EC42BD_ai ) {
            if ((gv_matrixITEMDialogState[lv__intA][c_gameCatalogWeapon][lv__intB] == EventDialogControl())) {
                gf_TechMenuUpgrade(gv_playerCURRENT, (lv__intA - 5), lv__intB, ge_IncrementationType_Decrease);
            }

        }
    }
    lv__intA = 2;
    for ( ; ( (auto5FED207B_ai >= 0 && lv__intA <= auto5FED207B_ae) || (auto5FED207B_ai < 0 && lv__intA >= auto5FED207B_ae) ) ; lv__intA += auto5FED207B_ai ) {
        if ((gv_matrixITEMDialogState[lv__intA][c_gameCatalogUpgrade][ge_Alphanumeric_Zero] == EventDialogControl())) {
            gf_SelectUnitCreator(EventPlayer());
            libNtve_gf_SetDialogItemToggled(gv_matrixITEMDialogState[2][c_gameCatalogUpgrade][ge_Alphanumeric_Zero], false, gv_mASTERS);
            libNtve_gf_SetDialogItemToggled(gv_matrixITEMDialogState[3][c_gameCatalogUpgrade][ge_Alphanumeric_Zero], false, gv_mASTERS);
            libNtve_gf_SetDialogItemToggled(gv_matrixITEMDialogState[lv__intA][c_gameCatalogUpgrade][ge_Alphanumeric_Zero], true, PlayerGroupAll());
            gv_playerCURRENT = (13 + (lv__intA - 2));
            lv__intB = 1;
            for ( ; ( (autoBEB2BF09_ai >= 0 && lv__intB <= autoBEB2BF09_ae) || (autoBEB2BF09_ai < 0 && lv__intB >= autoBEB2BF09_ae) ) ; lv__intB += autoBEB2BF09_ai ) {
                autoDD7CFA68_ae = (gf_CountofTechforRace(gf_ConvertIntegertoRace(lv__intB), ge_TechType_Resource) - 1);
                lv__intC = 0;
                for ( ; ( (autoDD7CFA68_ai >= 0 && lv__intC <= autoDD7CFA68_ae) || (autoDD7CFA68_ai < 0 && lv__intC >= autoDD7CFA68_ae) ) ; lv__intC += autoDD7CFA68_ai ) {
                    if ((TechTreeUpgradeCount(gv_playerCURRENT, gv_rESRace[lv__intC][lv__intB], c_techCountCompleteOnly) == 1)) {
                        libNtve_gf_SetDialogItemDesaturated(gv_matrixITEMimageDialogState[lv__intC][c_gameCatalogUpgrade][lv__intB], false, PlayerGroupAll());
                    }
                    else {
                        libNtve_gf_SetDialogItemDesaturated(gv_matrixITEMimageDialogState[lv__intC][c_gameCatalogUpgrade][lv__intB], true, PlayerGroupAll());
                    }
                }
            }
            lv__intB = 1;
            for ( ; ( (autoFCF99A10_ai >= 0 && lv__intB <= autoFCF99A10_ae) || (autoFCF99A10_ai < 0 && lv__intB >= autoFCF99A10_ae) ) ; lv__intB += autoFCF99A10_ai ) {
                auto3A94DC07_ae = (gf_CountofTechforRace(gf_ConvertIntegertoRace(lv__intB), ge_TechType_Upgrade) - 1);
                lv__intC = 0;
                for ( ; ( (auto3A94DC07_ai >= 0 && lv__intC <= auto3A94DC07_ae) || (auto3A94DC07_ai < 0 && lv__intC >= auto3A94DC07_ae) ) ; lv__intC += auto3A94DC07_ai ) {
                    gf_TechMenuUpgrade(gv_playerCURRENT, lv__intC, lv__intB, ge_IncrementationType_Other);
                }
            }
        }

    }
    if ((gv_matrixITEMDialogState[1][c_gameCatalogUpgrade][ge_Alphanumeric_Zero] == EventDialogControl())) {
        if ((gv_controlDOWN == true)) {
            lv__intA = 1;
            for ( ; ( (autoC4DF1025_ai >= 0 && lv__intA <= autoC4DF1025_ae) || (autoC4DF1025_ai < 0 && lv__intA >= autoC4DF1025_ae) ) ; lv__intA += autoC4DF1025_ai ) {
                lv__intC = 13;
                for ( ; ( (autoE56E4334_ai >= 0 && lv__intC <= autoE56E4334_ae) || (autoE56E4334_ai < 0 && lv__intC >= autoE56E4334_ae) ) ; lv__intC += autoE56E4334_ai ) {
                    auto252B018F_ae = (gf_CountofTechforRace(gf_ConvertIntegertoRace(lv__intA), ge_TechType_Resource) - 1);
                    lv__intB = 0;
                    for ( ; ( (auto252B018F_ai >= 0 && lv__intB <= auto252B018F_ae) || (auto252B018F_ai < 0 && lv__intB >= auto252B018F_ae) ) ; lv__intB += auto252B018F_ai ) {
                        if ((TechTreeUpgradeCount(lv__intC, gv_rESRace[lv__intB][lv__intA], c_techCountCompleteOnly) == 0)) {
                            gf_TechMenuResearch(lv__intC, lv__intB, lv__intA);
                        }

                    }
                    auto998894A4_ae = (gf_CountofTechforRace(gf_ConvertIntegertoRace(lv__intA), ge_TechType_Upgrade) - 1);
                    lv__intB = 0;
                    for ( ; ( (auto998894A4_ai >= 0 && lv__intB <= auto998894A4_ae) || (auto998894A4_ai < 0 && lv__intB >= auto998894A4_ae) ) ; lv__intB += auto998894A4_ai ) {
                        lv__intD = 1;
                        for ( ; ( (auto61CE81FB_ai >= 0 && lv__intD <= auto61CE81FB_ae) || (auto61CE81FB_ai < 0 && lv__intD >= auto61CE81FB_ae) ) ; lv__intD += auto61CE81FB_ai ) {
                            if ((TechTreeUpgradeCount(lv__intC, gv_uPGLevelRace[lv__intB][lv__intD][lv__intA], c_techCountCompleteOnly) == 0)) {
                                gf_TechMenuUpgrade(lv__intC, lv__intB, lv__intA, ge_IncrementationType_Increase);
                            }

                        }
                    }
                }
            }
        }
        else {
            autoD0DE4199_ae = (gf_CountofTechforRace(gf_ConvertIntegertoRace(gv_dialogRACE), ge_TechType_Resource) - 1);
            lv__intB = 0;
            for ( ; ( (autoD0DE4199_ai >= 0 && lv__intB <= autoD0DE4199_ae) || (autoD0DE4199_ai < 0 && lv__intB >= autoD0DE4199_ae) ) ; lv__intB += autoD0DE4199_ai ) {
                if ((TechTreeUpgradeCount(gv_playerCURRENT, gv_rESRace[lv__intB][gv_dialogRACE], c_techCountCompleteOnly) == 0)) {
                    gf_TechMenuResearch(gv_playerCURRENT, lv__intB, gv_dialogRACE);
                }

            }
            auto62BD08B5_ae = (gf_CountofTechforRace(gf_ConvertIntegertoRace(gv_dialogRACE), ge_TechType_Upgrade) - 1);
            lv__intB = 0;
            for ( ; ( (auto62BD08B5_ai >= 0 && lv__intB <= auto62BD08B5_ae) || (auto62BD08B5_ai < 0 && lv__intB >= auto62BD08B5_ae) ) ; lv__intB += auto62BD08B5_ai ) {
                lv__intC = 1;
                for ( ; ( (auto082C2286_ai >= 0 && lv__intC <= auto082C2286_ae) || (auto082C2286_ai < 0 && lv__intC >= auto082C2286_ae) ) ; lv__intC += auto082C2286_ai ) {
                    gf_TechMenuUpgrade(gv_playerCURRENT, lv__intB, gv_dialogRACE, ge_IncrementationType_Increase);
                    gf_TechMenuUpgrade(gv_playerCURRENT, lv__intB, gv_dialogRACE, ge_IncrementationType_Increase);
                    gf_TechMenuUpgrade(gv_playerCURRENT, lv__intB, gv_dialogRACE, ge_IncrementationType_Increase);
                }
            }
        }
    }

    if ((gv_matrixITEMDialogState[0][c_gameCatalogUpgrade][ge_Alphanumeric_Zero] == EventDialogControl())) {
        if ((gv_controlDOWN == true)) {
            lv__intA = 1;
            for ( ; ( (auto7966E518_ai >= 0 && lv__intA <= auto7966E518_ae) || (auto7966E518_ai < 0 && lv__intA >= auto7966E518_ae) ) ; lv__intA += auto7966E518_ai ) {
                lv__intC = 13;
                for ( ; ( (auto70A06AFB_ai >= 0 && lv__intC <= auto70A06AFB_ae) || (auto70A06AFB_ai < 0 && lv__intC >= auto70A06AFB_ae) ) ; lv__intC += auto70A06AFB_ai ) {
                    auto5FF8DCD7_ae = (gf_CountofTechforRace(gf_ConvertIntegertoRace(lv__intA), ge_TechType_Resource) - 1);
                    lv__intB = 0;
                    for ( ; ( (auto5FF8DCD7_ai >= 0 && lv__intB <= auto5FF8DCD7_ae) || (auto5FF8DCD7_ai < 0 && lv__intB >= auto5FF8DCD7_ae) ) ; lv__intB += auto5FF8DCD7_ai ) {
                        if ((TechTreeUpgradeCount(lv__intC, gv_rESRace[lv__intB][lv__intA], c_techCountCompleteOnly) == 1)) {
                            gf_TechMenuResearch(lv__intC, lv__intB, lv__intA);
                        }

                    }
                    autoF918E06A_ae = (gf_CountofTechforRace(gf_ConvertIntegertoRace(gv_dialogRACE), ge_TechType_Upgrade) - 1);
                    lv__intB = 0;
                    for ( ; ( (autoF918E06A_ai >= 0 && lv__intB <= autoF918E06A_ae) || (autoF918E06A_ai < 0 && lv__intB >= autoF918E06A_ae) ) ; lv__intB += autoF918E06A_ai ) {
                        lv__intD = 3;
                        for ( ; ( (auto1E1F5B6C_ai >= 0 && lv__intD <= auto1E1F5B6C_ae) || (auto1E1F5B6C_ai < 0 && lv__intD >= auto1E1F5B6C_ae) ) ; lv__intD += auto1E1F5B6C_ai ) {
                            if ((TechTreeUpgradeCount(lv__intC, gv_uPGLevelRace[lv__intB][lv__intD][lv__intA], c_techCountCompleteOnly) == 1)) {
                                gf_TechMenuUpgrade(lv__intC, lv__intB, lv__intA, ge_IncrementationType_Decrease);
                            }

                        }
                    }
                }
            }
        }
        else {
            auto57AD45A2_ae = (gf_CountofTechforRace(gf_ConvertIntegertoRace(gv_dialogRACE), ge_TechType_Resource) - 1);
            lv__intB = 0;
            for ( ; ( (auto57AD45A2_ai >= 0 && lv__intB <= auto57AD45A2_ae) || (auto57AD45A2_ai < 0 && lv__intB >= auto57AD45A2_ae) ) ; lv__intB += auto57AD45A2_ai ) {
                if ((TechTreeUpgradeCount(gv_playerCURRENT, gv_rESRace[lv__intB][gv_dialogRACE], c_techCountCompleteOnly) == 1)) {
                    gf_TechMenuResearch(gv_playerCURRENT, lv__intB, gv_dialogRACE);
                }

            }
            autoA2C5DC0F_ae = (gf_CountofTechforRace(gf_ConvertIntegertoRace(gv_dialogRACE), ge_TechType_Upgrade) - 1);
            lv__intB = 0;
            for ( ; ( (autoA2C5DC0F_ai >= 0 && lv__intB <= autoA2C5DC0F_ae) || (autoA2C5DC0F_ai < 0 && lv__intB >= autoA2C5DC0F_ae) ) ; lv__intB += autoA2C5DC0F_ai ) {
                lv__intC = 1;
                for ( ; ( (autoEC25ABE5_ai >= 0 && lv__intC <= autoEC25ABE5_ae) || (autoEC25ABE5_ai < 0 && lv__intC >= autoEC25ABE5_ae) ) ; lv__intC += autoEC25ABE5_ai ) {
                    gf_TechMenuUpgrade(gv_playerCURRENT, lv__intB, gv_dialogRACE, ge_IncrementationType_Decrease);
                    gf_TechMenuUpgrade(gv_playerCURRENT, lv__intB, gv_dialogRACE, ge_IncrementationType_Decrease);
                    gf_TechMenuUpgrade(gv_playerCURRENT, lv__intB, gv_dialogRACE, ge_IncrementationType_Decrease);
                }
            }
        }
    }

    lv__intA = 0;
    for ( ; ( (autoF5CC0FCE_ai >= 0 && lv__intA <= autoF5CC0FCE_ae) || (autoF5CC0FCE_ai < 0 && lv__intA >= autoF5CC0FCE_ae) ) ; lv__intA += autoF5CC0FCE_ai ) {
        if ((gv_matrixITEMDialogState[lv__intA][c_gameCatalogUpgrade][ge_Alphanumeric_Zeta] == EventDialogControl())) {
            libNtve_gf_SetDialogItemToggled(gv_matrixITEMDialogState[0][c_gameCatalogUpgrade][ge_Alphanumeric_Zeta], false, PlayerGroupAll());
            libNtve_gf_SetDialogItemToggled(gv_matrixITEMDialogState[1][c_gameCatalogUpgrade][ge_Alphanumeric_Zeta], false, PlayerGroupAll());
            libNtve_gf_SetDialogItemToggled(gv_matrixITEMDialogState[2][c_gameCatalogUpgrade][ge_Alphanumeric_Zeta], false, PlayerGroupAll());
            libNtve_gf_SetDialogItemToggled(gv_matrixITEMDialogState[lv__intA][c_gameCatalogUpgrade][ge_Alphanumeric_Zeta], true, PlayerGroupAll());
            DialogSetVisible(gv_mATRIXState[c_gameCatalogUpgrade][ge_Alphanumeric_Alpha], PlayerGroupAll(), false);
            DialogSetVisible(gv_mATRIXState[c_gameCatalogUpgrade][ge_Alphanumeric_Beta], PlayerGroupAll(), false);
            DialogSetVisible(gv_mATRIXState[c_gameCatalogUpgrade][ge_Alphanumeric_Gamma], PlayerGroupAll(), false);
            DialogSetVisible(gv_mATRIXState[c_gameCatalogUpgrade][(lv__intA + 1)], PlayerGroupAll(), true);
            DialogSetVisible(gv_mATRIXState[c_gameCatalogWeapon][ge_Alphanumeric_Alpha], PlayerGroupAll(), false);
            DialogSetVisible(gv_mATRIXState[c_gameCatalogWeapon][ge_Alphanumeric_Beta], PlayerGroupAll(), false);
            DialogSetVisible(gv_mATRIXState[c_gameCatalogWeapon][ge_Alphanumeric_Gamma], PlayerGroupAll(), false);
            DialogSetVisible(gv_mATRIXState[c_gameCatalogWeapon][(lv__intA + 1)], PlayerGroupAll(), true);
            gv_dialogRACE = (lv__intA + 1);
            gf_SelectUnitCreator(EventPlayer());
        }

    }
    if ((gv_matrixITEMDialogState[0][c_gameCatalogUpgrade][ge_Alphanumeric_Eta] == EventDialogControl())) {
        if ((DialogIsVisible(gv_mATRIXState[c_gameCatalogUpgrade][ge_Alphanumeric_Zero], 1) == true)) {
            gf_TechMenuShowHideTechManager(false, PlayerGroupSingle(1));
        }
        else {
            gf_TechMenuShowHideTechManager(true, PlayerGroupSingle(1));
        }
    }

}

void gf_TechMenuResearch (int lp_player, int lp_number, int lp_race) {
    // Variable Declarations
    string lv__RES;
    string lv__resIMG;
    int lv__dialogBTNimage;

    // Automatic Variable Declarations
    // Variable Initialization
    lv__RES = gv_rESRace[lp_number][lp_race];
    lv__resIMG = gv_resIMGRace[lp_number][lp_race];
    lv__dialogBTNimage = gv_matrixITEMimageDialogState[lp_number][c_gameCatalogUpgrade][lp_race];

    // Implementation
    if ((TechTreeUpgradeCount(lp_player, lv__RES, c_techCountCompleteOnly) == 0)) {
        SoundPlay(gf_SoundRacialCompleteRemove(lp_race, ge_CompleteRemoved_Complete), PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
        libNtve_gf_SetDialogItemDesaturated(lv__dialogBTNimage, false, PlayerGroupAll());
        TechTreeUpgradeAddLevel(lp_player, lv__RES, 1);
        gf_ResourceDialogAddContents(ge_IncrementationType_Increase, gv_resMNRLRace[lp_number][lp_race], gv_resVSPNRace[lp_number][lp_race], 0.0, 0.0, gv_resTIMERace[lp_number][lp_race], lp_player, ge_ResourceTableType_Tech, ge_ResourceState_Current, 1);
    }
    else {
        SoundPlay(gf_SoundRacialCompleteRemove(lp_race, ge_CompleteRemoved_Removed), PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
        libNtve_gf_SetDialogItemDesaturated(lv__dialogBTNimage, true, PlayerGroupAll());
        TechTreeUpgradeAddLevel(lp_player, lv__RES, -1);
        gf_ResourceDialogAddContents(ge_IncrementationType_Decrease, gv_resMNRLRace[lp_number][lp_race], gv_resVSPNRace[lp_number][lp_race], 0.0, 0.0, gv_resTIMERace[lp_number][lp_race], lp_player, ge_ResourceTableType_Tech, ge_ResourceState_Current, 1);
    }
}

void gf_TechMenuUpgrade (int lp_player, int lp_number, int lp_race, int lp_incrementation) {
    // Variable Declarations
    int lv__intA;
    int lv__upgCOMPLETED;

    // Automatic Variable Declarations
    const int autoF4B2DA9E_ae = 1;
    const int autoF4B2DA9E_ai = -1;
    int autoEC96E3D4_val;

    // Variable Initialization

    // Implementation
    lv__intA = 3;
    for ( ; ( (autoF4B2DA9E_ai >= 0 && lv__intA <= autoF4B2DA9E_ae) || (autoF4B2DA9E_ai < 0 && lv__intA >= autoF4B2DA9E_ae) ) ; lv__intA += autoF4B2DA9E_ai ) {
        if ((TechTreeUpgradeCount(lp_player, gv_uPGLevelRace[lp_number][lv__intA][lp_race], c_techCountCompleteOnly) == 1)) {
            lv__upgCOMPLETED = (lv__upgCOMPLETED + 1);
        }

    }
    autoEC96E3D4_val = lp_incrementation;
    if (autoEC96E3D4_val == ge_IncrementationType_Increase) {
        if ((TechTreeUpgradeCount(lp_player, gv_uPGLevelRace[lp_number][3][lp_race], c_techCountCompleteOnly) != 1)) {
            if ((TechTreeUpgradeCount(lp_player, gv_uPGLevelRace[lp_number][1][lp_race], c_techCountCompleteOnly) == 0)) {
                libNtve_gf_SetDialogItemDesaturated(gv_matrixITEMimageDialogState[(lp_number + 5)][c_gameCatalogWeapon][lp_race], false, PlayerGroupAll());
                libNtve_gf_SetDialogItemDesaturated(gv_matrixITEMDialogState[(lp_number + 5)][c_gameCatalogWeapon][lp_race], false, PlayerGroupAll());
                libNtve_gf_SetDialogItemAcceptMouse(gv_matrixITEMDialogState[(lp_number + 5)][c_gameCatalogWeapon][lp_race], true, PlayerGroupAll());
                DialogControlFadeTransparency(gv_matrixITEMDialogState[(lp_number + 5)][c_gameCatalogWeapon][lp_race], PlayerGroupAll(), 0.2, 0.0);
                DialogControlFadeTransparency(gv_matrixITEMimageDialogState[(lp_number + 5)][c_gameCatalogWeapon][lp_race], PlayerGroupAll(), 0.2, 0.0);
            }

            SoundPlay(gf_SoundRacialCompleteRemove(lp_race, ge_CompleteRemoved_Complete), PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
            TechTreeUpgradeAddLevel(lp_player, gv_uPGLevelRace[lp_number][(lv__upgCOMPLETED + 1)][lp_race], 1);
            gf_ResourceDialogAddContents(ge_IncrementationType_Increase, gv_upgMNRLLevelRace[lp_number][(lv__upgCOMPLETED + 1)][lp_race], gv_upgVSPNLevelRace[lp_number][(lv__upgCOMPLETED + 1)][lp_race], 0.0, 0.0, gv_upgTIMELevelRace[lp_number][(lv__upgCOMPLETED + 1)][lp_race], lp_player, ge_ResourceTableType_Tech, ge_ResourceState_Current, 1);
            if ((TechTreeUpgradeCount(lp_player, gv_uPGLevelRace[lp_number][3][lp_race], c_techCountCompleteOnly) == 1)) {
                libNtve_gf_SetDialogItemDesaturated(gv_matrixITEMimageDialogState[lp_number][c_gameCatalogWeapon][lp_race], true, PlayerGroupAll());
                libNtve_gf_SetDialogItemDesaturated(gv_matrixITEMDialogState[(lp_number + 0)][c_gameCatalogWeapon][lp_race], true, PlayerGroupAll());
                libNtve_gf_SetDialogItemAcceptMouse(gv_matrixITEMDialogState[lp_number][c_gameCatalogWeapon][lp_race], false, PlayerGroupAll());
            }
            else {
                libNtve_gf_SetDialogItemImage(gv_matrixITEMimageDialogState[lp_number][c_gameCatalogWeapon][lp_race], gv_upgIMGLevelRace[lp_number][(lv__upgCOMPLETED + 2)][lp_race], PlayerGroupAll());
            }
        }

    }
    else if (autoEC96E3D4_val == ge_IncrementationType_Decrease) {
        if ((TechTreeUpgradeCount(lp_player, gv_uPGLevelRace[lp_number][1][lp_race], c_techCountCompleteOnly) != 0)) {
            if ((TechTreeUpgradeCount(lp_player, gv_uPGLevelRace[lp_number][3][lp_race], c_techCountCompleteOnly) == 1)) {
                libNtve_gf_SetDialogItemDesaturated(gv_matrixITEMimageDialogState[lp_number][c_gameCatalogWeapon][lp_race], false, PlayerGroupAll());
                libNtve_gf_SetDialogItemDesaturated(gv_matrixITEMDialogState[(lp_number + 0)][c_gameCatalogWeapon][lp_race], false, PlayerGroupAll());
                libNtve_gf_SetDialogItemAcceptMouse(gv_matrixITEMDialogState[lp_number][c_gameCatalogWeapon][lp_race], true, PlayerGroupAll());
            }
            else {
                libNtve_gf_SetDialogItemImage(gv_matrixITEMimageDialogState[lp_number][c_gameCatalogWeapon][lp_race], gv_upgIMGLevelRace[lp_number][lv__upgCOMPLETED][lp_race], PlayerGroupAll());
            }
            SoundPlay(gf_SoundRacialCompleteRemove(lp_race, ge_CompleteRemoved_Removed), PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
            TechTreeUpgradeAddLevel(lp_player, gv_uPGLevelRace[lp_number][lv__upgCOMPLETED][lp_race], -1);
            TechTreeUpgradeAddLevel(lp_player, gv_uPGLevelRace[lp_number][(lv__upgCOMPLETED - 1)][lp_race], -1);
            TechTreeUpgradeAddLevel(lp_player, gv_uPGLevelRace[lp_number][(lv__upgCOMPLETED - 1)][lp_race], 1);
            gf_ResourceDialogAddContents(ge_IncrementationType_Decrease, gv_upgMNRLLevelRace[lp_number][lv__upgCOMPLETED][lp_race], gv_upgVSPNLevelRace[lp_number][lv__upgCOMPLETED][lp_race], 0.0, 0.0, gv_upgTIMELevelRace[lp_number][lv__upgCOMPLETED][lp_race], lp_player, ge_ResourceTableType_Tech, ge_ResourceState_Current, 1);
            if ((TechTreeUpgradeCount(lp_player, gv_uPGLevelRace[lp_number][1][lp_race], c_techCountCompleteOnly) == 0)) {
                libNtve_gf_SetDialogItemDesaturated(gv_matrixITEMimageDialogState[(lp_number + 5)][c_gameCatalogWeapon][lp_race], true, PlayerGroupAll());
                libNtve_gf_SetDialogItemDesaturated(gv_matrixITEMDialogState[(lp_number + 5)][c_gameCatalogWeapon][lp_race], true, PlayerGroupAll());
                libNtve_gf_SetDialogItemAcceptMouse(gv_matrixITEMDialogState[(lp_number + 5)][c_gameCatalogWeapon][lp_race], false, PlayerGroupAll());
                DialogControlFadeTransparency(gv_matrixITEMDialogState[(lp_number + 5)][c_gameCatalogWeapon][lp_race], PlayerGroupAll(), 0.2, 60.0);
                DialogControlFadeTransparency(gv_matrixITEMimageDialogState[(lp_number + 5)][c_gameCatalogWeapon][lp_race], PlayerGroupAll(), 0.2, 60.0);
            }

        }

    }
    else if (autoEC96E3D4_val == ge_IncrementationType_Other) {
        if ((TechTreeUpgradeCount(lp_player, gv_uPGLevelRace[lp_number][3][lp_race], c_techCountCompleteOnly) == 1)) {
            libNtve_gf_SetDialogItemImage(gv_matrixITEMimageDialogState[lp_number][c_gameCatalogWeapon][lp_race], gv_upgIMGLevelRace[lp_number][lv__upgCOMPLETED][lp_race], PlayerGroupAll());
            libNtve_gf_SetDialogItemDesaturated(gv_matrixITEMimageDialogState[lp_number][c_gameCatalogWeapon][lp_race], true, PlayerGroupAll());
            libNtve_gf_SetDialogItemDesaturated(gv_matrixITEMDialogState[(lp_number + 0)][c_gameCatalogWeapon][lp_race], true, PlayerGroupAll());
            libNtve_gf_SetDialogItemAcceptMouse(gv_matrixITEMDialogState[lp_number][c_gameCatalogWeapon][lp_race], false, PlayerGroupAll());
        }
        else {
            libNtve_gf_SetDialogItemImage(gv_matrixITEMimageDialogState[lp_number][c_gameCatalogWeapon][lp_race], gv_upgIMGLevelRace[lp_number][(lv__upgCOMPLETED + 1)][lp_race], PlayerGroupAll());
            libNtve_gf_SetDialogItemDesaturated(gv_matrixITEMimageDialogState[lp_number][c_gameCatalogWeapon][lp_race], false, PlayerGroupAll());
            libNtve_gf_SetDialogItemDesaturated(gv_matrixITEMDialogState[(lp_number + 0)][c_gameCatalogWeapon][lp_race], false, PlayerGroupAll());
            libNtve_gf_SetDialogItemAcceptMouse(gv_matrixITEMDialogState[lp_number][c_gameCatalogWeapon][lp_race], true, PlayerGroupAll());
        }
        if ((TechTreeUpgradeCount(lp_player, gv_uPGLevelRace[lp_number][1][lp_race], c_techCountCompleteOnly) == 0)) {
            libNtve_gf_SetDialogItemDesaturated(gv_matrixITEMimageDialogState[(lp_number + 5)][c_gameCatalogWeapon][lp_race], true, PlayerGroupAll());
            libNtve_gf_SetDialogItemDesaturated(gv_matrixITEMDialogState[(lp_number + 5)][c_gameCatalogWeapon][lp_race], true, PlayerGroupAll());
            libNtve_gf_SetDialogItemAcceptMouse(gv_matrixITEMDialogState[(lp_number + 5)][c_gameCatalogWeapon][lp_race], false, PlayerGroupAll());
            DialogControlFadeTransparency(gv_matrixITEMDialogState[(lp_number + 5)][c_gameCatalogWeapon][lp_race], PlayerGroupAll(), 0.2, 60.0);
            DialogControlFadeTransparency(gv_matrixITEMimageDialogState[(lp_number + 5)][c_gameCatalogWeapon][lp_race], PlayerGroupAll(), 0.2, 60.0);
        }
        else {
            libNtve_gf_SetDialogItemDesaturated(gv_matrixITEMimageDialogState[(lp_number + 5)][c_gameCatalogWeapon][lp_race], false, PlayerGroupAll());
            libNtve_gf_SetDialogItemDesaturated(gv_matrixITEMDialogState[(lp_number + 5)][c_gameCatalogWeapon][lp_race], false, PlayerGroupAll());
            libNtve_gf_SetDialogItemAcceptMouse(gv_matrixITEMDialogState[(lp_number + 5)][c_gameCatalogWeapon][lp_race], true, PlayerGroupAll());
            DialogControlFadeTransparency(gv_matrixITEMDialogState[(lp_number + 5)][c_gameCatalogWeapon][lp_race], PlayerGroupAll(), 0.2, 0.0);
            DialogControlFadeTransparency(gv_matrixITEMimageDialogState[(lp_number + 5)][c_gameCatalogWeapon][lp_race], PlayerGroupAll(), 0.2, 0.0);
        }
    }
    else {
    }
}

void gf_TechMenuRefresh () {
    // Variable Declarations
    int lv__intA;
    int lv__intB;
    int lv__intC;

    // Automatic Variable Declarations
    const int auto16281272_ae = 3;
    const int auto16281272_ai = 1;
    const int auto1FFA8594_ae = 3;
    const int auto1FFA8594_ai = 1;
    int autoA8D6F8B9_ae;
    const int autoA8D6F8B9_ai = 1;
    const int auto51B3CA07_ae = 3;
    const int auto51B3CA07_ai = 1;
    int auto22735288_ae;
    const int auto22735288_ai = 1;

    // Variable Initialization

    // Implementation
    lv__intA = 2;
    for ( ; ( (auto16281272_ai >= 0 && lv__intA <= auto16281272_ae) || (auto16281272_ai < 0 && lv__intA >= auto16281272_ae) ) ; lv__intA += auto16281272_ai ) {
        libNtve_gf_SetDialogItemToggled(gv_matrixITEMDialogState[2][c_gameCatalogUpgrade][ge_Alphanumeric_Zero], false, gv_mASTERS);
        libNtve_gf_SetDialogItemToggled(gv_matrixITEMDialogState[3][c_gameCatalogUpgrade][ge_Alphanumeric_Zero], false, gv_mASTERS);
        libNtve_gf_SetDialogItemToggled(gv_matrixITEMDialogState[lv__intA][c_gameCatalogUpgrade][ge_Alphanumeric_Zero], true, gv_mASTERS);
        lv__intB = 1;
        for ( ; ( (auto1FFA8594_ai >= 0 && lv__intB <= auto1FFA8594_ae) || (auto1FFA8594_ai < 0 && lv__intB >= auto1FFA8594_ae) ) ; lv__intB += auto1FFA8594_ai ) {
            autoA8D6F8B9_ae = (gf_CountofTechforRace(gf_ConvertIntegertoRace(lv__intB), ge_TechType_Resource) - 1);
            lv__intC = 0;
            for ( ; ( (autoA8D6F8B9_ai >= 0 && lv__intC <= autoA8D6F8B9_ae) || (autoA8D6F8B9_ai < 0 && lv__intC >= autoA8D6F8B9_ae) ) ; lv__intC += autoA8D6F8B9_ai ) {
                if ((TechTreeUpgradeCount(gv_playerCURRENT, gv_rESRace[lv__intC][lv__intB], c_techCountCompleteOnly) == 1)) {
                    libNtve_gf_SetDialogItemDesaturated(gv_matrixITEMimageDialogState[lv__intC][c_gameCatalogUpgrade][lv__intB], false, gv_mASTERS);
                }
                else {
                    libNtve_gf_SetDialogItemDesaturated(gv_matrixITEMimageDialogState[lv__intC][c_gameCatalogUpgrade][lv__intB], true, gv_mASTERS);
                }
            }
        }
        lv__intB = 1;
        for ( ; ( (auto51B3CA07_ai >= 0 && lv__intB <= auto51B3CA07_ae) || (auto51B3CA07_ai < 0 && lv__intB >= auto51B3CA07_ae) ) ; lv__intB += auto51B3CA07_ai ) {
            auto22735288_ae = (gf_CountofTechforRace(gf_ConvertIntegertoRace(lv__intB), ge_TechType_Upgrade) - 1);
            lv__intC = 0;
            for ( ; ( (auto22735288_ai >= 0 && lv__intC <= auto22735288_ae) || (auto22735288_ai < 0 && lv__intC >= auto22735288_ae) ) ; lv__intC += auto22735288_ai ) {
                gf_TechMenuUpgrade(gv_playerCURRENT, lv__intC, lv__intB, ge_IncrementationType_Other);
            }
        }
    }
}

void gf_TechMenuShowHideTechManager (bool lp_showHide, playergroup lp_players) {
    // Automatic Variable Declarations
    bool auto3F231776_val;

    // Implementation
    auto3F231776_val = lp_showHide;
    if (auto3F231776_val == true) {
        DialogSetVisible(gv_mATRIXState[c_gameCatalogUpgrade][ge_Alphanumeric_Zero], lp_players, true);
        DialogSetVisible(gv_mATRIXState[c_gameCatalogUpgrade][ge_Alphanumeric_Zeta], lp_players, true);
        DialogSetVisible(gv_mATRIXState[c_gameCatalogUpgrade][gv_dialogRACE], lp_players, true);
        DialogSetVisible(gv_mATRIXState[c_gameCatalogWeapon][gv_dialogRACE], lp_players, true);
    }
    else if (auto3F231776_val == false) {
        DialogSetVisible(gv_mATRIXState[c_gameCatalogUpgrade][ge_Alphanumeric_Zero], lp_players, false);
        DialogSetVisible(gv_mATRIXState[c_gameCatalogUpgrade][ge_Alphanumeric_Zeta], lp_players, false);
        DialogSetVisible(gv_mATRIXState[c_gameCatalogUpgrade][gv_dialogRACE], lp_players, false);
        DialogSetVisible(gv_mATRIXState[c_gameCatalogWeapon][gv_dialogRACE], lp_players, false);
    }
    else {
    }
}

void gf_SettingsCreate () {
    // Variable Declarations
    int lv__intA;
    int lv__itemWIDTH;
    int lv__itemHEIGHT;

    // Automatic Variable Declarations
    // Variable Initialization
    lv__intA = 7;
    lv__itemWIDTH = 300;
    lv__itemHEIGHT = 30;

    // Implementation
    gf_MatrixCreate(c_gameCatalogValidator, ge_Alphanumeric_Delta, 180, 50, 1, 1, 240, 250, c_anchorBottomRight, ge_MatrixBackground_None, ge_MatrixOptions_OnlyforP1);
    gf_MatrixCreateButton(50, 50, 1, 1, c_gameCatalogValidator, ge_Alphanumeric_Delta, ge_MatrixOptions_OnlyforP1, "Assets\\Textures\\ui-editoricon-scripteditor_showerrors.dds", null, StringExternal("Param/Value/4AA4FA00"));
    gf_MatrixCreateButton(50, 50, 1, 1, c_gameCatalogValidator, ge_Alphanumeric_Delta, ge_MatrixOptions_OnlyforP1, "Assets\\Textures\\ui_tipicon_campaign_space01-repair.dds", null, StringExternal("Param/Value/24B3940A"));
    gf_MatrixCreate(c_gameCatalogValidator, ge_Alphanumeric_Zero, 200, lv__itemHEIGHT, 2, 10, 450, 280, c_anchorBottomRight, ge_MatrixBackground_LeafFrame, ge_MatrixOptions_HideButtonDialog | ge_MatrixOptions_OnlyforP1);
    gf_MatrixCreateLabel(300, 50, 0, 1, c_gameCatalogValidator, ge_Alphanumeric_Zero, Color(100.00, 100.00, 100.00), StringExternal("Param/Value/3B830F16"), "Assets\\Textures\\075.dds");
    gf_MatrixCreateLabel(lv__itemWIDTH, lv__itemHEIGHT, 1, 2, c_gameCatalogValidator, ge_Alphanumeric_Zero, Color(100.00, 100.00, 100.00), StringExternal("Param/Value/008B5412"), "Assets\\Textures\\ui_tipicon_campaign_space01-repair.dds");
    gf_MatrixCreateLabel(lv__itemHEIGHT, lv__itemHEIGHT, 12, 2, c_gameCatalogValidator, ge_Alphanumeric_Zero, Color(100.00, 100.00, 100.00), StringToText(""), "Assets\\Textures\\ui_charbaricons_zerg_individual.dds");
    gf_MatrixCreateLabel(lv__itemHEIGHT, lv__itemHEIGHT, 13, 2, c_gameCatalogValidator, ge_Alphanumeric_Zero, Color(100.00, 100.00, 100.00), StringToText(""), "Assets\\Textures\\ui_chatbaricons_protoss_individual.dds");
    gf_MatrixCreateLabel(lv__itemWIDTH, lv__itemHEIGHT, 1, 3, c_gameCatalogValidator, ge_Alphanumeric_Zero, Color(100.00, 100.00, 100.00), StringExternal("Param/Value/6051F4E5"), "Assets\\Textures\\btn-upgrade-terran-hisecautotracking.dds");
    gf_MatrixCreateCheckbox(lv__itemHEIGHT, lv__itemHEIGHT, 12, 3, c_gameCatalogValidator, ge_Alphanumeric_Zero, ge_MatrixOptions_OnlyforP1 | ge_MatrixOptions_Locked, null, null, null, false);
    gf_MatrixCreateCheckbox(lv__itemHEIGHT, lv__itemHEIGHT, 13, 3, c_gameCatalogValidator, ge_Alphanumeric_Zero, ge_MatrixOptions_OnlyforP1 | ge_MatrixOptions_Locked, null, null, null, false);
    gf_MatrixCreateLabel(lv__itemWIDTH, lv__itemHEIGHT, 1, 4, c_gameCatalogValidator, ge_Alphanumeric_Zero, Color(100.00, 100.00, 100.00), StringExternal("Param/Value/CFBEF856"), "Assets\\Textures\\ui_tipicon_evolution_hydralisk-waves.dds");
    gf_MatrixCreateCheckbox(lv__itemHEIGHT, lv__itemHEIGHT, 12, 4, c_gameCatalogValidator, ge_Alphanumeric_Zero, ge_MatrixOptions_OnlyforP1 | ge_MatrixOptions_Locked, null, null, null, false);
    gf_MatrixCreateCheckbox(lv__itemHEIGHT, lv__itemHEIGHT, 13, 4, c_gameCatalogValidator, ge_Alphanumeric_Zero, ge_MatrixOptions_OnlyforP1 | ge_MatrixOptions_Locked, null, null, null, false);
    gf_MatrixCreateLabel(lv__itemWIDTH, lv__itemHEIGHT, 1, 5, c_gameCatalogValidator, ge_Alphanumeric_Zero, Color(100.00, 100.00, 100.00), StringExternal("Param/Value/D584B6D1"), "Assets\\Textures\\ui_tipicon_training_counters.dds");
    gf_MatrixCreateCheckbox(lv__itemHEIGHT, lv__itemHEIGHT, 12, 5, c_gameCatalogValidator, ge_Alphanumeric_Zero, ge_MatrixOptions_OnlyforP1 | ge_MatrixOptions_Locked, null, null, null, false);
    gf_MatrixCreateCheckbox(lv__itemHEIGHT, lv__itemHEIGHT, 13, 5, c_gameCatalogValidator, ge_Alphanumeric_Zero, ge_MatrixOptions_OnlyforP1 | ge_MatrixOptions_Locked, null, null, null, false);
    gf_MatrixCreateLabel(lv__itemWIDTH, lv__itemHEIGHT, 1, 6, c_gameCatalogValidator, ge_Alphanumeric_Zero, Color(100.00, 100.00, 100.00), StringExternal("Param/Value/345BA823"), "Assets\\Textures\\btn-ability-kerrigan-wildmutation.dds");
    gf_MatrixCreateCheckbox(lv__itemHEIGHT, lv__itemHEIGHT, 12, 6, c_gameCatalogValidator, ge_Alphanumeric_Zero, ge_MatrixOptions_OnlyforP1, null, null, null, false);
    gf_MatrixCreateCheckbox(lv__itemHEIGHT, lv__itemHEIGHT, 13, 6, c_gameCatalogValidator, ge_Alphanumeric_Zero, ge_MatrixOptions_OnlyforP1, null, null, null, false);
    gf_MatrixCreateLabel(lv__itemWIDTH, lv__itemHEIGHT, 1, 7, c_gameCatalogValidator, ge_Alphanumeric_Zero, Color(100.00, 100.00, 100.00), StringExternal("Param/Value/6A546D2A"), "Assets\\Textures\\btn-ability-terran-calldownextrasupplies-color.dds");
    gf_MatrixCreateCheckbox(lv__itemHEIGHT, lv__itemHEIGHT, 12, 7, c_gameCatalogValidator, ge_Alphanumeric_Zero, ge_MatrixOptions_OnlyforP1, null, null, null, false);
    gf_MatrixCreateCheckbox(lv__itemHEIGHT, lv__itemHEIGHT, 13, 7, c_gameCatalogValidator, ge_Alphanumeric_Zero, ge_MatrixOptions_OnlyforP1, null, null, null, false);
    lv__intA += 1;
    gf_MatrixCreateLabel(lv__itemWIDTH, lv__itemHEIGHT, 1, lv__intA, c_gameCatalogValidator, ge_Alphanumeric_Zero, Color(100.00, 100.00, 100.00), StringExternal("Param/Value/22D35B22"), "Assets\\Textures\\btn-ability-protoss-phaseshift2.dds");
    gf_MatrixCreateCheckbox(lv__itemHEIGHT, lv__itemHEIGHT, 12, lv__intA, c_gameCatalogValidator, ge_Alphanumeric_Zero, ge_MatrixOptions_OnlyforP1, null, null, null, false);
    gf_MatrixCreateCheckbox(lv__itemHEIGHT, lv__itemHEIGHT, 13, lv__intA, c_gameCatalogValidator, ge_Alphanumeric_Zero, ge_MatrixOptions_OnlyforP1, null, null, null, false);
    lv__intA += 1;
    gf_MatrixCreateLabel(lv__itemWIDTH, lv__itemHEIGHT, 1, lv__intA, c_gameCatalogValidator, ge_Alphanumeric_Zero, Color(100.00, 100.00, 100.00), StringExternal("Param/Value/FFEE918B"), "Assets\\Textures\\btn-ability-protoss-envision.dds");
    gf_MatrixCreateCheckbox(lv__itemHEIGHT, lv__itemHEIGHT, 12, lv__intA, c_gameCatalogValidator, ge_Alphanumeric_Zero, ge_MatrixOptions_OnlyforP1, null, null, null, false);
    gf_MatrixCreateCheckbox(lv__itemHEIGHT, lv__itemHEIGHT, 13, lv__intA, c_gameCatalogValidator, ge_Alphanumeric_Zero, ge_MatrixOptions_OnlyforP1, null, null, null, false);
    lv__intA += 1;
    gf_MatrixCreateLabel(lv__itemWIDTH, lv__itemHEIGHT, 1, lv__intA, c_gameCatalogValidator, ge_Alphanumeric_Zero, Color(100.00, 100.00, 100.00), StringExternal("Param/Value/8B79BB6D"), "Assets\\Textures\\ui_tipicon_campaign_exp02-focusfire.dds");
    gf_MatrixCreateCheckbox(lv__itemHEIGHT, lv__itemHEIGHT, 12, lv__intA, c_gameCatalogValidator, ge_Alphanumeric_Zero, ge_MatrixOptions_OnlyforP1, null, null, null, false);
    gf_MatrixCreateCheckbox(lv__itemHEIGHT, lv__itemHEIGHT, 13, lv__intA, c_gameCatalogValidator, ge_Alphanumeric_Zero, ge_MatrixOptions_OnlyforP1, null, null, null, false);
    gf_MatrixCreate(c_gameCatalogValidator, ge_Alphanumeric_Alpha, 200, lv__itemHEIGHT, 2, 10, 450, 280, c_anchorBottomRight, ge_MatrixBackground_LeafFrame, ge_MatrixOptions_HideButtonDialog | ge_MatrixOptions_OnlyforP1);
    gf_MatrixCreateLabel(340, 50, 0, 1, c_gameCatalogValidator, ge_Alphanumeric_Alpha, Color(100.00, 100.00, 100.00), StringExternal("Param/Value/01FF3337"), "Assets\\Textures\\075.dds");
    gf_MatrixCreateLabel(lv__itemWIDTH, lv__itemHEIGHT, 1, 2, c_gameCatalogValidator, ge_Alphanumeric_Alpha, Color(100.00, 100.00, 100.00), StringExternal("Param/Value/C432A4CE"), "Assets\\Textures\\ui_tipicon_campaign_space01-repair.dds");
    gf_MatrixCreateLabel(lv__itemHEIGHT, lv__itemHEIGHT, 12, 2, c_gameCatalogValidator, ge_Alphanumeric_Alpha, Color(100.00, 100.00, 100.00), StringToText(""), "Assets\\Textures\\ui_charbaricons_zerg_individual.dds");
    gf_MatrixCreateLabel(lv__itemHEIGHT, lv__itemHEIGHT, 13, 2, c_gameCatalogValidator, ge_Alphanumeric_Alpha, Color(100.00, 100.00, 100.00), StringToText(""), "Assets\\Textures\\ui_chatbaricons_protoss_individual.dds");
    lv__intA = 3;
    gf_MatrixCreateLabel(lv__itemWIDTH, lv__itemHEIGHT, 1, lv__intA, c_gameCatalogValidator, ge_Alphanumeric_Alpha, Color(100.00, 100.00, 100.00), StringExternal("Param/Value/A5EC3DD7"), "Assets\\Textures\\icon-energy-nobg.dds");
    gf_MatrixCreateCheckbox(lv__itemHEIGHT, lv__itemHEIGHT, 12, lv__intA, c_gameCatalogValidator, ge_Alphanumeric_Alpha, ge_MatrixOptions_OnlyforP1, null, null, null, true);
    gf_MatrixCreateCheckbox(lv__itemHEIGHT, lv__itemHEIGHT, 13, lv__intA, c_gameCatalogValidator, ge_Alphanumeric_Alpha, ge_MatrixOptions_OnlyforP1, null, null, null, true);
    lv__intA += 1;
    gf_MatrixCreateLabel(lv__itemWIDTH, lv__itemHEIGHT, 1, lv__intA, c_gameCatalogValidator, ge_Alphanumeric_Alpha, Color(100.00, 100.00, 100.00), StringExternal("Param/Value/59DDCEBA"), "Assets\\Textures\\ui-editoricon-previewer_timeline_infinite.dds");
    gf_MatrixCreateCheckbox(lv__itemHEIGHT, lv__itemHEIGHT, 12, lv__intA, c_gameCatalogValidator, ge_Alphanumeric_Alpha, ge_MatrixOptions_OnlyforP1, null, null, null, true);
    gf_MatrixCreateCheckbox(lv__itemHEIGHT, lv__itemHEIGHT, 13, lv__intA, c_gameCatalogValidator, ge_Alphanumeric_Alpha, ge_MatrixOptions_OnlyforP1, null, null, null, true);
    lv__intA += 1;
    gf_MatrixCreateLabel(lv__itemWIDTH, lv__itemHEIGHT, 1, lv__intA, c_gameCatalogValidator, ge_Alphanumeric_Alpha, Color(100.00, 100.00, 100.00), StringExternal("Param/Value/EE62D225"), "Assets\\Textures\\ui_waiting_observericon.dds");
    gf_MatrixCreateCheckbox(lv__itemHEIGHT, lv__itemHEIGHT, 12, lv__intA, c_gameCatalogValidator, ge_Alphanumeric_Alpha, ge_MatrixOptions_OnlyforP1, null, null, null, false);
    gf_MatrixCreateCheckbox(lv__itemHEIGHT, lv__itemHEIGHT, 13, lv__intA, c_gameCatalogValidator, ge_Alphanumeric_Alpha, ge_MatrixOptions_OnlyforP1, null, null, null, false);
    lv__intA += 1;
    gf_MatrixCreateLabel(lv__itemWIDTH, lv__itemHEIGHT, 1, lv__intA, c_gameCatalogValidator, ge_Alphanumeric_Alpha, Color(100.00, 100.00, 100.00), StringExternal("Param/Value/0C7FF1FB"), "Assets\\Textures\\btn-ability-protoss-blink-color.dds");
    gf_MatrixCreateCheckbox(lv__itemHEIGHT, lv__itemHEIGHT, 12, lv__intA, c_gameCatalogValidator, ge_Alphanumeric_Alpha, ge_MatrixOptions_OnlyforP1, null, null, null, true);
    gf_MatrixCreateCheckbox(lv__itemHEIGHT, lv__itemHEIGHT, 13, lv__intA, c_gameCatalogValidator, ge_Alphanumeric_Alpha, ge_MatrixOptions_OnlyforP1, null, null, null, true);
    lv__intA += 1;
    gf_MatrixCreateLabel(lv__itemWIDTH, lv__itemHEIGHT, 1, lv__intA, c_gameCatalogValidator, ge_Alphanumeric_Alpha, Color(100.00, 100.00, 100.00), StringExternal("Param/Value/FA9FDFF9"), "Assets\\Textures\\btn-ability-terran-calldownextrasupplies-color.dds");
    gf_MatrixCreateCheckbox(lv__itemHEIGHT, lv__itemHEIGHT, 12, lv__intA, c_gameCatalogValidator, ge_Alphanumeric_Alpha, ge_MatrixOptions_OnlyforP1, null, null, null, true);
    gf_MatrixCreateCheckbox(lv__itemHEIGHT, lv__itemHEIGHT, 13, lv__intA, c_gameCatalogValidator, ge_Alphanumeric_Alpha, ge_MatrixOptions_OnlyforP1, null, null, null, true);
    lv__intA += 1;
    gf_MatrixCreateLabel(lv__itemWIDTH, lv__itemHEIGHT, 1, lv__intA, c_gameCatalogValidator, ge_Alphanumeric_Alpha, Color(100.00, 100.00, 100.00), StringExternal("Param/Value/C3E91978"), "Assets\\Textures\\btn-ability-protoss-phaseshift2.dds");
    gf_MatrixCreateCheckbox(lv__itemHEIGHT, lv__itemHEIGHT, 12, lv__intA, c_gameCatalogValidator, ge_Alphanumeric_Alpha, ge_MatrixOptions_OnlyforP1, null, null, null, true);
    gf_MatrixCreateCheckbox(lv__itemHEIGHT, lv__itemHEIGHT, 13, lv__intA, c_gameCatalogValidator, ge_Alphanumeric_Alpha, ge_MatrixOptions_OnlyforP1, null, null, null, true);
    lv__intA += 1;
    gf_MatrixCreateLabel(lv__itemWIDTH, lv__itemHEIGHT, 1, lv__intA, c_gameCatalogValidator, ge_Alphanumeric_Alpha, Color(100.00, 100.00, 100.00), StringExternal("Param/Value/E2C6A506"), "Assets\\Textures\\btn-ability-terran-warpjump.dds");
    gf_MatrixCreateCheckbox(lv__itemHEIGHT, lv__itemHEIGHT, 12, lv__intA, c_gameCatalogValidator, ge_Alphanumeric_Alpha, ge_MatrixOptions_OnlyforP1, null, null, null, true);
    gf_MatrixCreateCheckbox(lv__itemHEIGHT, lv__itemHEIGHT, 13, lv__intA, c_gameCatalogValidator, ge_Alphanumeric_Alpha, ge_MatrixOptions_OnlyforP1, null, null, null, true);
    lv__intA += 1;
    gf_MatrixCreateLabel(lv__itemWIDTH, lv__itemHEIGHT, 1, lv__intA, c_gameCatalogValidator, ge_Alphanumeric_Alpha, Color(100.00, 100.00, 100.00), StringExternal("Param/Value/6879D188"), "Assets\\Textures\\ui_tipicon_campaign_exp02-focusfire.dds");
    gf_MatrixCreateCheckbox(lv__itemHEIGHT, lv__itemHEIGHT, 12, lv__intA, c_gameCatalogValidator, ge_Alphanumeric_Alpha, ge_MatrixOptions_OnlyforP1, null, null, null, true);
    gf_MatrixCreateCheckbox(lv__itemHEIGHT, lv__itemHEIGHT, 13, lv__intA, c_gameCatalogValidator, ge_Alphanumeric_Alpha, ge_MatrixOptions_OnlyforP1, null, null, null, true);
}

void gf_SettingsTrigger () {
    // Automatic Variable Declarations
    // Implementation
    if ((EventDialogControl() == gv_matrixITEMDialogState[1][c_gameCatalogValidator][ge_Alphanumeric_Delta])) {
        if ((gv_stageBATTLE == true)) {
            DialogSetVisible(gv_mATRIXState[c_gameCatalogValidator][ge_Alphanumeric_Zero], PlayerGroupSingle(EventPlayer()), true);
        }
        else {
            DialogSetVisible(gv_mATRIXState[c_gameCatalogValidator][ge_Alphanumeric_Alpha], PlayerGroupSingle(EventPlayer()), true);
        }
        DialogControlSetVisible(gv_matrixITEMDialogState[1][c_gameCatalogValidator][ge_Alphanumeric_Delta], PlayerGroupSingle(EventPlayer()), false);
        DialogControlSetVisible(gv_matrixITEMimageDialogState[1][c_gameCatalogValidator][ge_Alphanumeric_Delta], PlayerGroupSingle(EventPlayer()), false);
    }
    else {
        if ((EventDialogControl() == gv_matrixITEMDialogState[0][c_gameCatalogValidator][ge_Alphanumeric_Delta])) {
            DialogSetVisible(gv_mATRIXState[c_gameCatalogValidator][ge_Alphanumeric_Zero], PlayerGroupSingle(EventPlayer()), false);
            DialogSetVisible(gv_mATRIXState[c_gameCatalogValidator][ge_Alphanumeric_Alpha], PlayerGroupSingle(EventPlayer()), false);
            DialogControlSetVisible(gv_matrixITEMDialogState[1][c_gameCatalogValidator][ge_Alphanumeric_Delta], PlayerGroupSingle(EventPlayer()), true);
            DialogControlSetVisible(gv_matrixITEMimageDialogState[1][c_gameCatalogValidator][ge_Alphanumeric_Delta], PlayerGroupSingle(EventPlayer()), true);
        }

    }
}

void gf_SettingsPreset () {
    // Automatic Variable Declarations
    // Implementation
    TechTreeRequirementsEnable(13, false);
    TechTreeRequirementsEnable(14, false);
}

bool gf_SettingsOptionEnabled (int lp_number, int lp_master, int lp_slave) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_slave != 0)) {
        if ((gv_stageBATTLE == true)) {
            return libNtve_gf_DialogItemIsChecked(gv_matrixITEMDialogState[(((lp_number * 3) + (lp_slave - 13)) + 2)][c_gameCatalogValidator][ge_Alphanumeric_Zero], lp_master);
        }
        else {
            return libNtve_gf_DialogItemIsChecked(gv_matrixITEMDialogState[(((lp_number * 3) + (lp_slave - 13)) + 2)][c_gameCatalogValidator][ge_Alphanumeric_Alpha], lp_master);
        }
    }
    else {
        return false;
    }
}

void gf_SettingsMenuApplyOmni () {
    // Automatic Variable Declarations
}

void gf_SettingsMenu3SuppressCollision () {
    // Automatic Variable Declarations
    unitgroup auto3CB6E545_g;
    int auto3CB6E545_u;
    unit auto3CB6E545_var;
    unitgroup auto08D7AC8A_g;
    int auto08D7AC8A_u;
    unit auto08D7AC8A_var;
    unitgroup auto2673A40E_g;
    int auto2673A40E_u;
    unit auto2673A40E_var;
    unitgroup autoC813D123_g;
    int autoC813D123_u;
    unit autoC813D123_var;

    // Implementation
    if ((gv_stageBATTLE == false)) {
        if ((gf_SettingsOptionEnabled(3, 1, 13) == true)) {
            auto08D7AC8A_g = UnitGroup(null, 13, RegionEntireMap(), UnitFilter(0, 0, 0, 0), 0);
            auto08D7AC8A_u = UnitGroupCount(auto08D7AC8A_g, c_unitCountAll);
            for (;; auto08D7AC8A_u -= 1) {
                auto08D7AC8A_var = UnitGroupUnitFromEnd(auto08D7AC8A_g, auto08D7AC8A_u);
                if (auto08D7AC8A_var == null) { break; }
                UnitBehaviorAdd(auto08D7AC8A_var, "SuppressCollision", auto08D7AC8A_var, 1);
            }
        }
        else {
            auto3CB6E545_g = UnitGroup(null, 13, RegionEntireMap(), UnitFilter(0, 0, 0, 0), 0);
            auto3CB6E545_u = UnitGroupCount(auto3CB6E545_g, c_unitCountAll);
            for (;; auto3CB6E545_u -= 1) {
                auto3CB6E545_var = UnitGroupUnitFromEnd(auto3CB6E545_g, auto3CB6E545_u);
                if (auto3CB6E545_var == null) { break; }
                UnitBehaviorRemove(auto3CB6E545_var, "SuppressCollision", 1);
            }
        }
        if ((gf_SettingsOptionEnabled(3, 1, 14) == true)) {
            autoC813D123_g = UnitGroup(null, 14, RegionEntireMap(), UnitFilter(0, 0, 0, 0), 0);
            autoC813D123_u = UnitGroupCount(autoC813D123_g, c_unitCountAll);
            for (;; autoC813D123_u -= 1) {
                autoC813D123_var = UnitGroupUnitFromEnd(autoC813D123_g, autoC813D123_u);
                if (autoC813D123_var == null) { break; }
                UnitBehaviorAdd(autoC813D123_var, "SuppressCollision", autoC813D123_var, 1);
            }
        }
        else {
            auto2673A40E_g = UnitGroup(null, 14, RegionEntireMap(), UnitFilter(0, 0, 0, 0), 0);
            auto2673A40E_u = UnitGroupCount(auto2673A40E_g, c_unitCountAll);
            for (;; auto2673A40E_u -= 1) {
                auto2673A40E_var = UnitGroupUnitFromEnd(auto2673A40E_g, auto2673A40E_u);
                if (auto2673A40E_var == null) { break; }
                UnitBehaviorRemove(auto2673A40E_var, "SuppressCollision", 1);
            }
        }
    }

}

void gf_SettingsMenu4AdjustNeutral () {
    // Automatic Variable Declarations
    // Implementation
    if ((gv_stageBATTLE == false)) {
        if ((gf_SettingsOptionEnabled(4, 1, 13) == true)) {
            libNtve_gf_SetAllianceOneWay(13, 14, libNtve_ge_AllianceSetting_NeutralWithSharedVision);
        }
        else {
            libNtve_gf_SetAllianceOneWay(13, 14, libNtve_ge_AllianceSetting_Enemy);
        }
        if ((gf_SettingsOptionEnabled(4, 1, 14) == true)) {
            libNtve_gf_SetAllianceOneWay(14, 13, libNtve_ge_AllianceSetting_NeutralWithSharedVision);
        }
        else {
            libNtve_gf_SetAllianceOneWay(14, 13, libNtve_ge_AllianceSetting_Enemy);
        }
    }

}

void gf_SettingsMenu4SetAggressors () {
    // Automatic Variable Declarations
    // Implementation
    if ((gf_SettingsOptionEnabled(4, 1, 13) == true)) {
        PlayerGroupAdd(gv_playerGroupAGGRESSOR, 13);
    }
    else {
        PlayerGroupRemove(gv_playerGroupAGGRESSOR, 13);
    }
    if ((gf_SettingsOptionEnabled(4, 1, 14) == true)) {
        PlayerGroupAdd(gv_playerGroupAGGRESSOR, 14);
    }
    else {
        PlayerGroupRemove(gv_playerGroupAGGRESSOR, 14);
    }
}

void gf_SettingsMenu7AdjustVision () {
    // Automatic Variable Declarations
    // Implementation
    if ((gv_stageBATTLE == true)) {
        if ((gf_SettingsOptionEnabled(7, 1, 13) == true)) {
            libNtve_gf_SetAllianceOneWay(13, 14, libNtve_ge_AllianceSetting_EnemyWithSharedVision);
        }
        else {
            libNtve_gf_SetAllianceOneWay(13, 14, libNtve_ge_AllianceSetting_Enemy);
        }
        if ((gf_SettingsOptionEnabled(7, 1, 14) == true)) {
            libNtve_gf_SetAllianceOneWay(14, 13, libNtve_ge_AllianceSetting_EnemyWithSharedVision);
        }
        else {
            libNtve_gf_SetAllianceOneWay(14, 13, libNtve_ge_AllianceSetting_Enemy);
        }
    }

}

void gf_SettingsMenu6AdjustRequirements (int lp_master) {
    // Automatic Variable Declarations
    // Implementation
    if ((gf_SettingsOptionEnabled(6, lp_master, 13) == true)) {
        TechTreeRequirementsEnable(13, false);
    }
    else {
        TechTreeRequirementsEnable(13, true);
    }
    if ((gf_SettingsOptionEnabled(6, lp_master, 14) == true)) {
        TechTreeRequirementsEnable(14, false);
    }
    else {
        TechTreeRequirementsEnable(14, true);
    }
}

void gf_SettingsMenu8AdjustAttack (int lp_master) {
    // Variable Declarations
    bool lv__option;
    int lv__player;

    // Automatic Variable Declarations
    // Variable Initialization
    lv__option = true;

    // Implementation
    lv__player = 13;
    if ((gf_SettingsOptionEnabled(8, lp_master, lv__player) == true)) {
        lv__option = false;
        TechTreeAbilityAllow(lv__player, AbilityCommand("attack", 0), lv__option);
        TechTreeAbilityAllow(lv__player, AbilityCommand("attackProtossBuilding", 0), lv__option);
        TechTreeAbilityAllow(lv__player, AbilityCommand("AttackRedirect", 0), lv__option);
        TechTreeAbilityAllow(lv__player, AbilityCommand("AttackWarpPrism", 0), lv__option);
        TechTreeAbilityAllow(lv__player, AbilityCommand("WidowMineAttack", 0), lv__option);
    }
    else {
        lv__option = true;
        TechTreeAbilityAllow(lv__player, AbilityCommand("attack", 0), lv__option);
        TechTreeAbilityAllow(lv__player, AbilityCommand("attackProtossBuilding", 0), lv__option);
        TechTreeAbilityAllow(lv__player, AbilityCommand("AttackRedirect", 0), lv__option);
        TechTreeAbilityAllow(lv__player, AbilityCommand("AttackWarpPrism", 0), lv__option);
        TechTreeAbilityAllow(lv__player, AbilityCommand("WidowMineAttack", 0), lv__option);
    }
    lv__player = 14;
    if ((gf_SettingsOptionEnabled(8, lp_master, lv__player) == true)) {
        lv__option = false;
        TechTreeAbilityAllow(lv__player, AbilityCommand("attack", 0), lv__option);
        TechTreeAbilityAllow(lv__player, AbilityCommand("attackProtossBuilding", 0), lv__option);
        TechTreeAbilityAllow(lv__player, AbilityCommand("AttackRedirect", 0), lv__option);
        TechTreeAbilityAllow(lv__player, AbilityCommand("AttackWarpPrism", 0), lv__option);
        TechTreeAbilityAllow(lv__player, AbilityCommand("WidowMineAttack", 0), lv__option);
    }
    else {
        lv__option = true;
        TechTreeAbilityAllow(lv__player, AbilityCommand("attack", 0), lv__option);
        TechTreeAbilityAllow(lv__player, AbilityCommand("attackProtossBuilding", 0), lv__option);
        TechTreeAbilityAllow(lv__player, AbilityCommand("AttackRedirect", 0), lv__option);
        TechTreeAbilityAllow(lv__player, AbilityCommand("AttackWarpPrism", 0), lv__option);
        TechTreeAbilityAllow(lv__player, AbilityCommand("WidowMineAttack", 0), lv__option);
    }
}

void gf_TimerCreate () {
    // Automatic Variable Declarations
    // Implementation
    TimerWindowCreate(gv_timer_battle, StringExternal("Param/Value/7C478DE0"), true, true);
    TimerWindowSetAnchor(TimerWindowLastCreated(), c_anchorBottomLeft, 295, 175);
    TimerWindowShowBorder(TimerWindowLastCreated(), false);
}

void gf_StorageDialogCreate () {
    // Variable Declarations
    int lv__row;
    int lv__column;

    // Automatic Variable Declarations
    const int auto9063054B_ae = 3;
    const int auto9063054B_ai = 1;
    const int autoE5BD8702_ae = 3;
    const int autoE5BD8702_ai = 1;

    // Variable Initialization
    lv__row = 1;
    lv__column = 1;

    // Implementation
    gf_StorageDialogPreload();
    gf_MatrixCreate(c_gameCatalogBankCondition, ge_Alphanumeric_Zero, 150, 150, 3, 3, 25, -185, c_anchorBottomLeft, ge_MatrixBackground_None, ge_MatrixOptions_HideButtonDialog | ge_MatrixOptions_OnlyforP1);
    gf_MatrixCreateButton(10, 10, lv__column, lv__row, c_gameCatalogBankCondition, ge_Alphanumeric_Zero, ge_MatrixOptions_HideButtonDialog | ge_MatrixOptions_HideImage | ge_MatrixOptions_OnlyforP1, "Assets\\Textures\\075.dds", StringToText(""), StringToText(""));
    lv__row = 1;
    for ( ; ( (auto9063054B_ai >= 0 && lv__row <= auto9063054B_ae) || (auto9063054B_ai < 0 && lv__row >= auto9063054B_ae) ) ; lv__row += auto9063054B_ai ) {
        lv__column = 1;
        for ( ; ( (autoE5BD8702_ai >= 0 && lv__column <= autoE5BD8702_ae) || (autoE5BD8702_ai < 0 && lv__column >= autoE5BD8702_ae) ) ; lv__column += autoE5BD8702_ai ) {
            if ((gv_storageDialog_empty[(lv__column + (3 * (lv__row - 1)))] == true)) {
                gf_MatrixCreateButton(80, 80, lv__column, lv__row, c_gameCatalogBankCondition, ge_Alphanumeric_Zero, ge_MatrixOptions_OnlyforP1, "Assets\\Textures\\ui-editoricon-general_save.dds", (StringExternal("Param/Value/CF28A5BB") + IntToText((lv__column + (3 * (lv__row - 1))))), StringExternal("Param/Value/51D39E2E"));
            }
            else {
                gf_MatrixCreateButton(80, 80, lv__column, lv__row, c_gameCatalogBankCondition, ge_Alphanumeric_Zero, ge_MatrixOptions_HideImage | ge_MatrixOptions_OnlyforP1, "Assets\\Textures\\ui-editoricon-general_save.dds", (StringExternal("Param/Value/6A14014D") + IntToText((lv__column + (3 * (lv__row - 1))))), StringExternal("Param/Value/101392C3"));
            }
        }
    }
    gf_MatrixCreate(c_gameCatalogBankCondition, ge_Alphanumeric_Alpha, 60, 60, 1, 1, 325, 0, c_anchorBottomLeft, ge_MatrixBackground_None, ge_MatrixOptions_OnlyforP1);
    gf_MatrixCreateButton(60, 60, 1, 1, c_gameCatalogBankCondition, ge_Alphanumeric_Alpha, ge_MatrixOptions_OnlyforP1, "Assets\\Textures\\ui-editoricon-general_open.dds", StringToText(""), StringExternal("Param/Value/53DD120E"));
}

void gf_StorageDialogTrigger () {
    // Variable Declarations
    int lv__intA;

    // Automatic Variable Declarations
    const int auto7A7CB936_ae = 9;
    const int auto7A7CB936_ai = 1;

    // Variable Initialization

    // Implementation
    if ((EventDialogControl() == gv_matrixITEMDialogState[0][c_gameCatalogBankCondition][ge_Alphanumeric_Alpha])) {
        if ((DialogIsVisible(gv_mATRIXState[c_gameCatalogBankCondition][ge_Alphanumeric_Zero], EventPlayer()) == false)) {
            libNtve_gf_SetDialogItemImage(gv_matrixITEMimageDialogState[0][c_gameCatalogBankCondition][ge_Alphanumeric_Alpha], "Assets\\Textures\\ui_ingame_pingmenu_closebtnup.dds", PlayerGroupAll());
            DialogSetVisible(gv_mATRIXState[c_gameCatalogBankCondition][ge_Alphanumeric_Zero], PlayerGroupSingle(EventPlayer()), true);
        }
        else {
            libNtve_gf_SetDialogItemImage(gv_matrixITEMimageDialogState[0][c_gameCatalogBankCondition][ge_Alphanumeric_Alpha], "Assets\\Textures\\ui-editoricon-general_open.dds", PlayerGroupAll());
            DialogSetVisible(gv_mATRIXState[c_gameCatalogBankCondition][ge_Alphanumeric_Zero], PlayerGroupSingle(EventPlayer()), false);
        }
    }

    lv__intA = 1;
    for ( ; ( (auto7A7CB936_ai >= 0 && lv__intA <= auto7A7CB936_ae) || (auto7A7CB936_ai < 0 && lv__intA >= auto7A7CB936_ae) ) ; lv__intA += auto7A7CB936_ai ) {
        if ((EventDialogControl() == gv_matrixITEMDialogState[lv__intA][c_gameCatalogBankCondition][ge_Alphanumeric_Zero])) {
            if ((gv_controlDOWN == true)) {
                gf_StorageDialogDeleteSlot("StarBox", lv__intA, EventPlayer());
                DialogControlSetVisible(gv_matrixITEMimageDialogState[lv__intA][c_gameCatalogBankCondition][ge_Alphanumeric_Zero], PlayerGroupAll(), true);
            }
            else {
                if ((gv_storageDialog_empty[lv__intA] == true)) {
                    gf_StoreAllUnits(lv__intA, EventPlayer());
                    DialogControlSetVisible(gv_matrixITEMimageDialogState[lv__intA][c_gameCatalogBankCondition][ge_Alphanumeric_Zero], PlayerGroupAll(), false);
                    gv_storageDialog_empty[lv__intA] = false;
                }
                else {
                    gf_RestoreAllUnitGroups(lv__intA, EventPlayer());
                }
            }
        }

    }
}

void gf_StorageDialogPreload () {
    // Variable Declarations
    int lv__owner;
    int lv__bankNumber;
    int lv__totalUnits;
    string lv__SECTION;
    string lv__SECTION_OWNER;
    bool[15] lv__ownerExists;

    // Automatic Variable Declarations
    playergroup auto090D6E57_g;
    int auto090D6E57_var;
    const int autoC22894C4_ae = 9;
    const int autoC22894C4_ai = 1;
    const int autoC33B59A1_ae = 14;
    const int autoC33B59A1_ai = 1;
    const int auto88B6C3F9_ae = 9;
    const int auto88B6C3F9_ai = 1;
    const int auto27987A09_ae = 14;
    const int auto27987A09_ai = 1;

    // Variable Initialization

    // Implementation
    auto090D6E57_g = PlayerGroupSingle(1);
    auto090D6E57_var = -1;
    while (true) {
        auto090D6E57_var = PlayerGroupNextPlayer(auto090D6E57_g, auto090D6E57_var);
        if (auto090D6E57_var < 0) { break; }
        if ((BankExists("StarBox", auto090D6E57_var) == true)) {
            BankLoad("StarBox", auto090D6E57_var);
            lv__bankNumber = 1;
            for ( ; ( (autoC22894C4_ai >= 0 && lv__bankNumber <= autoC22894C4_ae) || (autoC22894C4_ai < 0 && lv__bankNumber >= autoC22894C4_ae) ) ; lv__bankNumber += autoC22894C4_ai ) {
                lv__SECTION = ("Bank" + IntToString(lv__bankNumber));
                lv__owner = 13;
                for ( ; ( (autoC33B59A1_ai >= 0 && lv__owner <= autoC33B59A1_ae) || (autoC33B59A1_ai < 0 && lv__owner >= autoC33B59A1_ae) ) ; lv__owner += autoC33B59A1_ai ) {
                    lv__SECTION_OWNER = (lv__SECTION + ("Owner" + IntToString(lv__owner)));
                    lv__totalUnits = BankValueGetAsInt(BankLastCreated(), lv__SECTION_OWNER, "TotalUnits");
                    if ((lv__totalUnits > -1)) {
                        lv__ownerExists[lv__owner] = true;
                    }
                    else {
                        lv__ownerExists[lv__owner] = false;
                    }
                }
                if (((lv__ownerExists[13] == true) || (lv__ownerExists[14] == true))) {
                    gv_storageDialog_empty[lv__bankNumber] = false;
                }
                else {
                    gv_storageDialog_empty[lv__bankNumber] = true;
                }
            }
        }
        else {
            BankLoad("StarBox", auto090D6E57_var);
            lv__bankNumber = 1;
            for ( ; ( (auto88B6C3F9_ai >= 0 && lv__bankNumber <= auto88B6C3F9_ae) || (auto88B6C3F9_ai < 0 && lv__bankNumber >= auto88B6C3F9_ae) ) ; lv__bankNumber += auto88B6C3F9_ai ) {
                lv__SECTION = ("Bank" + IntToString(lv__bankNumber));
                lv__owner = 13;
                for ( ; ( (auto27987A09_ai >= 0 && lv__owner <= auto27987A09_ae) || (auto27987A09_ai < 0 && lv__owner >= auto27987A09_ae) ) ; lv__owner += auto27987A09_ai ) {
                    lv__SECTION_OWNER = (("Bank" + IntToString(lv__bankNumber)) + ("Owner" + IntToString(lv__owner)));
                    BankValueSetFromInt(BankLastCreated(), lv__SECTION_OWNER, "TotalUnits", -1);
                }
                gv_storageDialog_empty[lv__bankNumber] = true;
            }
        }
        BankSave(BankLastCreated());
    }
}

void gf_StorageDialogDeleteSlot (string lp_bankName, int lp_bankNumber, int lp_playerNumber) {
    // Variable Declarations
    string lv__SECTION;
    string lv__SECTION_OWNER_13;
    string lv__SECTION_OWNER_14;

    // Automatic Variable Declarations
    // Variable Initialization
    lv__SECTION = ("Bank" + IntToString(lp_bankNumber));
    lv__SECTION_OWNER_13 = (lv__SECTION + ("Owner" + IntToString(13)));
    lv__SECTION_OWNER_14 = (lv__SECTION + ("Owner" + IntToString(14)));

    // Implementation
    gv_storageDialog_empty[lp_bankNumber] = true;
    BankLoad(lp_bankName, lp_playerNumber);
    BankValueSetFromInt(BankLastCreated(), lv__SECTION_OWNER_13, "TotalUnits", -1);
    BankValueSetFromInt(BankLastCreated(), lv__SECTION_OWNER_14, "TotalUnits", -1);
    BankSave(BankLastCreated());
}

void gf_DebugMessage (text lp_message) {
    // Automatic Variable Declarations
    // Implementation
    if ((gv_debug == true)) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaDebug, (StringExternal("Param/Value/7B89D4D9") + lp_message));
    }

}

void gf_MatrixCreate (int lp_dialog, int lp_dialogState, int lp_buttonWidth, int lp_buttonHeight, int lp_columns, int lp_rows, int lp_x, int lp_y, int lp_anchor, int lp_background, int lp_options) {
    // Variable Declarations
    int lv__BORDER;
    int lv__btnBORDER_WIDTH;
    int lv__btnBORDER_HEIGHT;
    int lv__dialogWIDTH;
    int lv__dialogHEIGHT;

    // Automatic Variable Declarations
    int auto5B6607B1_val;

    // Variable Initialization
    lv__BORDER = 12;
    lv__btnBORDER_WIDTH = TruncI((gf_PercentofReal(lp_buttonWidth, 5.0) / 1.0));
    lv__btnBORDER_HEIGHT = TruncI((gf_PercentofReal(lp_buttonHeight, 5.0) / 1.0));

    // Implementation
    lv__dialogWIDTH = (((lp_buttonWidth + lv__btnBORDER_WIDTH) * lp_columns) + (lv__BORDER * 2));
    lv__dialogHEIGHT = (((lp_buttonHeight + lv__btnBORDER_HEIGHT) * lp_rows) + (lv__BORDER * 2));
    DialogCreate(lv__dialogWIDTH, lv__dialogHEIGHT, lp_anchor, lp_x, lp_y, true);
    if (gf_PresetFlagsCheck((lp_options), 10, 1)) {
        DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), false);
    }
    else {
        if (gf_PresetFlagsCheck((lp_options), 10, 4)) {
            DialogSetVisible(DialogLastCreated(), PlayerGroupSingle(1), true);
        }
        else {
            DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), true);
        }
        DialogSetVisible(DialogLastCreated(), PlayerGroupSingle(1), true);
    }
    auto5B6607B1_val = lp_background;
    if (auto5B6607B1_val == ge_MatrixBackground_None) {
        DialogSetImageVisible(DialogLastCreated(), false);
    }
    else if (auto5B6607B1_val == ge_MatrixBackground_LeafFrame) {
        DialogSetImageVisible(DialogLastCreated(), false);
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv__dialogWIDTH - 20), (lv__dialogHEIGHT - 20), c_anchorTopLeft, 10, 10, StringToText(""), "Assets\\Textures\\ui_mission_frame_massege.dds", c_triggerImageTypeBorder, true, Color(100,100,100), c_triggerBlendModeNormal);
    }
    else if (auto5B6607B1_val == ge_MatrixBackground_Unused) {
        DialogSetImageVisible(DialogLastCreated(), false);
        DialogSetImage(DialogLastCreated(), "Assets\\Textures\\aircraftelevator_diffuse.dds");
        libNtve_gf_CreateDialogItemImage(DialogLastCreated(), (lv__dialogWIDTH - 20), (lv__dialogHEIGHT - 20), c_anchorTopLeft, 10, 10, StringToText(""), "Assets\\Textures\\ui_battle_frame_movietitlebox.dds", c_triggerImageTypeBorder, true, Color(100,100,100), c_triggerBlendModeNormal);
    }
    else {
    }
    gv_mATRIXState[(lp_dialog)][(lp_dialogState)] = DialogLastCreated();
}

void gf_MatrixCreateButton (int lp_buttonWidth, int lp_buttonHeight, int lp_column, int lp_row, int lp_dialog, int lp_dialogState, int lp_options, string lp_buttonImage, text lp_title, text lp_tooltip) {
    // Variable Declarations
    int lv__DIALOG;
    int lv__BORDER;
    int lv__btnBORDER_WIDTH;
    int lv__btnBORDER_HEIGHT;
    int lv__dialogWIDTH_INNER;
    int lv__dialogHEIGHT_INNER;
    int lv__COLUMNS;
    int lv__ROWS;
    int lv__btnINNER_TOTAL_WIDTH;
    int lv__btnINNER_TOTAL_HEIGHT;
    int lv__voidWIDTH;
    int lv__voidWIDTH_BTN;
    int lv__voidHEIGHT;
    int lv__voidHEIGHT_BTN;
    int lv__btnOFFSETx;
    int lv__btnOFFSETy;
    int lv__dialog_BTNcount;

    // Automatic Variable Declarations
    int auto7A0FFAE2_val;
    int auto78D32894_val;

    // Variable Initialization
    lv__DIALOG = gv_mATRIXState[(lp_dialog)][(lp_dialogState)];
    lv__BORDER = 12;
    lv__btnBORDER_WIDTH = TruncI(gf_PercentofReal(lp_buttonWidth, 5.0));
    lv__btnBORDER_HEIGHT = TruncI(gf_PercentofReal(lp_buttonHeight, 5.0));
    lv__dialogWIDTH_INNER = FixedToInt((DialogGetWidth(lv__DIALOG) - (2.0 * (lv__BORDER + lp_buttonWidth))));
    lv__dialogHEIGHT_INNER = FixedToInt((DialogGetHeight(lv__DIALOG) - (2.0 * (lv__BORDER + lp_buttonHeight))));
    lv__COLUMNS = TruncI(((DialogGetWidth(lv__DIALOG) - (lv__BORDER * 2)) / (lp_buttonWidth + lv__btnBORDER_WIDTH)));
    lv__ROWS = TruncI(((DialogGetHeight(lv__DIALOG) - (lv__BORDER * 2)) / (lp_buttonHeight + lv__btnBORDER_HEIGHT)));
    lv__dialog_BTNcount = gf_MatrixGetButtonsforRace(lp_dialog, lp_dialogState);

    // Implementation
    if ((lp_column > lv__COLUMNS)) {
        lv__btnOFFSETx = ((DialogGetWidth(lv__DIALOG) - lp_buttonWidth) - lv__BORDER);
    }
    else {
        auto7A0FFAE2_val = lp_column;
        if (auto7A0FFAE2_val == 0) {
            lv__btnOFFSETx = ((DialogGetWidth(lv__DIALOG) - lp_buttonWidth) / 2);
        }
        else if (auto7A0FFAE2_val == 1) {
            lv__btnOFFSETx = lv__BORDER;
        }
        else if (auto7A0FFAE2_val == lv__COLUMNS) {
            lv__btnOFFSETx = ((DialogGetWidth(lv__DIALOG) - lp_buttonWidth) - lv__BORDER);
        }
        else {
            lv__btnINNER_TOTAL_WIDTH = ((lv__COLUMNS - 2) * lp_buttonWidth);
            lv__voidWIDTH = (lv__dialogWIDTH_INNER - lv__btnINNER_TOTAL_WIDTH);
            lv__voidWIDTH_BTN = FixedToInt((lv__voidWIDTH / (lv__COLUMNS - 1)));
            lv__btnOFFSETx = (((lp_buttonWidth + lv__voidWIDTH_BTN) * (lp_column - 1)) + lv__BORDER);
        }
    }
    if ((lp_row > lv__ROWS)) {
        lv__btnOFFSETy = lv__BORDER;
    }
    else {
        auto78D32894_val = lp_row;
        if (auto78D32894_val == 0) {
            lv__btnOFFSETy = ((DialogGetHeight(lv__DIALOG) - lp_buttonHeight) / 2);
        }
        else if (auto78D32894_val == 1) {
            lv__btnOFFSETy = ((DialogGetHeight(lv__DIALOG) - lp_buttonHeight) - lv__BORDER);
        }
        else if (auto78D32894_val == lv__ROWS) {
            lv__btnOFFSETy = lv__BORDER;
        }
        else {
            lv__btnINNER_TOTAL_HEIGHT = ((lv__ROWS - 2) * lp_buttonHeight);
            lv__voidHEIGHT = (lv__dialogHEIGHT_INNER - lv__btnINNER_TOTAL_HEIGHT);
            lv__voidHEIGHT_BTN = FixedToInt((lv__voidHEIGHT / (lv__ROWS - 1)));
            lv__btnOFFSETy = (((lp_buttonHeight + lv__voidHEIGHT_BTN) * (lv__ROWS - lp_row)) + lv__BORDER);
        }
    }
    libNtve_gf_CreateDialogItemButton(lv__DIALOG, lp_buttonWidth, lp_buttonHeight, c_anchorBottomLeft, lv__btnOFFSETx, lv__btnOFFSETy, lp_tooltip, lp_title, "");
    if (gf_PresetFlagsCheck((lp_options), 10, 6)) {
        libNtve_gf_SetDialogItemToggled(DialogControlLastCreated(), true, PlayerGroupAll());
    }

    if (gf_PresetFlagsCheck((lp_options), 10, 8)) {
        DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, 0, 0);
    }

    gv_matrixITEMDialogState[lv__dialog_BTNcount][(lp_dialog)][(lp_dialogState)] = DialogControlLastCreated();
    if (gf_PresetFlagsCheck((lp_options), 10, 1)) {
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    }

    if (((lp_buttonImage != "Assets\\Textures\\075.dds") && (lp_buttonImage != null))) {
        DialogControlCreate(DialogLastCreated(), c_triggerControlTypeImage);
        libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), lp_buttonImage, PlayerGroupAll());
        DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), (lp_buttonWidth - (lv__btnBORDER_WIDTH * 2)), (lp_buttonHeight - (lv__btnBORDER_HEIGHT * 2)));
        if (gf_PresetFlagsCheck((lp_options), 10, 2)) {
            DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
        }

        if (gf_PresetFlagsCheck((lp_options), 10, 3)) {
            libNtve_gf_SetDialogItemDesaturated(DialogControlLastCreated(), true, PlayerGroupAll());
        }

        if (gf_PresetFlagsCheck((lp_options), 10, 5)) {
            gf_MatrixModifyItem(true, lv__dialog_BTNcount, lp_dialog, lp_dialogState);
        }

        DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, gv_matrixITEMDialogState[lv__dialog_BTNcount][(lp_dialog)][(lp_dialogState)], c_anchorCenter, 0, 0);
        gv_matrixITEMimageDialogState[lv__dialog_BTNcount][(lp_dialog)][(lp_dialogState)] = DialogControlLastCreated();
    }

}

void gf_MatrixCreateCheckbox (int lp_buttonWidth, int lp_buttonHeight, int lp_column, int lp_row, int lp_dialog, int lp_dialogState, int lp_options, string lp_buttonImage, text lp_title, text lp_tooltip, bool lp_checked) {
    // Variable Declarations
    int lv__DIALOG;
    int lv__BORDER;
    int lv__btnBORDER_WIDTH;
    int lv__btnBORDER_HEIGHT;
    int lv__dialogWIDTH_INNER;
    int lv__dialogHEIGHT_INNER;
    int lv__COLUMNS;
    int lv__ROWS;
    int lv__btnINNER_TOTAL_WIDTH;
    int lv__btnINNER_TOTAL_HEIGHT;
    int lv__voidWIDTH;
    int lv__voidWIDTH_BTN;
    int lv__voidHEIGHT;
    int lv__voidHEIGHT_BTN;
    int lv__btnOFFSETx;
    int lv__btnOFFSETy;
    int lv__dialog_BTNcount;

    // Automatic Variable Declarations
    int auto8EC955DD_val;
    int auto3CDA8F87_val;

    // Variable Initialization
    lv__DIALOG = gv_mATRIXState[(lp_dialog)][(lp_dialogState)];
    lv__BORDER = 12;
    lv__btnBORDER_WIDTH = TruncI(gf_PercentofReal(lp_buttonWidth, 5.0));
    lv__btnBORDER_HEIGHT = TruncI(gf_PercentofReal(lp_buttonHeight, 5.0));
    lv__dialogWIDTH_INNER = FixedToInt((DialogGetWidth(lv__DIALOG) - (2.0 * (lv__BORDER + lp_buttonWidth))));
    lv__dialogHEIGHT_INNER = FixedToInt((DialogGetHeight(lv__DIALOG) - (2.0 * (lv__BORDER + lp_buttonHeight))));
    lv__COLUMNS = TruncI(((DialogGetWidth(lv__DIALOG) - (lv__BORDER * 2)) / (lp_buttonWidth + lv__btnBORDER_WIDTH)));
    lv__ROWS = TruncI(((DialogGetHeight(lv__DIALOG) - (lv__BORDER * 2)) / (lp_buttonHeight + lv__btnBORDER_HEIGHT)));
    lv__dialog_BTNcount = gf_MatrixGetButtonsforRace(lp_dialog, lp_dialogState);

    // Implementation
    if ((lp_column > lv__COLUMNS)) {
        lv__btnOFFSETx = ((DialogGetWidth(lv__DIALOG) - lp_buttonWidth) - lv__BORDER);
    }
    else {
        auto8EC955DD_val = lp_column;
        if (auto8EC955DD_val == 0) {
            lv__btnOFFSETx = ((DialogGetWidth(lv__DIALOG) - lp_buttonWidth) / 2);
        }
        else if (auto8EC955DD_val == 1) {
            lv__btnOFFSETx = lv__BORDER;
        }
        else if (auto8EC955DD_val == lv__COLUMNS) {
            lv__btnOFFSETx = ((DialogGetWidth(lv__DIALOG) - lp_buttonWidth) - lv__BORDER);
        }
        else {
            lv__btnINNER_TOTAL_WIDTH = ((lv__COLUMNS - 2) * lp_buttonWidth);
            lv__voidWIDTH = (lv__dialogWIDTH_INNER - lv__btnINNER_TOTAL_WIDTH);
            lv__voidWIDTH_BTN = FixedToInt((lv__voidWIDTH / (lv__COLUMNS - 1)));
            lv__btnOFFSETx = (((lp_buttonWidth + lv__voidWIDTH_BTN) * (lp_column - 1)) + lv__BORDER);
        }
    }
    if ((lp_row > lv__ROWS)) {
        lv__btnOFFSETy = lv__BORDER;
    }
    else {
        auto3CDA8F87_val = lp_row;
        if (auto3CDA8F87_val == 0) {
            lv__btnOFFSETy = ((DialogGetHeight(lv__DIALOG) - lp_buttonHeight) / 2);
        }
        else if (auto3CDA8F87_val == 1) {
            lv__btnOFFSETy = ((DialogGetHeight(lv__DIALOG) - lp_buttonHeight) - lv__BORDER);
        }
        else if (auto3CDA8F87_val == lv__ROWS) {
            lv__btnOFFSETy = lv__BORDER;
        }
        else {
            lv__btnINNER_TOTAL_HEIGHT = ((lv__ROWS - 2) * lp_buttonHeight);
            lv__voidHEIGHT = (lv__dialogHEIGHT_INNER - lv__btnINNER_TOTAL_HEIGHT);
            lv__voidHEIGHT_BTN = FixedToInt((lv__voidHEIGHT / (lv__ROWS - 1)));
            lv__btnOFFSETy = (((lp_buttonHeight + lv__voidHEIGHT_BTN) * (lv__ROWS - lp_row)) + lv__BORDER);
        }
    }
    libNtve_gf_CreateDialogItemCheckBox(DialogLastCreated(), lp_buttonWidth, lp_buttonHeight, c_anchorBottomLeft, lv__btnOFFSETx, lv__btnOFFSETy, lp_tooltip, lp_checked);
    if (gf_PresetFlagsCheck((lp_options), 10, 6)) {
        libNtve_gf_SetDialogItemToggled(DialogControlLastCreated(), true, PlayerGroupAll());
    }

    if (gf_PresetFlagsCheck((lp_options), 10, 8)) {
        DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, 0, 0);
    }

    gv_matrixITEMDialogState[lv__dialog_BTNcount][(lp_dialog)][(lp_dialogState)] = DialogControlLastCreated();
    if (gf_PresetFlagsCheck((lp_options), 10, 3)) {
        libNtve_gf_SetDialogItemDesaturated(DialogControlLastCreated(), true, PlayerGroupAll());
    }

    if (gf_PresetFlagsCheck((lp_options), 10, 5)) {
        gf_MatrixModifyItem(true, lv__dialog_BTNcount, lp_dialog, lp_dialogState);
    }

    if (gf_PresetFlagsCheck((lp_options), 10, 1)) {
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    }

}

void gf_MatrixCreateLabel (int lp_buttonWidth, int lp_buttonHeight, int lp_column, int lp_row, int lp_dialog, int lp_dialogState, color lp_color, text lp_text, string lp_buttonImage) {
    // Variable Declarations
    int lv__DIALOG;
    int lv__BORDER;
    int lv__btnBORDER_WIDTH;
    int lv__btnBORDER_HEIGHT;
    int lv__dialogWIDTH_INNER;
    int lv__dialogHEIGHT_INNER;
    int lv__COLUMNS;
    int lv__ROWS;
    int lv__btnINNER_TOTAL_WIDTH;
    int lv__btnINNER_TOTAL_HEIGHT;
    int lv__voidWIDTH;
    int lv__voidWIDTH_BTN;
    int lv__voidHEIGHT;
    int lv__voidHEIGHT_BTN;
    int lv__btnOFFSETx;
    int lv__btnOFFSETy;
    int lv__dialog_BTNcount;

    // Automatic Variable Declarations
    int auto5B82CFF7_val;
    int auto794FDE0D_val;

    // Variable Initialization
    lv__DIALOG = gv_mATRIXState[(lp_dialog)][(lp_dialogState)];
    lv__BORDER = 12;
    lv__btnBORDER_WIDTH = TruncI(gf_PercentofReal(lp_buttonWidth, 5.0));
    lv__btnBORDER_HEIGHT = TruncI(gf_PercentofReal(lp_buttonHeight, 5.0));
    lv__dialogWIDTH_INNER = FixedToInt((DialogGetWidth(lv__DIALOG) - (2.0 * (lv__BORDER + lp_buttonWidth))));
    lv__dialogHEIGHT_INNER = FixedToInt((DialogGetHeight(lv__DIALOG) - (2.0 * (lv__BORDER + lp_buttonHeight))));
    lv__COLUMNS = TruncI(((DialogGetWidth(lv__DIALOG) - (lv__BORDER * 2)) / (lp_buttonWidth + lv__btnBORDER_WIDTH)));
    lv__ROWS = TruncI(((DialogGetHeight(lv__DIALOG) - (lv__BORDER * 2)) / (lp_buttonHeight + lv__btnBORDER_HEIGHT)));
    lv__dialog_BTNcount = gf_MatrixGetButtonsforRace(lp_dialog, lp_dialogState);

    // Implementation
    if ((lp_column > lv__COLUMNS)) {
        lv__btnOFFSETx = ((DialogGetWidth(lv__DIALOG) - lp_buttonWidth) - lv__BORDER);
    }
    else {
        auto5B82CFF7_val = lp_column;
        if (auto5B82CFF7_val == 0) {
            lv__btnOFFSETx = ((DialogGetWidth(lv__DIALOG) - lp_buttonWidth) / 2);
        }
        else if (auto5B82CFF7_val == 1) {
            lv__btnOFFSETx = lv__BORDER;
        }
        else if (auto5B82CFF7_val == lv__COLUMNS) {
            lv__btnOFFSETx = ((DialogGetWidth(lv__DIALOG) - lp_buttonWidth) - lv__BORDER);
        }
        else {
            lv__btnINNER_TOTAL_WIDTH = ((lv__COLUMNS - 2) * lp_buttonWidth);
            lv__voidWIDTH = (lv__dialogWIDTH_INNER - lv__btnINNER_TOTAL_WIDTH);
            lv__voidWIDTH_BTN = FixedToInt((lv__voidWIDTH / (lv__COLUMNS - 1)));
            lv__btnOFFSETx = (((lp_buttonWidth + lv__voidWIDTH_BTN) * (lp_column - 1)) + lv__BORDER);
        }
    }
    if ((lp_row > lv__ROWS)) {
        lv__btnOFFSETy = lv__BORDER;
    }
    else {
        auto794FDE0D_val = lp_row;
        if (auto794FDE0D_val == 0) {
            lv__btnOFFSETy = ((DialogGetHeight(lv__DIALOG) - lp_buttonHeight) / 2);
        }
        else if (auto794FDE0D_val == 1) {
            lv__btnOFFSETy = ((DialogGetHeight(lv__DIALOG) - lp_buttonHeight) - lv__BORDER);
        }
        else if (auto794FDE0D_val == lv__ROWS) {
            lv__btnOFFSETy = lv__BORDER;
        }
        else {
            lv__btnINNER_TOTAL_HEIGHT = ((lv__ROWS - 2) * lp_buttonHeight);
            lv__voidHEIGHT = (lv__dialogHEIGHT_INNER - lv__btnINNER_TOTAL_HEIGHT);
            lv__voidHEIGHT_BTN = FixedToInt((lv__voidHEIGHT / (lv__ROWS - 1)));
            lv__btnOFFSETy = (((lp_buttonHeight + lv__voidHEIGHT_BTN) * (lv__ROWS - lp_row)) + lv__BORDER);
        }
    }
    if (((lp_buttonImage != "Assets\\Textures\\075.dds") && (lp_buttonImage != null))) {
        libNtve_gf_CreateDialogItemLabel(lv__DIALOG, lp_buttonWidth, lp_buttonHeight, c_anchorBottomLeft, (lv__btnOFFSETx + (lp_buttonHeight - (lv__btnBORDER_HEIGHT * 2))), lv__btnOFFSETy, (StringExternal("Param/Value/D07387AA") + lp_text), lp_color, false, 2.0);
        gv_matrixITEMDialogState[lv__dialog_BTNcount][(lp_dialog)][(lp_dialogState)] = DialogControlLastCreated();
        DialogControlCreate(DialogLastCreated(), c_triggerControlTypeImage);
        libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), lp_buttonImage, PlayerGroupAll());
        DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), (lp_buttonHeight - (lv__btnBORDER_HEIGHT * 2)), (lp_buttonHeight - (lv__btnBORDER_HEIGHT * 2)));
        DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorLeft, gv_matrixITEMDialogState[lv__dialog_BTNcount][(lp_dialog)][(lp_dialogState)], c_anchorLeft, (-1 * (lp_buttonHeight - (lv__btnBORDER_HEIGHT * 2))), 0);
        gv_matrixITEMimageDialogState[lv__dialog_BTNcount][(lp_dialog)][(lp_dialogState)] = DialogControlLastCreated();
    }
    else {
        libNtve_gf_CreateDialogItemLabel(lv__DIALOG, lp_buttonWidth, lp_buttonHeight, c_anchorBottomLeft, lv__btnOFFSETx, lv__btnOFFSETy, lp_text, lp_color, false, 2.0);
        gv_matrixITEMDialogState[lv__dialog_BTNcount][(lp_dialog)][(lp_dialogState)] = DialogControlLastCreated();
    }
}

void gf_MatrixCreatePulldown (int lp_pulldownWidth, int lp_pulldownHeight, int lp_column, int lp_row, int lp_dialog, int lp_dialogState, int lp_options, string lp__1, string lp__2, string lp__3, string lp__4, string lp__5, string lp__6, string lp__7, string lp__8, string lp__9, string lp__10) {
    // Variable Declarations
    int lv__DIALOG;
    int lv__BORDER;
    int lv__itemBORDER_WIDTH;
    int lv__itemBORDER_HEIGHT;
    int lv__dialogWIDTH_INNER;
    int lv__dialogHEIGHT_INNER;
    int lv__COLUMNS;
    int lv__ROWS;
    int lv__itemINNER_TOTAL_WIDTH;
    int lv__itemINNER_TOTAL_HEIGHT;
    int lv__voidWIDTH;
    int lv__voidWIDTH_BTN;
    int lv__voidHEIGHT;
    int lv__voidHEIGHT_BTN;
    int lv__itemOFFSETx;
    int lv__itemOFFSETy;
    int lv__dialog_ITEMcount;
    int lv__intA;

    // Automatic Variable Declarations
    int autoABA67449_val;
    int auto8C5B73B2_val;

    // Variable Initialization
    lv__DIALOG = gv_mATRIXState[(lp_dialog)][(lp_dialogState)];
    lv__BORDER = 12;
    lv__itemBORDER_WIDTH = TruncI(gf_PercentofReal(lp_pulldownWidth, 5.0));
    lv__itemBORDER_HEIGHT = TruncI(gf_PercentofReal(lp_pulldownHeight, 5.0));
    lv__dialogWIDTH_INNER = FixedToInt((DialogGetWidth(lv__DIALOG) - (2.0 * (lv__BORDER + lp_pulldownWidth))));
    lv__dialogHEIGHT_INNER = FixedToInt((DialogGetHeight(lv__DIALOG) - (2.0 * (lv__BORDER + lp_pulldownHeight))));
    lv__COLUMNS = TruncI(((DialogGetWidth(lv__DIALOG) - (lv__BORDER * 2)) / (lp_pulldownWidth + lv__itemBORDER_WIDTH)));
    lv__ROWS = TruncI(((DialogGetHeight(lv__DIALOG) - (lv__BORDER * 2)) / (lp_pulldownHeight + lv__itemBORDER_HEIGHT)));
    lv__dialog_ITEMcount = gf_MatrixGetButtonsforRace(lp_dialog, lp_dialogState);

    // Implementation
    if ((lp_column > lv__COLUMNS)) {
        lv__itemOFFSETx = ((DialogGetWidth(lv__DIALOG) - lp_pulldownWidth) - lv__BORDER);
    }
    else {
        autoABA67449_val = lp_column;
        if (autoABA67449_val == 1) {
            lv__itemOFFSETx = lv__BORDER;
        }
        else if (autoABA67449_val == lv__COLUMNS) {
            lv__itemOFFSETx = ((DialogGetWidth(lv__DIALOG) - lp_pulldownWidth) - lv__BORDER);
        }
        else {
            lv__itemINNER_TOTAL_WIDTH = ((lv__COLUMNS - 2) * lp_pulldownWidth);
            lv__voidWIDTH = (lv__dialogWIDTH_INNER - lv__itemINNER_TOTAL_WIDTH);
            lv__voidWIDTH_BTN = FixedToInt((lv__voidWIDTH / (lv__COLUMNS - 1)));
            lv__itemOFFSETx = (((lp_pulldownWidth + lv__voidWIDTH_BTN) * (lp_column - 1)) + lv__BORDER);
        }
    }
    if ((lp_row > lv__ROWS)) {
        lv__itemOFFSETy = lv__BORDER;
    }
    else {
        auto8C5B73B2_val = lp_row;
        if (auto8C5B73B2_val == 1) {
            lv__itemOFFSETy = ((DialogGetHeight(lv__DIALOG) - lp_pulldownHeight) - lv__BORDER);
        }
        else if (auto8C5B73B2_val == lv__ROWS) {
            lv__itemOFFSETy = lv__BORDER;
        }
        else {
            lv__itemINNER_TOTAL_HEIGHT = ((lv__ROWS - 2) * lp_pulldownHeight);
            lv__voidHEIGHT = (lv__dialogHEIGHT_INNER - lv__itemINNER_TOTAL_HEIGHT);
            lv__voidHEIGHT_BTN = FixedToInt((lv__voidHEIGHT / (lv__ROWS - 1)));
            lv__itemOFFSETy = (((lp_pulldownHeight + lv__voidHEIGHT_BTN) * (lv__ROWS - lp_row)) + lv__BORDER);
        }
    }
    DialogControlCreate(lv__DIALOG, c_triggerControlTypePulldown);
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorBottomLeft, lv__itemOFFSETx, lv__itemOFFSETy);
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), lp_pulldownWidth, lp_pulldownHeight);
    if ((lp__1 != "")) {
        DialogControlAddItem(DialogControlLastCreated(), PlayerGroupAll(), StringToText(lp__1));
    }

    if ((lp__2 != "")) {
        DialogControlAddItem(DialogControlLastCreated(), PlayerGroupAll(), StringToText(lp__2));
    }

    if ((lp__3 != "")) {
        DialogControlAddItem(DialogControlLastCreated(), PlayerGroupAll(), StringToText(lp__3));
    }

    if ((lp__4 != "")) {
        DialogControlAddItem(DialogControlLastCreated(), PlayerGroupAll(), StringToText(lp__4));
    }

    if ((lp__5 != "")) {
        DialogControlAddItem(DialogControlLastCreated(), PlayerGroupAll(), StringToText(lp__5));
    }

    if ((lp__6 != "")) {
        DialogControlAddItem(DialogControlLastCreated(), PlayerGroupAll(), StringToText(lp__6));
    }

    if ((lp__7 != "")) {
        DialogControlAddItem(DialogControlLastCreated(), PlayerGroupAll(), StringToText(lp__7));
    }

    if ((lp__8 != "")) {
        DialogControlAddItem(DialogControlLastCreated(), PlayerGroupAll(), StringToText(lp__8));
    }

    if ((lp__9 != "")) {
        DialogControlAddItem(DialogControlLastCreated(), PlayerGroupAll(), StringToText(lp__9));
    }

    if ((lp__10 != "")) {
        DialogControlAddItem(DialogControlLastCreated(), PlayerGroupAll(), StringToText(lp__10));
    }

    DialogControlSelectItem(DialogControlLastCreated(), PlayerGroupAll(), 1);
    if (gf_PresetFlagsCheck((lp_options), 10, 8)) {
        DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorCenter, 0, 0);
    }

    if (gf_PresetFlagsCheck((lp_options), 10, 1)) {
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    }

    gv_matrixITEMDialogState[lv__dialog_ITEMcount][(lp_dialog)][(lp_dialogState)] = DialogControlLastCreated();
    gv_matrixITEMimageDialogState[lv__dialog_ITEMcount][(lp_dialog)][(lp_dialogState)] = DialogControlLastCreated();
    if (gf_PresetFlagsCheck((lp_options), 10, 5)) {
        gf_MatrixModifyItem(true, lv__dialog_ITEMcount, lp_dialog, lp_dialogState);
    }

}

void gf_MatrixModifyItem (bool lp_action, int lp_number, int lp_type, int lp_state) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_action == false)) {
        libNtve_gf_SetDialogItemDesaturated(gv_matrixITEMDialogState[lp_number][(lp_type)][(lp_state)], false, PlayerGroupAll());
        libNtve_gf_SetDialogItemAcceptMouse(gv_matrixITEMDialogState[lp_number][(lp_type)][(lp_state)], true, PlayerGroupAll());
        DialogControlFadeTransparency(gv_matrixITEMDialogState[lp_number][(lp_type)][(lp_state)], PlayerGroupAll(), 0.0, 0.0);
        libNtve_gf_SetDialogItemDesaturated(gv_matrixITEMimageDialogState[lp_number][(lp_type)][(lp_state)], false, PlayerGroupAll());
        DialogControlFadeTransparency(gv_matrixITEMimageDialogState[lp_number][(lp_type)][(lp_state)], PlayerGroupAll(), 0.0, 0.0);
    }
    else {
        libNtve_gf_SetDialogItemDesaturated(gv_matrixITEMDialogState[lp_number][(lp_type)][(lp_state)], true, PlayerGroupAll());
        libNtve_gf_SetDialogItemAcceptMouse(gv_matrixITEMDialogState[lp_number][(lp_type)][(lp_state)], false, PlayerGroupAll());
        DialogControlFadeTransparency(gv_matrixITEMDialogState[lp_number][(lp_type)][(lp_state)], PlayerGroupAll(), 0.0, 60.0);
        libNtve_gf_SetDialogItemDesaturated(gv_matrixITEMimageDialogState[lp_number][(lp_type)][(lp_state)], true, PlayerGroupAll());
        DialogControlFadeTransparency(gv_matrixITEMimageDialogState[lp_number][(lp_type)][(lp_state)], PlayerGroupAll(), 0.0, 60.0);
    }
}

int gf_MatrixGetButtonsforRace (int lp_dialog, int lp_dialogState) {
    // Variable Declarations
    int lv__integerA;

    // Automatic Variable Declarations
    const int autoA0D7C4EA_ae = 99;
    const int autoA0D7C4EA_ai = 1;

    // Variable Initialization

    // Implementation
    lv__integerA = 0;
    for ( ; ( (autoA0D7C4EA_ai >= 0 && lv__integerA <= autoA0D7C4EA_ae) || (autoA0D7C4EA_ai < 0 && lv__integerA >= autoA0D7C4EA_ae) ) ; lv__integerA += autoA0D7C4EA_ai ) {
        if ((gv_matrixITEMDialogState[lv__integerA][(lp_dialog)][(lp_dialogState)] == c_invalidDialogControlId)) {
            return lv__integerA;
        }

    }
    return lv__integerA;
}

bool gf_PresetFlagsCheck (int lp_preset, int lp_totalFlags, int lp_flag) {
    // Variable Declarations
    int lv_presetInteger;
    bool[21] lv_flagChecked;
    int lv_x;

    // Automatic Variable Declarations
    const int auto1974DE95_ae = 0;
    const int auto1974DE95_ai = -1;

    // Variable Initialization
    lv_presetInteger = lp_preset;

    // Implementation
    lv_x = (lp_totalFlags - 1);
    for ( ; ( (auto1974DE95_ai >= 0 && lv_x <= auto1974DE95_ae) || (auto1974DE95_ai < 0 && lv_x >= auto1974DE95_ae) ) ; lv_x += auto1974DE95_ai ) {
        if (((IntToFixed(lv_presetInteger) / Pow2I(lv_x)) >= 1.0)) {
            lv_presetInteger = (lv_presetInteger - Pow2I(lv_x));
            lv_flagChecked[lv_x] = true;
        }
        else {
            lv_flagChecked[lv_x] = false;
        }
    }
    if ((lv_flagChecked[(lp_flag - 1)] == true)) {
        return true;
    }
    else {
        return false;
    }
}

soundlink gf_SoundRacialCompleteRemove (int lp_race, int lp_status) {
    // Automatic Variable Declarations
    int autoD4F1D1B8_val;
    int autoEC6E6609_val;
    int auto3797263B_val;

    // Implementation
    autoD4F1D1B8_val = lp_status;
    if (autoD4F1D1B8_val == ge_CompleteRemoved_Complete) {
        autoEC6E6609_val = lp_race;
        if (autoEC6E6609_val == 1) {
            return SoundLink("Alert_ZergMutationComplete", -1);
        }
        else if (autoEC6E6609_val == 2) {
            return SoundLink("Alert_TerranResearchComplete", -1);
        }
        else if (autoEC6E6609_val == 3) {
            return SoundLink("Alert_ProtossResearchComplete", -1);
        }
        else {
            return null;
        }
    }
    else if (autoD4F1D1B8_val == ge_CompleteRemoved_Removed) {
        auto3797263B_val = lp_race;
        if (auto3797263B_val == 1) {
            return SoundLink("Changling_Explode", -1);
        }
        else if (auto3797263B_val == 2) {
            return SoundLink("RailGun_Launch", -1);
        }
        else if (auto3797263B_val == 3) {
            return SoundLink("Archon_AttackLaunch", -1);
        }
        else {
            return null;
        }
    }
    else {
        return null;
    }
}

string gf_TechGetName (string lp_upgrade) {
    // Variable Declarations
    string lv_upgradeID;
    string lv_upgradeName;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_upgradeID = (lp_upgrade);
    lv_upgradeName = "";

    // Implementation
    lv_upgradeName = CatalogFieldValueGet(c_gameCatalogUpgrade, lv_upgradeID, "Name", c_playerAny);
    return lv_upgradeName;
}

string gf_TechGetRace (string lp_upgrade) {
    // Automatic Variable Declarations
    string autoF275205B_val;

    // Implementation
    autoF275205B_val = CatalogFieldValueGet(c_gameCatalogUpgrade, lp_upgrade, "Race", c_playerAny);
    if (autoF275205B_val == "Zerg") {
        return "Zerg";
    }
    else if (autoF275205B_val == "Terr") {
        return "Terr";
    }
    else if (autoF275205B_val == "Prot") {
        return "Prot";
    }
    else {
        return "Neut";
    }
}

string gf_TechGetfromAbility (string lp_ability, int lp_upgradeNumber) {
    // Variable Declarations
    string lv_abilityID;
    string lv_upgrade;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_abilityID = (lp_ability);

    // Implementation
    lv_upgrade = (CatalogFieldValueGet(c_gameCatalogAbil, lv_abilityID, "InfoArray[" + IntToString(lp_upgradeNumber) + "].Upgrade", c_playerAny));
    return lv_upgrade;
}

int gf_TechGetCostfromAbility (string lp_ability, int lp_upgradeNumber, int lp_resource) {
    // Variable Declarations
    string lv_abilityID;
    string lv_costText;

    // Automatic Variable Declarations
    int auto239A7638_val;

    // Variable Initialization
    lv_abilityID = (lp_ability);
    lv_costText = "";

    // Implementation
    auto239A7638_val = lp_resource;
    if (auto239A7638_val == c_resourceTypeMinerals) {
        lv_costText = CatalogFieldValueGet(c_gameCatalogAbil, lv_abilityID, "InfoArray[" + IntToString(lp_upgradeNumber) + "].Resource[" + IntToString(0) + "]", c_playerAny);
    }
    else if (auto239A7638_val == c_resourceTypeVespene) {
        lv_costText = CatalogFieldValueGet(c_gameCatalogAbil, lv_abilityID, "InfoArray[" + IntToString(lp_upgradeNumber) + "].Resource[" + IntToString(1) + "]", c_playerAny);
    }
    else if (auto239A7638_val == c_resourceTypeTerrazine) {
        lv_costText = CatalogFieldValueGet(c_gameCatalogAbil, lv_abilityID, "InfoArray[" + IntToString(lp_upgradeNumber) + "].Time", c_playerAny);
    }
    else {
    }
    return StringToInt(lv_costText);
}

int gf_IntegertoAlphanumeric (int lp_integer) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_integer == 0)) {
        return ge_Alphanumeric_Zero;
    }
    else if ((lp_integer == 1)) {
        return ge_Alphanumeric_Alpha;
    }
    else if ((lp_integer == 2)) {
        return ge_Alphanumeric_Beta;
    }
    else if ((lp_integer == 3)) {
        return ge_Alphanumeric_Gamma;
    }
    else if ((lp_integer == 4)) {
        return ge_Alphanumeric_Delta;
    }
    else if ((lp_integer == 5)) {
        return ge_Alphanumeric_Epsilon;
    }
    else if ((lp_integer == 6)) {
        return ge_Alphanumeric_Zeta;
    }
    else if ((lp_integer == 7)) {
        return ge_Alphanumeric_Eta;
    }
    else if ((lp_integer == 8)) {
        return ge_Alphanumeric_Theta;
    }
    else if ((lp_integer == 9)) {
        return ge_Alphanumeric_Iota;
    }
    else if ((lp_integer == 10)) {
        return ge_Alphanumeric_Kappa;
    }
    else if ((lp_integer == 11)) {
        return ge_Alphanumeric_Lambda;
    }
    else if ((lp_integer == 12)) {
        return ge_Alphanumeric_Mu;
    }
    else if ((lp_integer == 13)) {
        return ge_Alphanumeric_Nu;
    }
    else if ((lp_integer == 14)) {
        return ge_Alphanumeric_Xi;
    }
    return ge_Alphanumeric_Zero;
}

string gf_ConvertIntegertoRacestr (int lp_race) {
    // Automatic Variable Declarations
    int auto2EBA4E33_val;

    // Implementation
    auto2EBA4E33_val = lp_race;
    if (auto2EBA4E33_val == 1) {
        return "Zerg";
    }
    else if (auto2EBA4E33_val == 2) {
        return "Terran";
    }
    else if (auto2EBA4E33_val == 3) {
        return "Protoss";
    }
    else {
        return "Neutral";
    }
}

string gf_ConvertIntegertoRace (int lp_integer) {
    // Automatic Variable Declarations
    int auto7E1C6A60_val;

    // Implementation
    auto7E1C6A60_val = lp_integer;
    if (auto7E1C6A60_val == 1) {
        return "Zerg";
    }
    else if (auto7E1C6A60_val == 2) {
        return "Terr";
    }
    else if (auto7E1C6A60_val == 3) {
        return "Prot";
    }
    else {
        return "Neut";
    }
}

int gf_ConvertRaceToInteger (string lp_race) {
    // Automatic Variable Declarations
    string auto512BF35E_val;

    // Implementation
    auto512BF35E_val = lp_race;
    if (auto512BF35E_val == "Zerg") {
        return 1;
    }
    else if (auto512BF35E_val == "Terr") {
        return 2;
    }
    else if (auto512BF35E_val == "Prot") {
        return 3;
    }
    else {
        return 0;
    }
}

string gf_ConvertUnitNamePathtoUnitName (string lp_unitNamePath) {
    // Automatic Variable Declarations
    // Implementation
    return StringSub(lp_unitNamePath, 11, StringLength(lp_unitNamePath));
}

string gf_UnitTypeGetRace (string lp_unit) {
    // Automatic Variable Declarations
    string auto6C152D87_val;

    // Implementation
    auto6C152D87_val = CatalogFieldValueGet(c_gameCatalogUnit, lp_unit, "Race", c_playerAny);
    if (auto6C152D87_val == "Zerg") {
        return "Zerg";
    }
    else if (auto6C152D87_val == "Terr") {
        return "Terr";
    }
    else if (auto6C152D87_val == "Prot") {
        return "Prot";
    }
    else {
        return "Neut";
    }
}

text gf_UnitTypeGetTooltip (string lp_unitType) {
    // Variable Declarations
    string lv_unitID;
    string lv_tooltip;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_unitID = (lp_unitType);
    lv_tooltip = "";

    // Implementation
    lv_tooltip = CatalogFieldValueGet(c_gameCatalogUnit, lv_unitID, "Description", c_playerAny);
    return StringExternal(lv_tooltip);
}

bool gf_UnitTypeIsGround (string lp_unitType) {
    // Variable Declarations
    string lv_unitID;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_unitID = (lp_unitType);

    // Implementation
    if ((CatalogFieldValueGetAsInt(c_gameCatalogUnit, lv_unitID, "PlaneArray[" + IntToString(0) + "]", c_playerAny) == 1)) {
        return true;
    }
    else {
        return false;
    }
}

int gf_UnitTypeGetTimefromAbility (int lp_commandNumber, string lp_ability) {
    // Variable Declarations
    string lv_abilityID;
    string lv_timeText;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_abilityID = (lp_ability);
    lv_timeText = "";

    // Implementation
    lv_timeText = CatalogFieldValueGet(c_gameCatalogAbil, lv_abilityID, "InfoArray[" + IntToString(lp_commandNumber) + "].Time", c_playerAny);
    if ((StringToInt(lv_timeText) == 500)) {
        lv_timeText = "0";
    }

    return StringToInt(lv_timeText);
}

string gf_UnitTypeGetNamefromAbility (int lp_commandNumber, string lp_ability) {
    // Variable Declarations
    string lv_abilityID;
    string lv_nameText;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_abilityID = (lp_ability);
    lv_nameText = "";

    // Implementation
    lv_nameText = CatalogFieldValueGet(c_gameCatalogAbil, lv_abilityID, "InfoArray[" + IntToString(lp_commandNumber) + "].Unit[" + IntToString(0) + "]", c_playerAny);
    return lv_nameText;
}

fixed gf_PercentofReal (fixed lp_number, fixed lp_percent) {
    // Automatic Variable Declarations
    // Implementation
    return ((lp_number / 100.0) * lp_percent);
}

fixed gf_PercentageCompare (fixed lp_x, fixed lp_y) {
    // Automatic Variable Declarations
    // Implementation
    return ((lp_x / lp_y) * 100.0);
}

string gf_ButtonGetFromAbility (string lp_ability, int lp_buttonNumber) {
    // Variable Declarations
    string lv_abilityID;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_abilityID = (lp_ability);

    // Implementation
    return (CatalogFieldValueGet(c_gameCatalogAbil, lv_abilityID, "InfoArray[" + IntToString(lp_buttonNumber) + "].Button.DefaultButtonFace", c_playerAny));
}

string gf_ButtonGetIcon (string lp_button) {
    // Variable Declarations
    string lv_buttonID;
    string lv_icon;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_buttonID = (lp_button);

    // Implementation
    lv_icon = (CatalogFieldValueGet(c_gameCatalogButton, lv_buttonID, "Icon", c_playerAny));
    return lv_icon;
}

text gf_ButtonTooltip (string lp_button) {
    // Variable Declarations
    string lv_buttonID;
    string lv_tooltip;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_buttonID = (lp_button);
    lv_tooltip = "";

    // Implementation
    if ((StringContains(gf_TechGetName(null), "Level", c_stringAnywhere, c_stringCase) == true)) {
        lv_tooltip = CatalogFieldValueGet(c_gameCatalogButton, lv_buttonID, "AlertTooltip", c_playerAny);
    }

    return StringExternal(lv_tooltip);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Initialization
//--------------------------------------------------------------------------------------------------
bool gt_Initialization_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_path;

    // Automatic Variable Declarations
    playergroup autoA5A24F6E_g;
    int autoA5A24F6E_var;

    // Variable Initialization
    lv_path = "";

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_declarevariables, true, true);
    gf_TechBuildDatabase();
    gf_UnitsBuildDatabase();
    gf_PreloadUnits();
    TechTreeRequirementsEnable(1, false);
    gf_SettingsPreset();
    gf_UICustomizations();
    GameSetSpeedLocked(true);
    gf_PresetSpawnPoints();
    UnitMagazineArm(UnitFromId(32), AbilityCommand("ItsRainingNukes", 0), 1000);
    UnitMagazineArm(UnitFromId(4), AbilityCommand("ItsRainingNukes", 0), 1000);
    PlayerGroupAdd(gv_aIs, 13);
    PlayerGroupAdd(gv_aIs, 14);
    RegionPlayableMapSet(gv_spawn_regionCurrent);
    libNtve_gf_SetAlliance(0, 1, libNtve_ge_AllianceSetting_AllyWithSharedVisionControlAndSpending);
    libNtve_gf_SetAlliance(0, 13, libNtve_ge_AllianceSetting_Neutral);
    libNtve_gf_SetAlliance(0, 14, libNtve_ge_AllianceSetting_Neutral);
    libNtve_gf_SetAlliance(13, 1, libNtve_ge_AllianceSetting_AllyWithSharedVisionControlAndSpending);
    libNtve_gf_SetAlliance(14, 1, libNtve_ge_AllianceSetting_AllyWithSharedVisionControlAndSpending);
    libNtve_gf_SetAlliance(15, 1, libNtve_ge_AllianceSetting_AllyWithSharedVisionControlAndSpending);
    autoA5A24F6E_g = PlayerGroupActive();
    autoA5A24F6E_var = -1;
    while (true) {
        autoA5A24F6E_var = PlayerGroupNextPlayer(autoA5A24F6E_g, autoA5A24F6E_var);
        if (autoA5A24F6E_var < 0) { break; }
        CameraSetBounds(PlayerGroupSingle(autoA5A24F6E_var), gv_spawn_regionCurrent, true);
        CameraPan(autoA5A24F6E_var, RegionGetCenter(gv_spawn_regionCurrent), 0.0, -1, 10, false);
        PlayerModifyPropertyInt(autoA5A24F6E_var, c_playerPropMinerals, c_playerPropOperSetTo, 1000000);
        PlayerModifyPropertyInt(autoA5A24F6E_var, c_playerPropVespene, c_playerPropOperSetTo, 1000000);
        PlayerModifyPropertyInt(autoA5A24F6E_var, c_playerPropSuppliesMade, c_playerPropOperSetTo, 200);
        VisEnable(c_visTypeMask, false);
        VisEnable(c_visTypeFog, false);
    }
    gf_UnitCreationDialogCreate();
    gf_UnitCounterCreate();
    gf_ResourceDialogCreate();
    gf_GameCreate();
    gf_TechMenuCreate();
    gf_ToolsDialogCreate();
    gf_SettingsCreate();
    gf_TimerCreate();
    gf_StorageDialogCreate();
    UnitSelect(UnitFromId(1), 1, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Initialization_Init () {
    gt_Initialization = TriggerCreate("gt_Initialization_Func");
    TriggerAddEventMapInit(gt_Initialization);
}

//--------------------------------------------------------------------------------------------------
// Trigger: declare variables
//--------------------------------------------------------------------------------------------------
bool gt_declarevariables_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv__location;
    int lv__intA;
    int lv__intB;

    // Automatic Variable Declarations
    int autoA229BAA9_ae;
    const int autoA229BAA9_ai = 1;
    unitgroup autoEF2885D5_g;
    int autoEF2885D5_u;
    unit autoEF2885D5_var;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    gv_spawn_name[lv__location] = "MULTI: Vaani LE";
    gv_spawn_region[lv__location] = RegionFromId(2);
    gv_spawn_pointAdjusted[lv__location][13] = PointFromId(444977086);
    gv_spawn_pointAdjusted[lv__location][14] = PointFromId(1654911182);
    gv_spawn_pointDefault[lv__location][13] = PointFromId(322607655);
    gv_spawn_pointDefault[lv__location][14] = PointFromId(256791733);
    lv__location += 1;
    gv_spawn_name[lv__location] = "Two Ramps";
    gv_spawn_region[lv__location] = RegionFromId(17);
    gv_spawn_pointAdjusted[lv__location][13] = PointFromId(24);
    gv_spawn_pointAdjusted[lv__location][14] = PointFromId(25);
    gv_spawn_pointDefault[lv__location][13] = PointFromId(116);
    gv_spawn_pointDefault[lv__location][14] = PointFromId(117);
    lv__location += 1;
    gv_spawn_name[lv__location] = "Island Defence";
    gv_spawn_region[lv__location] = RegionFromId(19);
    gv_spawn_pointAdjusted[lv__location][13] = PointFromId(26);
    gv_spawn_pointAdjusted[lv__location][14] = PointFromId(27);
    gv_spawn_pointDefault[lv__location][13] = PointFromId(118);
    gv_spawn_pointDefault[lv__location][14] = PointFromId(119);
    lv__location += 1;
    gv_spawn_name[lv__location] = "Corridors";
    gv_spawn_region[lv__location] = RegionFromId(3);
    gv_spawn_pointAdjusted[lv__location][13] = PointFromId(143243340);
    gv_spawn_pointAdjusted[lv__location][14] = PointFromId(448053983);
    gv_spawn_pointDefault[lv__location][13] = PointFromId(1711610241);
    gv_spawn_pointDefault[lv__location][14] = PointFromId(1798235759);
    lv__location += 1;
    gv_spawn_name[lv__location] = "King of the Hill";
    gv_spawn_region[lv__location] = RegionFromId(14);
    gv_spawn_pointAdjusted[lv__location][13] = PointFromId(105);
    gv_spawn_pointAdjusted[lv__location][14] = PointFromId(111);
    gv_spawn_pointDefault[lv__location][13] = PointFromId(710);
    gv_spawn_pointDefault[lv__location][14] = PointFromId(711);
    lv__location += 1;
    gv_spawn_name[lv__location] = "Plain and Simple";
    gv_spawn_region[lv__location] = RegionFromId(16);
    gv_spawn_pointAdjusted[lv__location][13] = PointFromId(21);
    gv_spawn_pointAdjusted[lv__location][14] = PointFromId(22);
    gv_spawn_pointDefault[lv__location][13] = PointFromId(114);
    gv_spawn_pointDefault[lv__location][14] = PointFromId(115);
    gv_playerSPAWN[13] = gv_spawn_pointDefault[0][13];
    gv_playerSPAWN[14] = gv_spawn_pointDefault[0][14];
    gv_tools_spawnSelected = 0;
    gv_spawn_numberCurrent = 0;
    gv_spawn_regionCurrent = gv_spawn_region[0];
    gv_dialogRACE = 1;
    gv_wrench = UnitFromId(3);
    autoA229BAA9_ae = gf_CountofLocations();
    lv__intA = 0;
    for ( ; ( (autoA229BAA9_ai >= 0 && lv__intA <= autoA229BAA9_ae) || (autoA229BAA9_ai < 0 && lv__intA >= autoA229BAA9_ae) ) ; lv__intA += autoA229BAA9_ai ) {
        lv__intB = 0;
        autoEF2885D5_g = UnitGroup(null, 0, gv_spawn_region[lv__intA], UnitFilter(0, 0, (1 << c_targetFilterWorker) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        autoEF2885D5_u = UnitGroupCount(autoEF2885D5_g, c_unitCountAll);
        for (;; autoEF2885D5_u -= 1) {
            autoEF2885D5_var = UnitGroupUnitFromEnd(autoEF2885D5_g, autoEF2885D5_u);
            if (autoEF2885D5_var == null) { break; }
            gv_tools_spawnStartingUnit_Neutral[lv__intA][lv__intB].lv_unitFacing = UnitGetFacing(autoEF2885D5_var);
            gv_tools_spawnStartingUnit_Neutral[lv__intA][lv__intB].lv_unitPosition = UnitGetPosition(autoEF2885D5_var);
            gv_tools_spawnStartingUnit_Neutral[lv__intA][lv__intB].lv_unitType = UnitGetType(autoEF2885D5_var);
            UnitGroupAdd(gv_tools_spawnStartingGroup, autoEF2885D5_var);
            lv__intB += 1;
        }
    }
    UnitGroupAdd(gv_unitgroupMASTERS, UnitFromId(1));
    UnitGroupAdd(gv_unitgroupMASTERS, UnitFromId(2));
    UnitGroupAdd(gv_unitgroupMASTERS, UnitFromId(9));
    UnitGroupAdd(gv_unitgroupMASTERS, UnitFromId(718));
    UnitGroupAdd(gv_unitgroupMASTERS, UnitFromId(717));
    UnitGroupAdd(gv_unitgroupMASTERS, UnitFromId(716));
    UnitGroupAdd(gv_unitgroupMASTERS, UnitFromId(3));
    UnitGroupAdd(gv_unitgroupMASTERS, UnitFromId(32));
    UnitGroupAdd(gv_unitgroupMASTERS, UnitFromId(4));
    UnitGroupAdd(gv_unitgroupSPAWNERS, UnitFromId(1));
    UnitGroupAdd(gv_unitgroupSPAWNERS, UnitFromId(2));
    UnitGroupAdd(gv_unitgroupSPAWNERS, UnitFromId(9));
    UnitGroupAdd(gv_unitgroupSPAWNERS, UnitFromId(718));
    UnitGroupAdd(gv_unitgroupSPAWNERS, UnitFromId(717));
    UnitGroupAdd(gv_unitgroupSPAWNERS, UnitFromId(716));
    PlayerGroupAdd(gv_mASTERS, 1);
    gf_TechAddUnused("overlordtransport");
    gf_TechAddUnused("RoachSupply");
    gf_TechAddUnused("HydraliskSpeedUpgrade");
    gf_TechAddUnused("LocustLifetimeIncrease");
    gf_TechAddUnused("LurkerRange");
    gf_TechAddUnused("TerranShipArmorsLevel1");
    gf_TechAddUnused("TerranShipArmorsLevel2");
    gf_TechAddUnused("TerranShipArmorsLevel3");
    gf_TechAddUnused("TerranVehicleArmorsLevel1");
    gf_TechAddUnused("TerranVehicleArmorsLevel2");
    gf_TechAddUnused("TerranVehicleArmorsLevel3");
    gf_TechAddUnused("CycloneLockOnRangeUpgrade");
    gf_TechAddUnused("CycloneAirUpgrade");
    gf_TechAddUnused("MedivacCaduceusReactor");
    gf_TechAddUnused("HunterSeeker");
    gf_TechAddUnused("MedivacRapidDeployment");
    gf_TechAddUnused("LiberatorMorph");
    gf_TechAddUnused("haltech");
    gf_TechAddUnused("ImmortalRevive");
    gf_TechAddUnused("TempestRangeUpgrade");
    gf_UnitCounterExcludeFace("SwitchtoGround");
    gf_UnitCounterExcludeFace("SwitchtoAir");
    gf_UnitCounterExcludeFace("MorphBackToGateway");
    gf_UnitCounterExcludeFace("UpgradeToWarpGate");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_declarevariables_Init () {
    gt_declarevariables = TriggerCreate("gt_declarevariables_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Any Key DOWN
//--------------------------------------------------------------------------------------------------
bool gt_AnyKeyDOWN_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    int autoAFCC0AE6_val;
    int auto29A0827F_val;
    int autoDFC1F288_val;

    // Actions
    if (!runActions) {
        return true;
    }

    autoAFCC0AE6_val = EventKeyPressed();
    if (autoAFCC0AE6_val == c_keyNumPadPlus) {
        auto29A0827F_val = gv_gameZOOM;
        if (auto29A0827F_val == 4) {
            CameraSetValue(EventPlayer(), c_cameraValueDistance, 50.0, 0.25, -1, 10.0);
            gv_gameZOOM = 3;
            UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaSubtitle, StringExternal("Param/Value/6BCAB5D9"));
        }
        else if (auto29A0827F_val == 3) {
            CameraApplyInfo(EventPlayer(), CameraInfoDefault(), 0.25, -1, 10.0, false);
            gv_gameZOOM = 2;
            UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaSubtitle, StringExternal("Param/Value/93FF9562"));
        }
        else if (auto29A0827F_val == 2) {
            CameraSetValue(EventPlayer(), c_cameraValueDistance, 25.0, 0.25, -1, 10.0);
            gv_gameZOOM = 1;
            UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaSubtitle, StringExternal("Param/Value/67DB3739"));
        }
        else if (auto29A0827F_val == 1) {
            CameraSetValue(EventPlayer(), c_cameraValueDistance, 10.0, 0.25, -1, 10.0);
            gv_gameZOOM = 0;
            UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaSubtitle, StringExternal("Param/Value/FD86766E"));
        }
        else {
        }
    }
    else if (autoAFCC0AE6_val == c_keyNumPadMinus) {
        autoDFC1F288_val = gv_gameZOOM;
        if (autoDFC1F288_val == 3) {
            CameraSetValue(EventPlayer(), c_cameraValueDistance, 80.0, 0.25, -1, 10.0);
            gv_gameZOOM = 4;
            UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaSubtitle, StringExternal("Param/Value/874E2C6A"));
        }
        else if (autoDFC1F288_val == 2) {
            CameraSetValue(EventPlayer(), c_cameraValueDistance, 50.0, 0.25, -1, 10.0);
            gv_gameZOOM = 3;
            UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaSubtitle, StringExternal("Param/Value/DDC46D18"));
        }
        else if (autoDFC1F288_val == 1) {
            CameraApplyInfo(EventPlayer(), CameraInfoDefault(), 0.25, -1, 10.0, false);
            gv_gameZOOM = 2;
            UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaSubtitle, StringExternal("Param/Value/B6B144EF"));
        }
        else if (autoDFC1F288_val == 0) {
            CameraSetValue(EventPlayer(), c_cameraValueDistance, 25.0, 0.25, -1, 10.0);
            gv_gameZOOM = 1;
            UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaSubtitle, StringExternal("Param/Value/12B46D4B"));
        }
        else {
        }
    }
    else if (autoAFCC0AE6_val == c_keyControl) {
        gv_controlDOWN = true;
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AnyKeyDOWN_Init () {
    gt_AnyKeyDOWN = TriggerCreate("gt_AnyKeyDOWN_Func");
    TriggerAddEventKeyPressed(gt_AnyKeyDOWN, 1, c_keyNone, true, c_keyModifierStateExclude, c_keyModifierStateExclude, c_keyModifierStateExclude);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Any Key UP
//--------------------------------------------------------------------------------------------------
bool gt_AnyKeyUP_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    int autoB23968E5_val;

    // Actions
    if (!runActions) {
        return true;
    }

    autoB23968E5_val = EventKeyPressed();
    if (autoB23968E5_val == c_keyControl) {
        gv_controlDOWN = false;
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AnyKeyUP_Init () {
    gt_AnyKeyUP = TriggerCreate("gt_AnyKeyUP_Func");
    TriggerAddEventKeyPressed(gt_AnyKeyUP, 1, c_keyNone, false, c_keyModifierStateExclude, c_keyModifierStateExclude, c_keyModifierStateExclude);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Any Mouse Button DOWN
//--------------------------------------------------------------------------------------------------
bool gt_AnyMouseButtonDOWN_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    int auto40A3608B_val;

    // Actions
    if (!runActions) {
        return true;
    }

    auto40A3608B_val = EventMouseClickedButton();
    if (auto40A3608B_val == c_mouseButtonLeft) {
        gf_SetNuke();
        gf_SetCreep();
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AnyMouseButtonDOWN_Init () {
    gt_AnyMouseButtonDOWN = TriggerCreate("gt_AnyMouseButtonDOWN_Func");
    TriggerAddEventMouseClicked(gt_AnyMouseButtonDOWN, 1, c_mouseButtonNone, true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Any Mouse Button UP
//--------------------------------------------------------------------------------------------------
bool gt_AnyMouseButtonUP_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    int auto218ECC96_val;

    // Actions
    if (!runActions) {
        return true;
    }

    auto218ECC96_val = EventMouseClickedButton();
    if (auto218ECC96_val == c_mouseButtonLeft) {
        gf_SetSpawnPoint();
        gf_PauseCreeping();
    }
    else if (auto218ECC96_val == c_mouseButtonRight) {
        gf_StopNuking();
        gf_StopSpawnPointing();
        gf_StopCreeping();
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AnyMouseButtonUP_Init () {
    gt_AnyMouseButtonUP = TriggerCreate("gt_AnyMouseButtonUP_Func");
    TriggerAddEventMouseClicked(gt_AnyMouseButtonUP, 1, c_mouseButtonNone, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Any Player Moves Mouse
//--------------------------------------------------------------------------------------------------
bool gt_AnyPlayerMovesMouse_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_mouseX;
    fixed lv_mouseY;
    fixed lv_mouseZ;

    // Automatic Variable Declarations
    int auto8B7CE794_val;

    // Variable Initialization
    lv_mouseX = EventMouseMovedPosXWorld();
    lv_mouseY = EventMouseMovedPosYWorld();
    lv_mouseZ = EventMouseMovedPosZWorld();

    // Actions
    if (!runActions) {
        return true;
    }

    gv_mousePosition[EventPlayer()] = libNtve_gf_PointFromXYZ(lv_mouseX, lv_mouseY, lv_mouseZ);
    if (((gv_nUKING == true) || (gv_cREEPING == true))) {
        UnitSetPosition(gv_cursorUnit, gv_mousePosition[EventPlayer()], true);
    }

    if ((gv_pointingSPAWN > -1)) {
        auto8B7CE794_val = gv_pointingSPAWN;
        if (auto8B7CE794_val == 13) {
            UnitSetPosition(gv_unit_pointSPAWN[13], gv_mousePosition[EventPlayer()], true);
        }
        else if (auto8B7CE794_val == 14) {
            UnitSetPosition(gv_unit_pointSPAWN[14], gv_mousePosition[EventPlayer()], true);
        }
        else {
        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AnyPlayerMovesMouse_Init () {
    gt_AnyPlayerMovesMouse = TriggerCreate("gt_AnyPlayerMovesMouse_Func");
    TriggerAddEventMouseMoved(gt_AnyPlayerMovesMouse, c_playerAny);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Chat Message
//--------------------------------------------------------------------------------------------------
bool gt_ChatMessage_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ChatMessage_Init () {
    gt_ChatMessage = TriggerCreate("gt_ChatMessage_Func");
    TriggerAddEventChatMessage(gt_ChatMessage, 1, "", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Every 30.00 seconds of Real Time
//--------------------------------------------------------------------------------------------------
bool gt_Every3000secondsofRealTime_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    PlayerModifyPropertyInt(1, c_playerPropMinerals, c_playerPropOperSetTo, 1000000);
    PlayerModifyPropertyInt(1, c_playerPropVespene, c_playerPropOperSetTo, 1000000);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Every3000secondsofRealTime_Init () {
    gt_Every3000secondsofRealTime = TriggerCreate("gt_Every3000secondsofRealTime_Func");
    TriggerAddEventTimePeriodic(gt_Every3000secondsofRealTime, 30.0, c_timeReal);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Every 5.00 seconds of Game Time
//--------------------------------------------------------------------------------------------------
bool gt_Every500secondsofGameTime_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gf_AggressorUnitsAttackOppositeDirection();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Every500secondsofGameTime_Init () {
    gt_Every500secondsofGameTime = TriggerCreate("gt_Every500secondsofGameTime_Func");
    TriggerAddEventTimePeriodic(gt_Every500secondsofGameTime, 5.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Every 0.05 seconds of Real Time
//--------------------------------------------------------------------------------------------------
bool gt_Every005secondsofRealTime_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_cREEPING == true) && (gv_creepGENERATE == true)) {
        if ((gv_creepREMOVE == false)) {
            CreepModify(gv_mousePosition[1], gv_creepSIZE, true, true);
        }
        else {
            CreepModify(gv_mousePosition[1], gv_creepSIZE, false, true);
        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Every005secondsofRealTime_Init () {
    gt_Every005secondsofRealTime = TriggerCreate("gt_Every005secondsofRealTime_Func");
    TriggerAddEventTimePeriodic(gt_Every005secondsofRealTime, 0.05, c_timeReal);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Detect Unit Construction
//--------------------------------------------------------------------------------------------------
bool gt_DetectUnitConstruction_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupAdd(gv_unitsUnderConstruction, EventUnitProgressUnit());
    UnitGroupAdd(gv_unitsDoingConstruction, EventUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DetectUnitConstruction_Init () {
    gt_DetectUnitConstruction = TriggerCreate("gt_DetectUnitConstruction_Func");
    TriggerAddEventUnitConstructProgress(gt_DetectUnitConstruction, null, c_unitProgressStageStart);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Detect Unit Constructed
//--------------------------------------------------------------------------------------------------
bool gt_DetectUnitConstructed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupRemove(gv_unitsUnderConstruction, EventUnitProgressUnit());
    UnitGroupRemove(gv_unitsDoingConstruction, EventUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DetectUnitConstructed_Init () {
    gt_DetectUnitConstructed = TriggerCreate("gt_DetectUnitConstructed_Func");
    TriggerAddEventUnitConstructProgress(gt_DetectUnitConstructed, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Set Trained and Constructed Unit Properties (Anti-Inside Spawn)
//--------------------------------------------------------------------------------------------------
bool gt_SetTrainedandConstructedUnitPropertiesAntiInsideSpawn_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto945911C8_g;
    int auto945911C8_u;
    unit auto945911C8_var;
    unitgroup auto5D5B5B02_g;
    int auto5D5B5B02_u;
    unit auto5D5B5B02_var;

    // Conditions
    if (testConds) {
        if (!((gv_stageBATTLE == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto945911C8_g = UnitGroupSearch(null, c_playerAny, UnitGetPosition(EventUnitProgressUnit()), 3.0, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto945911C8_u = UnitGroupCount(auto945911C8_g, c_unitCountAll);
    for (;; auto945911C8_u -= 1) {
        auto945911C8_var = UnitGroupUnitFromEnd(auto945911C8_g, auto945911C8_u);
        if (auto945911C8_var == null) { break; }
        gf_RemoveUnitSpecials(auto945911C8_var);
    }
    gf_SetUnitSpecials(EventUnitProgressUnit());
    auto5D5B5B02_g = UnitGroupSearch(null, c_playerAny, UnitGetPosition(EventUnitProgressUnit()), 3.0, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto5D5B5B02_u = UnitGroupCount(auto5D5B5B02_g, c_unitCountAll);
    for (;; auto5D5B5B02_u -= 1) {
        auto5D5B5B02_var = UnitGroupUnitFromEnd(auto5D5B5B02_g, auto5D5B5B02_u);
        if (auto5D5B5B02_var == null) { break; }
        gf_SetUnitSpecials(auto5D5B5B02_var);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SetTrainedandConstructedUnitPropertiesAntiInsideSpawn_Init () {
    gt_SetTrainedandConstructedUnitPropertiesAntiInsideSpawn = TriggerCreate("gt_SetTrainedandConstructedUnitPropertiesAntiInsideSpawn_Func");
    TriggerAddEventUnitTrainProgress(gt_SetTrainedandConstructedUnitPropertiesAntiInsideSpawn, null, c_unitProgressStageComplete);
    TriggerAddEventUnitConstructProgress(gt_SetTrainedandConstructedUnitPropertiesAntiInsideSpawn, null, c_unitProgressStageComplete);
    TriggerAddEventUnitReviveProgress(gt_SetTrainedandConstructedUnitPropertiesAntiInsideSpawn, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Remove Force Fields
//--------------------------------------------------------------------------------------------------
bool gt_RemoveForceFields_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto37D9AFFF_g;
    int auto37D9AFFF_u;

    // Actions
    if (!runActions) {
        return true;
    }

    auto37D9AFFF_g = UnitGroup("ForceField", c_playerAny, RegionCircle(EventUnitTargetPoint(), 2.0), UnitFilter(0, (1 << (c_targetFilterInvulnerable - 32)), (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto37D9AFFF_u = UnitGroupCount(auto37D9AFFF_g, c_unitCountAll);
    for (;; auto37D9AFFF_u -= 1) {
        gv_unitVariableInstant = UnitGroupUnitFromEnd(auto37D9AFFF_g, auto37D9AFFF_u);
        if (gv_unitVariableInstant == null) { break; }
        libNtve_gf_CreateModelAtPoint("FeedbackImpact", UnitGetPosition(gv_unitVariableInstant));
        UnitKill(gv_unitVariableInstant);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RemoveForceFields_Init () {
    gt_RemoveForceFields = TriggerCreate("gt_RemoveForceFields_Func");
    TriggerAddEventUnitAbility(gt_RemoveForceFields, null, AbilityCommand("RemoveForceFields", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Dialog - Item Triggers
//--------------------------------------------------------------------------------------------------
bool gt_DialogItemTriggers_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    int auto312244F6_val;

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    auto312244F6_val = EventDialogControlEventType();
    if (auto312244F6_val == c_triggerControlEventTypeClick) {
        gf_TechMenuTrigger();
        gf_UnitCreationDialogTrigger();
        gf_SettingsTrigger();
        gf_ToolsDialogTrigger();
        gf_GameTrigger();
        gf_ResourceDialogAddRemoveTable();
        gf_StorageDialogTrigger();
    }
    else if (auto312244F6_val == c_triggerControlEventTypeSelectionChanged) {
    }
    else if (auto312244F6_val == c_triggerControlEventTypeChecked) {
    }
    else {
    }
    gf_ResourceDialogRefresh();
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DialogItemTriggers_Init () {
    gt_DialogItemTriggers = TriggerCreate("gt_DialogItemTriggers_Func");
    TriggerAddEventDialogControl(gt_DialogItemTriggers, 1, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_DialogItemTriggers, 1, c_invalidDialogControlId, c_triggerControlEventTypeSelectionChanged);
    TriggerAddEventDialogControl(gt_DialogItemTriggers, 1, c_invalidDialogControlId, c_triggerControlEventTypeChecked);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Dialog - Item Triggers DEBUG
//--------------------------------------------------------------------------------------------------
bool gt_DialogItemTriggersDEBUG_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv__intA;
    int lv__intB;
    int lv__intC;

    // Automatic Variable Declarations
    const int auto3E85FBF7_ae = 90;
    const int auto3E85FBF7_ai = 1;
    const int auto56E9AEE3_ae = 90;
    const int auto56E9AEE3_ai = 1;
    const int autoC729E516_ae = 10;
    const int autoC729E516_ai = 1;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv__intA = 0;
    for ( ; ( (auto3E85FBF7_ai >= 0 && lv__intA <= auto3E85FBF7_ae) || (auto3E85FBF7_ai < 0 && lv__intA >= auto3E85FBF7_ae) ) ; lv__intA += auto3E85FBF7_ai ) {
        lv__intB = 0;
        for ( ; ( (auto56E9AEE3_ai >= 0 && lv__intB <= auto56E9AEE3_ae) || (auto56E9AEE3_ai < 0 && lv__intB >= auto56E9AEE3_ae) ) ; lv__intB += auto56E9AEE3_ai ) {
            lv__intC = 0;
            for ( ; ( (autoC729E516_ai >= 0 && lv__intC <= autoC729E516_ae) || (autoC729E516_ai < 0 && lv__intC >= autoC729E516_ae) ) ; lv__intC += autoC729E516_ai ) {
                if ((gv_matrixITEMDialogState[lv__intA][lv__intB][lv__intC] == EventDialogControl())) {
                    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (StringExternal("Param/Value/4B957396") + (IntToText(lv__intA) + StringExternal("Param/Value/C11C465D") + IntToText(lv__intB) + StringExternal("Param/Value/FA074A65") + IntToText(lv__intC))));
                }

            }
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DialogItemTriggersDEBUG_Init () {
    gt_DialogItemTriggersDEBUG = TriggerCreate("gt_DialogItemTriggersDEBUG_Func");
    TriggerEnable(gt_DialogItemTriggersDEBUG, false);
    TriggerAddEventDialogControl(gt_DialogItemTriggersDEBUG, 1, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_DialogItemTriggersDEBUG, 1, c_invalidDialogControlId, c_triggerControlEventTypeSelectionChanged);
    TriggerAddEventDialogControl(gt_DialogItemTriggersDEBUG, 1, c_invalidDialogControlId, c_triggerControlEventTypeChecked);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Unit Creation
//--------------------------------------------------------------------------------------------------
bool gt_UnitCreation_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv__intA;
    int lv__demand;
    int lv__created;
    int lv__deleted;

    // Automatic Variable Declarations
    unitgroup auto9A10D53C_g;
    int auto9A10D53C_u;
    unit auto9A10D53C_var;
    int auto8CAE8484_ae;
    const int auto8CAE8484_ai = 1;
    const int auto7780D6DF_ae = 15;
    const int auto7780D6DF_ai = 1;
    unitgroup auto23B2B1C9_g;
    int auto23B2B1C9_u;
    unit auto23B2B1C9_var;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGroupHasUnit(gv_unitgroupMASTERS, EventUnit()) == true)) {
        gf_ResourceDialogAddUnitType(libNtve_gf_TriggeringProgressUnitType(), PowI(5.0, (DialogControlGetSelectedItem(gv_matrixITEMDialogState[0][c_gameCatalogUnit][ge_Alphanumeric_Zero], EventPlayer()) - 1)), ge_IncrementationType_Increase, gv_playerCURRENT);
        auto9A10D53C_g = UnitGroup(null, c_playerAny, gv_spawn_regionCurrent, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto9A10D53C_u = UnitGroupCount(auto9A10D53C_g, c_unitCountAll);
        for (;; auto9A10D53C_u -= 1) {
            auto9A10D53C_var = UnitGroupUnitFromEnd(auto9A10D53C_g, auto9A10D53C_u);
            if (auto9A10D53C_var == null) { break; }
            gf_RemoveUnitSpecials(auto9A10D53C_var);
        }
        if ((gv_controlDOWN == true)) {
            lv__demand = 1;
        }
        else {
            lv__demand = PowI(5.0, (DialogControlGetSelectedItem(gv_matrixITEMDialogState[0][c_gameCatalogUnit][ge_Alphanumeric_Zero], 1) - 1));
            if ((lv__demand == 125)) {
                lv__demand = 100;
            }

        }
        auto8CAE8484_ae = FloorI((lv__demand / 15.0));
        lv__intA = 0;
        for ( ; ( (auto8CAE8484_ai >= 0 && lv__intA <= auto8CAE8484_ae) || (auto8CAE8484_ai < 0 && lv__intA >= auto8CAE8484_ae) ) ; lv__intA += auto8CAE8484_ai ) {
            lv__created = 1;
            for ( ; ( (auto7780D6DF_ai >= 0 && lv__created <= auto7780D6DF_ae) || (auto7780D6DF_ai < 0 && lv__created >= auto7780D6DF_ae) ) ; lv__created += auto7780D6DF_ai ) {
                if (((lv__created + (15 * lv__intA)) <= lv__demand)) {
                    UnitCreate(1, libNtve_gf_TriggeringProgressUnitType(), 0, 0, UnitGetPosition(gv_unit_pointSPAWN[gv_playerCURRENT]), AngleBetweenPoints(gv_playerSPAWN[gv_playerCURRENT], gv_playerSPAWN[gf_OppositePlayer(gv_playerCURRENT)]));
                    if ((libNtve_gf_UnitInRegion(UnitLastCreated(), gv_spawn_regionCurrent) == false)) {
                        UnitRemove(UnitLastCreated());
                        lv__deleted += 1;
                    }
                    else {
                        UnitSetOwner(UnitLastCreated(), gv_playerCURRENT, true);
                        if ((libNtve_gf_TriggeringProgressUnitType() == "Carrier")) {
                            UnitMagazineArm(UnitLastCreated(), AbilityCommand("CarrierHangar", 0), 4);
                        }

                        if ((UnitGetType(UnitLastCreated()) == "Interceptor")) {
                            UnitSetState(UnitLastCreated(), c_unitStateTargetable, true);
                            UnitSetState(UnitLastCreated(), c_unitStateSelectable, true);
                        }

                    }
                }
                else {
                    lv__created += (15 * lv__intA);
                    lv__created -= 1;
                    break;
                }
            }
            Wait(0.001, c_timeGame);
        }
        lv__created -= lv__deleted;
        gf_UnitCounterUpdate(lv__created, libNtve_gf_TriggeringProgressUnitType(), gv_playerCURRENT);
        gf_ResourceDialogAddUnitType(UnitGetType(EventUnitProgressUnit()), lv__created, ge_IncrementationType_Increase, gv_playerCURRENT);
        UnitSetProgressStage(EventUnit(), 1, c_unitProgressStageCancel);
        auto23B2B1C9_g = UnitGroup(null, c_playerAny, gv_spawn_regionCurrent, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto23B2B1C9_u = UnitGroupCount(auto23B2B1C9_g, c_unitCountAll);
        for (;; auto23B2B1C9_u -= 1) {
            auto23B2B1C9_var = UnitGroupUnitFromEnd(auto23B2B1C9_g, auto23B2B1C9_u);
            if (auto23B2B1C9_var == null) { break; }
            gf_SetUnitSpecials(auto23B2B1C9_var);
        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_UnitCreation_Init () {
    gt_UnitCreation = TriggerCreate("gt_UnitCreation_Func");
    TriggerAddEventUnitTrainProgress(gt_UnitCreation, null, c_unitProgressStageStart);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Deselect Unit Creator
//--------------------------------------------------------------------------------------------------
bool gt_DeselectUnitCreator_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv__intA;

    // Automatic Variable Declarations
    const int auto9F43D3D6_ae = 13;
    const int auto9F43D3D6_ai = 1;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitGroupHasUnit(gv_unitgroupMASTERS, EventUnit()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv__intA = 2;
    for ( ; ( (auto9F43D3D6_ai >= 0 && lv__intA <= auto9F43D3D6_ae) || (auto9F43D3D6_ai < 0 && lv__intA >= auto9F43D3D6_ae) ) ; lv__intA += auto9F43D3D6_ai ) {
        DialogSetVisible(gv_mATRIXState[c_gameCatalogUnit][lv__intA], PlayerGroupAll(), false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DeselectUnitCreator_Init () {
    gt_DeselectUnitCreator = TriggerCreate("gt_DeselectUnitCreator_Func");
    TriggerAddEventUnitSelected(gt_DeselectUnitCreator, null, c_playerAny, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Switch to Air
//--------------------------------------------------------------------------------------------------
bool gt_SwitchtoAir_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gv_airCreator = true;
    gf_SelectUnitCreator(EventPlayer());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SwitchtoAir_Init () {
    gt_SwitchtoAir = TriggerCreate("gt_SwitchtoAir_Func");
    TriggerAddEventUnitAbility(gt_SwitchtoAir, null, AbilityCommand("SwitchtoAir", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Switch to Ground
//--------------------------------------------------------------------------------------------------
bool gt_SwitchtoGround_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gv_airCreator = false;
    gf_SelectUnitCreator(EventPlayer());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SwitchtoGround_Init () {
    gt_SwitchtoGround = TriggerCreate("gt_SwitchtoGround_Func");
    TriggerAddEventUnitAbility(gt_SwitchtoGround, null, AbilityCommand("SwitchtoGround", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Unit Counter - On Creator Selection
//--------------------------------------------------------------------------------------------------
bool gt_UnitCounterOnCreatorSelection_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGroupCount(UnitGroupSelected(EventPlayer()), c_unitCountAll) == 1) && (gv_wrench != EventUnit()) && (UnitGroupHasUnit(gv_unitgroupSPAWNERS, EventUnit()) == true)) {
        gf_UnitCounterRefresh(gv_mASTERS);
        gv_unitCounter_activated = true;
    }
    else {
        if ((gv_unitCounter_activated == true)) {
            gv_unitCounter_activated = false;
            gf_UnitCounterRefresh(gv_mASTERS);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_UnitCounterOnCreatorSelection_Init () {
    gt_UnitCounterOnCreatorSelection = TriggerCreate("gt_UnitCounterOnCreatorSelection_Func");
    TriggerEnable(gt_UnitCounterOnCreatorSelection, false);
    TriggerAddEventUnitSelected(gt_UnitCounterOnCreatorSelection, null, 1, true);
    TriggerAddEventUnitSelected(gt_UnitCounterOnCreatorSelection, null, 2, true);
    TriggerAddEventUnitSelected(gt_UnitCounterOnCreatorSelection, null, 3, true);
    TriggerAddEventUnitSelected(gt_UnitCounterOnCreatorSelection, null, 4, true);
    TriggerAddEventUnitSelected(gt_UnitCounterOnCreatorSelection, null, 5, true);
    TriggerAddEventUnitSelected(gt_UnitCounterOnCreatorSelection, null, 6, true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Unit Counter - On Unit Remove
//--------------------------------------------------------------------------------------------------
bool gt_UnitCounterOnUnitRemove_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!(((UnitGetOwner(EventUnit()) == 13) || (UnitGetOwner(EventUnit()) == 14)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_UnitCounterUpdate(-1, UnitGetType(EventUnit()), EventPlayer());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_UnitCounterOnUnitRemove_Init () {
    gt_UnitCounterOnUnitRemove = TriggerCreate("gt_UnitCounterOnUnitRemove_Func");
    TriggerEnable(gt_UnitCounterOnUnitRemove, false);
    TriggerAddEventUnitRemoved(gt_UnitCounterOnUnitRemove, null);
    TriggerAddEventUnitDied(gt_UnitCounterOnUnitRemove, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Unit Counter - On Unit Creation
//--------------------------------------------------------------------------------------------------
bool gt_UnitCounterOnUnitCreation_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!(((UnitGetOwner(EventUnit()) == 13) || (UnitGetOwner(EventUnit()) == 14)))) {
            return false;
        }

        if (!(((UnitGetType(EventUnitCreatedUnit()) == "Archon")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_UnitCounterUpdate(1, UnitGetType(EventUnitCreatedUnit()), UnitGetOwner(EventUnitCreatedUnit()));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_UnitCounterOnUnitCreation_Init () {
    gt_UnitCounterOnUnitCreation = TriggerCreate("gt_UnitCounterOnUnitCreation_Func");
    TriggerEnable(gt_UnitCounterOnUnitCreation, false);
    TriggerAddEventUnitCreated(gt_UnitCounterOnUnitCreation, null, null, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Unit Counter - On Unit Train
//--------------------------------------------------------------------------------------------------
bool gt_UnitCounterOnUnitTrain_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!(((UnitGetOwner(EventUnit()) == 13) || (UnitGetOwner(EventUnit()) == 14)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_UnitCounterUpdate(1, libNtve_gf_TriggeringProgressUnitType(), UnitGetOwner(EventUnitProgressUnit()));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_UnitCounterOnUnitTrain_Init () {
    gt_UnitCounterOnUnitTrain = TriggerCreate("gt_UnitCounterOnUnitTrain_Func");
    TriggerEnable(gt_UnitCounterOnUnitTrain, false);
    TriggerAddEventUnitTrainProgress(gt_UnitCounterOnUnitTrain, null, c_unitProgressStageComplete);
    TriggerAddEventUnitConstructProgress(gt_UnitCounterOnUnitTrain, null, c_unitProgressStageComplete);
    TriggerAddEventUnitReviveProgress(gt_UnitCounterOnUnitTrain, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Resource Dialog - Detect Death
//--------------------------------------------------------------------------------------------------
bool gt_ResourceDialogDetectDeath_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!(((UnitGetOwner(EventUnit()) == 13) || (UnitGetOwner(EventUnit()) == 14)))) {
            return false;
        }

        if (!((libNtve_gf_UnitInRegion(EventUnit(), gv_spawn_regionCurrent) == true))) {
            return false;
        }

        if (!((UnitGroupHasUnit(gv_unitgroupSpawned, EventUnit()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_stageBATTLE == true)) {
        if ((UnitGroupHasUnit(gv_unitsUnderConstruction, EventUnit()) == true)) {
            gf_ResourceDialogAddContents(ge_IncrementationType_Increase, RoundI((UnitTypeGetCost(UnitGetType(EventUnit()), c_unitCostMinerals) * 0.25)), RoundI((UnitTypeGetCost(UnitGetType(EventUnit()), c_unitCostVespene) * 0.25)), 0.0, 0.0, 0, UnitGetOwner(EventUnit()), ge_ResourceTableType_Buildings, ge_ResourceState_Lost, 1);
        }
        else {
            gf_ResourceDialogAddUnitType(UnitGetType(EventUnit()), 1, ge_IncrementationType_Decrease, UnitGetOwner(EventUnit()));
        }
    }
    else {
        if ((UnitGroupHasUnit(gv_unitsUnderConstruction, EventUnit()) == false)) {
            gf_ResourceDialogAddUnitType(UnitGetType(EventUnit()), 1, ge_IncrementationType_Other, UnitGetOwner(EventUnit()));
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ResourceDialogDetectDeath_Init () {
    gt_ResourceDialogDetectDeath = TriggerCreate("gt_ResourceDialogDetectDeath_Func");
    TriggerAddEventUnitDied(gt_ResourceDialogDetectDeath, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Resource Dialog - Detect Morph Building (MANUAL)
//--------------------------------------------------------------------------------------------------
bool gt_ResourceDialogDetectMorphBuildingMANUAL_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    abilcmd autoDE6A6259_val;

    // Conditions
    if (testConds) {
        if (!(((UnitGetOwner(EventUnit()) == 13) || (UnitGetOwner(EventUnit()) == 14)))) {
            return false;
        }

        if (!((UnitTypeTestAttribute(UnitGetType(EventUnit()), c_unitAttributeStructure) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    autoDE6A6259_val = EventUnitAbility();
    if (autoDE6A6259_val == AbilityCommand("UpgradeToOrbital", 0)) {
        gf_ResourceDialogAddUnitType(UnitGetType(EventUnit()), 1, ge_IncrementationType_Increase, UnitGetOwner(EventUnit()));
        gf_ResourceDialogAddUnitType("CommandCenter", 1, ge_IncrementationType_Other, UnitGetOwner(EventUnit()));
    }
    else if (autoDE6A6259_val == AbilityCommand("UpgradeToPlanetaryFortress", 0)) {
        gf_ResourceDialogAddUnitType(UnitGetType(EventUnit()), 1, ge_IncrementationType_Increase, UnitGetOwner(EventUnit()));
        gf_ResourceDialogAddUnitType("OrbitalCommand", 1, ge_IncrementationType_Other, UnitGetOwner(EventUnit()));
    }
    else if (autoDE6A6259_val == AbilityCommand("UpgradeToLair", 0)) {
        gf_ResourceDialogAddUnitType(UnitGetType(EventUnit()), 1, ge_IncrementationType_Increase, UnitGetOwner(EventUnit()));
        gf_ResourceDialogAddUnitType("Hatchery", 1, ge_IncrementationType_Other, UnitGetOwner(EventUnit()));
    }
    else if (autoDE6A6259_val == AbilityCommand("UpgradeToHive", 0)) {
        gf_ResourceDialogAddUnitType(UnitGetType(EventUnit()), 1, ge_IncrementationType_Increase, UnitGetOwner(EventUnit()));
        gf_ResourceDialogAddUnitType("Lair", 1, ge_IncrementationType_Other, UnitGetOwner(EventUnit()));
    }
    else if (autoDE6A6259_val == AbilityCommand("UpgradeToLurkerDenMP", 0)) {
        gf_ResourceDialogAddUnitType(UnitGetType(EventUnit()), 1, ge_IncrementationType_Increase, UnitGetOwner(EventUnit()));
        gf_ResourceDialogAddUnitType("HydraliskDen", 1, ge_IncrementationType_Other, UnitGetOwner(EventUnit()));
    }
    else if (autoDE6A6259_val == AbilityCommand("UpgradeToGreaterSpire", 0)) {
        gf_ResourceDialogAddUnitType(UnitGetType(EventUnit()), 1, ge_IncrementationType_Increase, UnitGetOwner(EventUnit()));
        gf_ResourceDialogAddUnitType("Spire", 1, ge_IncrementationType_Other, UnitGetOwner(EventUnit()));
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ResourceDialogDetectMorphBuildingMANUAL_Init () {
    gt_ResourceDialogDetectMorphBuildingMANUAL = TriggerCreate("gt_ResourceDialogDetectMorphBuildingMANUAL_Func");
    TriggerAddEventUnitAbility(gt_ResourceDialogDetectMorphBuildingMANUAL, null, null, c_abilMorphStageStatsEnd, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Resource Dialog - Detect Construction, Morph, Merge
//--------------------------------------------------------------------------------------------------
bool gt_ResourceDialogDetectConstructionMorphMerge_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!(((UnitGetOwner(EventUnitProgressUnit()) == 13) || (UnitGetOwner(EventUnitProgressUnit()) == 14)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_ResourceDialogAddUnitType(UnitGetType(EventUnitProgressUnit()), 1, ge_IncrementationType_Increase, UnitGetOwner(EventUnitProgressUnit()));
    if ((gf_UnitTypeGetRace(libNtve_gf_TriggeringProgressUnitType()) == "Zerg")) {
        gf_ResourceDialogAddUnitType(UnitGetType(EventUnit()), 1, ge_IncrementationType_Other, UnitGetOwner(EventUnit()));
    }

    if ((gv_stageBATTLE == false)) {
        UnitGroupAdd(gv_unitgroupSpawned, EventUnitCreatedUnit());
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ResourceDialogDetectConstructionMorphMerge_Init () {
    gt_ResourceDialogDetectConstructionMorphMerge = TriggerCreate("gt_ResourceDialogDetectConstructionMorphMerge_Func");
    TriggerAddEventUnitConstructProgress(gt_ResourceDialogDetectConstructionMorphMerge, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Resource Dialog - Detect Interceptors
//--------------------------------------------------------------------------------------------------
bool gt_ResourceDialogDetectInterceptors_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!(((UnitGetOwner(EventUnitProgressUnit()) == 13) || (UnitGetOwner(EventUnitProgressUnit()) == 14)))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) == "Carrier"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_ResourceDialogAddUnitType(libNtve_gf_TriggeringProgressUnitType(), 1, ge_IncrementationType_Increase, UnitGetOwner(EventUnit()));
    if ((gv_stageBATTLE == false)) {
        UnitGroupAdd(gv_unitgroupSpawned, EventUnitProgressUnit());
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ResourceDialogDetectInterceptors_Init () {
    gt_ResourceDialogDetectInterceptors = TriggerCreate("gt_ResourceDialogDetectInterceptors_Func");
    TriggerAddEventUnitArmMagazineProgress(gt_ResourceDialogDetectInterceptors, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Resource Dialog - Detect Tech
//--------------------------------------------------------------------------------------------------
bool gt_ResourceDialogDetectTech_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!(((UnitGetOwner(EventUnit()) == 13) || (UnitGetOwner(EventUnit()) == 14)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_ResourceDialogAddTech(ge_IncrementationType_Increase, ge_ResourceState_Current, UnitGetOwner(EventUnit()), libNtve_gf_TriggeringProgressUpgrade());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ResourceDialogDetectTech_Init () {
    gt_ResourceDialogDetectTech = TriggerCreate("gt_ResourceDialogDetectTech_Func");
    TriggerAddEventUnitResearchProgress(gt_ResourceDialogDetectTech, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Resource Dialog - Detect Unit
//--------------------------------------------------------------------------------------------------
bool gt_ResourceDialogDetectUnit_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!(((UnitGetOwner(EventUnitProgressUnit()) == 13) || (UnitGetOwner(EventUnitProgressUnit()) == 14)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_stageBATTLE == false)) {
        UnitGroupAdd(gv_unitgroupSpawned, EventUnitProgressUnit());
    }

    gf_ResourceDialogAddUnitType(UnitGetType(EventUnitProgressUnit()), 1, ge_IncrementationType_Increase, EventPlayer());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ResourceDialogDetectUnit_Init () {
    gt_ResourceDialogDetectUnit = TriggerCreate("gt_ResourceDialogDetectUnit_Func");
    TriggerAddEventUnitTrainProgress(gt_ResourceDialogDetectUnit, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Resource Dialog - Detect Resource Change
//--------------------------------------------------------------------------------------------------
bool gt_ResourceDialogDetectResourceChange_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gf_ResourceDialogRefresh();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ResourceDialogDetectResourceChange_Init () {
    gt_ResourceDialogDetectResourceChange = TriggerCreate("gt_ResourceDialogDetectResourceChange_Func");
    TriggerAddEventPlayerPropChange(gt_ResourceDialogDetectResourceChange, 13, c_playerPropMineralsCollected);
    TriggerAddEventPlayerPropChange(gt_ResourceDialogDetectResourceChange, 13, c_playerPropVespeneCollected);
    TriggerAddEventPlayerPropChange(gt_ResourceDialogDetectResourceChange, 14, c_playerPropMineralsCollected);
    TriggerAddEventPlayerPropChange(gt_ResourceDialogDetectResourceChange, 14, c_playerPropVespeneCollected);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Tech Menu - Tech Detect
//--------------------------------------------------------------------------------------------------
bool gt_TechMenuTechDetect_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!(((UnitGetOwner(EventUnit()) == 13) || (UnitGetOwner(EventUnit()) == 14)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_TechMenuRefresh();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TechMenuTechDetect_Init () {
    gt_TechMenuTechDetect = TriggerCreate("gt_TechMenuTechDetect_Func");
    TriggerAddEventUnitResearchProgress(gt_TechMenuTechDetect, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Settings Menu - (2) No Limits
//--------------------------------------------------------------------------------------------------
bool gt_SettingsMenu2NoLimits_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_stageBATTLE == false))) {
            return false;
        }

        if (!((gf_SettingsOptionEnabled(2, EventPlayer(), UnitGetOwner(EventUnit())) == true))) {
            return false;
        }

        if (!((AbilityCommandGetAbility(EventUnitAbility()) != "SwarmHostSpawnLocusts"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitAbilityReset(EventUnit(), EventUnitAbility(), c_spendLocationAll);
    UnitSetPropertyFixed(EventUnit(), c_unitPropEnergyPercent, 100.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SettingsMenu2NoLimits_Init () {
    gt_SettingsMenu2NoLimits = TriggerCreate("gt_SettingsMenu2NoLimits_Func");
    TriggerAddEventUnitAbility(gt_SettingsMenu2NoLimits, null, null, c_unitAbilStageAll, true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Settings Menu - (3) No Collision
//--------------------------------------------------------------------------------------------------
bool gt_SettingsMenu3NoCollision_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_stageBATTLE == false))) {
            return false;
        }

        if (!(((EventDialogControl() == gv_matrixITEMDialogState[11][c_gameCatalogValidator][ge_Alphanumeric_Alpha]) || (EventDialogControl() == gv_matrixITEMDialogState[12][c_gameCatalogValidator][ge_Alphanumeric_Alpha]) || (EventDialogControl() == gv_matrixITEMDialogState[11][c_gameCatalogValidator][ge_Alphanumeric_Zero]) || (EventDialogControl() == gv_matrixITEMDialogState[12][c_gameCatalogValidator][ge_Alphanumeric_Zero])))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_SettingsMenu3SuppressCollision();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SettingsMenu3NoCollision_Init () {
    gt_SettingsMenu3NoCollision = TriggerCreate("gt_SettingsMenu3NoCollision_Func");
    TriggerAddEventDialogControl(gt_SettingsMenu3NoCollision, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeChecked);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Settings Menu - (4) Neutral
//--------------------------------------------------------------------------------------------------
bool gt_SettingsMenu4Neutral_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_stageBATTLE == false))) {
            return false;
        }

        if (!(((EventDialogControl() == gv_matrixITEMDialogState[14][c_gameCatalogValidator][ge_Alphanumeric_Alpha]) || (EventDialogControl() == gv_matrixITEMDialogState[15][c_gameCatalogValidator][ge_Alphanumeric_Alpha]) || (EventDialogControl() == gv_matrixITEMDialogState[14][c_gameCatalogValidator][ge_Alphanumeric_Zero]) || (EventDialogControl() == gv_matrixITEMDialogState[15][c_gameCatalogValidator][ge_Alphanumeric_Zero])))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_SettingsMenu4AdjustNeutral();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SettingsMenu4Neutral_Init () {
    gt_SettingsMenu4Neutral = TriggerCreate("gt_SettingsMenu4Neutral_Func");
    TriggerAddEventDialogControl(gt_SettingsMenu4Neutral, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeChecked);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Settings Menu - (4) Aggressor
//--------------------------------------------------------------------------------------------------
bool gt_SettingsMenu4Aggressor_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_stageBATTLE == true))) {
            return false;
        }

        if (!(((EventDialogControl() == gv_matrixITEMDialogState[14][c_gameCatalogValidator][ge_Alphanumeric_Alpha]) || (EventDialogControl() == gv_matrixITEMDialogState[15][c_gameCatalogValidator][ge_Alphanumeric_Alpha]) || (EventDialogControl() == gv_matrixITEMDialogState[14][c_gameCatalogValidator][ge_Alphanumeric_Zero]) || (EventDialogControl() == gv_matrixITEMDialogState[15][c_gameCatalogValidator][ge_Alphanumeric_Zero])))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_SettingsMenu4SetAggressors();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SettingsMenu4Aggressor_Init () {
    gt_SettingsMenu4Aggressor = TriggerCreate("gt_SettingsMenu4Aggressor_Func");
    TriggerAddEventDialogControl(gt_SettingsMenu4Aggressor, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeChecked);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Settings Menu - (7) Vision
//--------------------------------------------------------------------------------------------------
bool gt_SettingsMenu7Vision_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((gv_stageBATTLE == true))) {
            return false;
        }

        if (!(((EventDialogControl() == gv_matrixITEMDialogState[23][c_gameCatalogValidator][ge_Alphanumeric_Alpha]) || (EventDialogControl() == gv_matrixITEMDialogState[24][c_gameCatalogValidator][ge_Alphanumeric_Alpha]) || (EventDialogControl() == gv_matrixITEMDialogState[23][c_gameCatalogValidator][ge_Alphanumeric_Zero]) || (EventDialogControl() == gv_matrixITEMDialogState[24][c_gameCatalogValidator][ge_Alphanumeric_Zero])))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_SettingsMenu7AdjustVision();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SettingsMenu7Vision_Init () {
    gt_SettingsMenu7Vision = TriggerCreate("gt_SettingsMenu7Vision_Func");
    TriggerAddEventDialogControl(gt_SettingsMenu7Vision, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeChecked);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Settings Menu - (5) Instant Build
//--------------------------------------------------------------------------------------------------
bool gt_SettingsMenu5InstantBuild_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup autoF222EF27_g;
    int autoF222EF27_u;
    unit autoF222EF27_var;
    unitgroup auto3AB0ACA2_g;
    int auto3AB0ACA2_u;
    unit auto3AB0ACA2_var;

    // Conditions
    if (testConds) {
        if (!(((EventDialogControl() == gv_matrixITEMDialogState[17][c_gameCatalogValidator][ge_Alphanumeric_Alpha]) || (EventDialogControl() == gv_matrixITEMDialogState[18][c_gameCatalogValidator][ge_Alphanumeric_Alpha]) || (EventDialogControl() == gv_matrixITEMDialogState[17][87][0]) || (EventDialogControl() == gv_matrixITEMDialogState[18][c_gameCatalogValidator][ge_Alphanumeric_Zero])))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gf_SettingsOptionEnabled(5, 1, 13) == true)) {
        autoF222EF27_g = UnitGroup(null, 13, gv_spawn_regionCurrent, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        autoF222EF27_u = UnitGroupCount(autoF222EF27_g, c_unitCountAll);
        for (;; autoF222EF27_u -= 1) {
            autoF222EF27_var = UnitGroupUnitFromEnd(autoF222EF27_g, autoF222EF27_u);
            if (autoF222EF27_var == null) { break; }
            UnitSetProgressComplete(autoF222EF27_var, 1, 99);
        }
    }

    if ((gf_SettingsOptionEnabled(5, 1, 14) == true)) {
        auto3AB0ACA2_g = UnitGroup(null, 14, gv_spawn_regionCurrent, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto3AB0ACA2_u = UnitGroupCount(auto3AB0ACA2_g, c_unitCountAll);
        for (;; auto3AB0ACA2_u -= 1) {
            auto3AB0ACA2_var = UnitGroupUnitFromEnd(auto3AB0ACA2_g, auto3AB0ACA2_u);
            if (auto3AB0ACA2_var == null) { break; }
            UnitSetProgressComplete(auto3AB0ACA2_var, 1, 99);
        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SettingsMenu5InstantBuild_Init () {
    gt_SettingsMenu5InstantBuild = TriggerCreate("gt_SettingsMenu5InstantBuild_Func");
    TriggerAddEventDialogControl(gt_SettingsMenu5InstantBuild, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeChecked);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Settings Menu - (5) Complete Reserach
//--------------------------------------------------------------------------------------------------
bool gt_SettingsMenu5CompleteReserach_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!(((UnitGetOwner(EventUnit()) == 13) || (UnitGetOwner(EventUnit()) == 14)))) {
            return false;
        }

        if (!((gf_SettingsOptionEnabled(5, 1, UnitGetOwner(EventUnit())) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitSetProgressComplete(EventUnit(), 1, 100);
    UnitSetProgressComplete(EventUnitProgressUnit(), 1, 100);
    gf_ResourceDialogAddTech(ge_IncrementationType_Increase, ge_ResourceState_Current, UnitGetOwner(EventUnit()), libNtve_gf_TriggeringProgressUpgrade());
    gf_TechMenuRefresh();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SettingsMenu5CompleteReserach_Init () {
    gt_SettingsMenu5CompleteReserach = TriggerCreate("gt_SettingsMenu5CompleteReserach_Func");
    TriggerAddEventUnitTrainProgress(gt_SettingsMenu5CompleteReserach, null, c_unitProgressStageStart);
    TriggerAddEventUnitResearchProgress(gt_SettingsMenu5CompleteReserach, null, c_unitProgressStageStart);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Settings Menu - (5) Complete Build
//--------------------------------------------------------------------------------------------------
bool gt_SettingsMenu5CompleteBuild_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!(((UnitGetOwner(EventUnit()) == 13) || (UnitGetOwner(EventUnit()) == 14)))) {
            return false;
        }

        if (!((gf_SettingsOptionEnabled(5, 1, UnitGetOwner(EventUnit())) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitSetProgressComplete(EventUnit(), 1, 99);
    UnitSetProgressComplete(EventUnitProgressUnit(), 1, 99);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SettingsMenu5CompleteBuild_Init () {
    gt_SettingsMenu5CompleteBuild = TriggerCreate("gt_SettingsMenu5CompleteBuild_Func");
    TriggerAddEventUnitConstructProgress(gt_SettingsMenu5CompleteBuild, null, c_unitProgressStageStart);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Settings Menu - (6) No Requirements
//--------------------------------------------------------------------------------------------------
bool gt_SettingsMenu6NoRequirements_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!(((EventDialogControl() == gv_matrixITEMDialogState[20][c_gameCatalogValidator][ge_Alphanumeric_Alpha]) || (EventDialogControl() == gv_matrixITEMDialogState[21][c_gameCatalogValidator][ge_Alphanumeric_Alpha]) || (EventDialogControl() == gv_matrixITEMDialogState[20][c_gameCatalogValidator][ge_Alphanumeric_Zero]) || (EventDialogControl() == gv_matrixITEMDialogState[21][c_gameCatalogValidator][ge_Alphanumeric_Zero])))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_SettingsMenu6AdjustRequirements(EventPlayer());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SettingsMenu6NoRequirements_Init () {
    gt_SettingsMenu6NoRequirements = TriggerCreate("gt_SettingsMenu6NoRequirements_Func");
    TriggerAddEventDialogControl(gt_SettingsMenu6NoRequirements, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeChecked);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Settings Menu - (8) Disable Attack
//--------------------------------------------------------------------------------------------------
bool gt_SettingsMenu8DisableAttack_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!(((EventDialogControl() == gv_matrixITEMDialogState[26][c_gameCatalogValidator][ge_Alphanumeric_Alpha]) || (EventDialogControl() == gv_matrixITEMDialogState[27][c_gameCatalogValidator][ge_Alphanumeric_Alpha]) || (EventDialogControl() == gv_matrixITEMDialogState[26][c_gameCatalogValidator][ge_Alphanumeric_Zero]) || (EventDialogControl() == gv_matrixITEMDialogState[27][c_gameCatalogValidator][ge_Alphanumeric_Zero])))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_SettingsMenu8AdjustAttack(1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SettingsMenu8DisableAttack_Init () {
    gt_SettingsMenu8DisableAttack = TriggerCreate("gt_SettingsMenu8DisableAttack_Func");
    TriggerAddEventDialogControl(gt_SettingsMenu8DisableAttack, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeChecked);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Chat Commands
//--------------------------------------------------------------------------------------------------
bool gt_ChatCommands_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gv_debug = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ChatCommands_Init () {
    gt_ChatCommands = TriggerCreate("gt_ChatCommands_Func");
    TriggerAddEventChatMessage(gt_ChatCommands, c_playerAny, "-debug", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger Initialization
//--------------------------------------------------------------------------------------------------
void InitTriggers () {
    gt_Initialization_Init();
    gt_declarevariables_Init();
    gt_AnyKeyDOWN_Init();
    gt_AnyKeyUP_Init();
    gt_AnyMouseButtonDOWN_Init();
    gt_AnyMouseButtonUP_Init();
    gt_AnyPlayerMovesMouse_Init();
    gt_ChatMessage_Init();
    gt_Every3000secondsofRealTime_Init();
    gt_Every500secondsofGameTime_Init();
    gt_Every005secondsofRealTime_Init();
    gt_DetectUnitConstruction_Init();
    gt_DetectUnitConstructed_Init();
    gt_SetTrainedandConstructedUnitPropertiesAntiInsideSpawn_Init();
    gt_RemoveForceFields_Init();
    gt_DialogItemTriggers_Init();
    gt_DialogItemTriggersDEBUG_Init();
    gt_UnitCreation_Init();
    gt_DeselectUnitCreator_Init();
    gt_SwitchtoAir_Init();
    gt_SwitchtoGround_Init();
    gt_UnitCounterOnCreatorSelection_Init();
    gt_UnitCounterOnUnitRemove_Init();
    gt_UnitCounterOnUnitCreation_Init();
    gt_UnitCounterOnUnitTrain_Init();
    gt_ResourceDialogDetectDeath_Init();
    gt_ResourceDialogDetectMorphBuildingMANUAL_Init();
    gt_ResourceDialogDetectConstructionMorphMerge_Init();
    gt_ResourceDialogDetectInterceptors_Init();
    gt_ResourceDialogDetectTech_Init();
    gt_ResourceDialogDetectUnit_Init();
    gt_ResourceDialogDetectResourceChange_Init();
    gt_TechMenuTechDetect_Init();
    gt_SettingsMenu2NoLimits_Init();
    gt_SettingsMenu3NoCollision_Init();
    gt_SettingsMenu4Neutral_Init();
    gt_SettingsMenu4Aggressor_Init();
    gt_SettingsMenu7Vision_Init();
    gt_SettingsMenu5InstantBuild_Init();
    gt_SettingsMenu5CompleteReserach_Init();
    gt_SettingsMenu5CompleteBuild_Init();
    gt_SettingsMenu6NoRequirements_Init();
    gt_SettingsMenu8DisableAttack_Init();
    gt_ChatCommands_Init();
}

//--------------------------------------------------------------------------------------------------
// Map Initialization
//--------------------------------------------------------------------------------------------------
void InitMap () {
    InitLibs();
    InitGlobals();
    InitTriggers();
}
